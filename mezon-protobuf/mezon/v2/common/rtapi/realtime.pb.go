// Copyright 2019 The Mezon Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//*
// The realtime protocol for Mezon server.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: rtapi/realtime.proto

package rtapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	api "github.com/nccasia/mezon-go-sdk/mezon-protobuf/mezon/v2/common/api"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The selection of possible error codes.
type Error_Code int32

const (
	// An unexpected result from the server.
	Error_RUNTIME_EXCEPTION Error_Code = 0
	// The server received a message which is not recognised.
	Error_UNRECOGNIZED_PAYLOAD Error_Code = 1
	// A message was expected but contains no content.
	Error_MISSING_PAYLOAD Error_Code = 2
	// Fields in the message have an invalid format.
	Error_BAD_INPUT Error_Code = 3
	// The match id was not found.
	Error_MATCH_NOT_FOUND Error_Code = 4
	// The match join was rejected.
	Error_MATCH_JOIN_REJECTED Error_Code = 5
	// The runtime function does not exist on the server.
	Error_RUNTIME_FUNCTION_NOT_FOUND Error_Code = 6
	// The runtime function executed with an error.
	Error_RUNTIME_FUNCTION_EXCEPTION Error_Code = 7
)

// Enum value maps for Error_Code.
var (
	Error_Code_name = map[int32]string{
		0: "RUNTIME_EXCEPTION",
		1: "UNRECOGNIZED_PAYLOAD",
		2: "MISSING_PAYLOAD",
		3: "BAD_INPUT",
		4: "MATCH_NOT_FOUND",
		5: "MATCH_JOIN_REJECTED",
		6: "RUNTIME_FUNCTION_NOT_FOUND",
		7: "RUNTIME_FUNCTION_EXCEPTION",
	}
	Error_Code_value = map[string]int32{
		"RUNTIME_EXCEPTION":          0,
		"UNRECOGNIZED_PAYLOAD":       1,
		"MISSING_PAYLOAD":            2,
		"BAD_INPUT":                  3,
		"MATCH_NOT_FOUND":            4,
		"MATCH_JOIN_REJECTED":        5,
		"RUNTIME_FUNCTION_NOT_FOUND": 6,
		"RUNTIME_FUNCTION_EXCEPTION": 7,
	}
)

func (x Error_Code) Enum() *Error_Code {
	p := new(Error_Code)
	*p = x
	return p
}

func (x Error_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_rtapi_realtime_proto_enumTypes[0].Descriptor()
}

func (Error_Code) Type() protoreflect.EnumType {
	return &file_rtapi_realtime_proto_enumTypes[0]
}

func (x Error_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_Code.Descriptor instead.
func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{19, 0}
}

// An envelope for a realtime message.
type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Types that are assignable to Message:
	//
	//	*Envelope_Channel
	//	*Envelope_ClanJoin
	//	*Envelope_ChannelJoin
	//	*Envelope_ChannelLeave
	//	*Envelope_ChannelMessage
	//	*Envelope_ChannelMessageAck
	//	*Envelope_ChannelMessageSend
	//	*Envelope_ChannelMessageUpdate
	//	*Envelope_ChannelMessageRemove
	//	*Envelope_ChannelPresenceEvent
	//	*Envelope_Error
	//	*Envelope_Notifications
	//	*Envelope_Rpc
	//	*Envelope_Status
	//	*Envelope_StatusFollow
	//	*Envelope_StatusPresenceEvent
	//	*Envelope_StatusUnfollow
	//	*Envelope_StatusUpdate
	//	*Envelope_StreamData
	//	*Envelope_StreamPresenceEvent
	//	*Envelope_Ping
	//	*Envelope_Pong
	//	*Envelope_MessageTypingEvent
	//	*Envelope_LastSeenMessageEvent
	//	*Envelope_MessageReactionEvent
	//	*Envelope_VoiceJoinedEvent
	//	*Envelope_VoiceLeavedEvent
	//	*Envelope_VoiceStartedEvent
	//	*Envelope_VoiceEndedEvent
	//	*Envelope_ChannelCreatedEvent
	//	*Envelope_ChannelDeletedEvent
	//	*Envelope_ChannelUpdatedEvent
	//	*Envelope_LastPinMessageEvent
	//	*Envelope_CustomStatusEvent
	//	*Envelope_UserChannelAddedEvent
	//	*Envelope_UserChannelRemovedEvent
	//	*Envelope_UserClanRemovedEvent
	//	*Envelope_ClanUpdatedEvent
	//	*Envelope_ClanProfileUpdatedEvent
	//	*Envelope_CheckNameExistedEvent
	//	*Envelope_UserProfileUpdatedEvent
	//	*Envelope_AddClanUserEvent
	//	*Envelope_ClanEventCreated
	//	*Envelope_RoleAssignEvent
	//	*Envelope_ClanDeletedEvent
	//	*Envelope_GiveCoffeeEvent
	//	*Envelope_StickerCreateEvent
	//	*Envelope_StickerUpdateEvent
	//	*Envelope_StickerDeleteEvent
	//	*Envelope_RoleEvent
	//	*Envelope_EventEmoji
	//	*Envelope_StreamingJoinedEvent
	//	*Envelope_StreamingLeavedEvent
	//	*Envelope_StreamingStartedEvent
	//	*Envelope_StreamingEndedEvent
	//	*Envelope_PermissionSetEvent
	//	*Envelope_PermissionChangedEvent
	//	*Envelope_TokenSentEvent
	//	*Envelope_MessageButtonClicked
	//	*Envelope_UnmuteEvent
	//	*Envelope_WebrtcSignalingFwd
	//	*Envelope_JoinPttChannel
	//	*Envelope_TalkPttChannel
	//	*Envelope_ListActivity
	//	*Envelope_DropdownBoxSelected
	//	*Envelope_IncomingCallPush
	//	*Envelope_PttJoinedEvent
	//	*Envelope_PttLeavedEvent
	//	*Envelope_SdTopicEvent
	//	*Envelope_JoinStreamingChannel
	Message isEnvelope_Message `protobuf_oneof:"message"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{0}
}

func (x *Envelope) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (m *Envelope) GetMessage() isEnvelope_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Envelope) GetChannel() *Channel {
	if x, ok := x.GetMessage().(*Envelope_Channel); ok {
		return x.Channel
	}
	return nil
}

func (x *Envelope) GetClanJoin() *ClanJoin {
	if x, ok := x.GetMessage().(*Envelope_ClanJoin); ok {
		return x.ClanJoin
	}
	return nil
}

func (x *Envelope) GetChannelJoin() *ChannelJoin {
	if x, ok := x.GetMessage().(*Envelope_ChannelJoin); ok {
		return x.ChannelJoin
	}
	return nil
}

func (x *Envelope) GetChannelLeave() *ChannelLeave {
	if x, ok := x.GetMessage().(*Envelope_ChannelLeave); ok {
		return x.ChannelLeave
	}
	return nil
}

func (x *Envelope) GetChannelMessage() *api.ChannelMessage {
	if x, ok := x.GetMessage().(*Envelope_ChannelMessage); ok {
		return x.ChannelMessage
	}
	return nil
}

func (x *Envelope) GetChannelMessageAck() *ChannelMessageAck {
	if x, ok := x.GetMessage().(*Envelope_ChannelMessageAck); ok {
		return x.ChannelMessageAck
	}
	return nil
}

func (x *Envelope) GetChannelMessageSend() *ChannelMessageSend {
	if x, ok := x.GetMessage().(*Envelope_ChannelMessageSend); ok {
		return x.ChannelMessageSend
	}
	return nil
}

func (x *Envelope) GetChannelMessageUpdate() *ChannelMessageUpdate {
	if x, ok := x.GetMessage().(*Envelope_ChannelMessageUpdate); ok {
		return x.ChannelMessageUpdate
	}
	return nil
}

func (x *Envelope) GetChannelMessageRemove() *ChannelMessageRemove {
	if x, ok := x.GetMessage().(*Envelope_ChannelMessageRemove); ok {
		return x.ChannelMessageRemove
	}
	return nil
}

func (x *Envelope) GetChannelPresenceEvent() *ChannelPresenceEvent {
	if x, ok := x.GetMessage().(*Envelope_ChannelPresenceEvent); ok {
		return x.ChannelPresenceEvent
	}
	return nil
}

func (x *Envelope) GetError() *Error {
	if x, ok := x.GetMessage().(*Envelope_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Envelope) GetNotifications() *Notifications {
	if x, ok := x.GetMessage().(*Envelope_Notifications); ok {
		return x.Notifications
	}
	return nil
}

func (x *Envelope) GetRpc() *api.Rpc {
	if x, ok := x.GetMessage().(*Envelope_Rpc); ok {
		return x.Rpc
	}
	return nil
}

func (x *Envelope) GetStatus() *Status {
	if x, ok := x.GetMessage().(*Envelope_Status); ok {
		return x.Status
	}
	return nil
}

func (x *Envelope) GetStatusFollow() *StatusFollow {
	if x, ok := x.GetMessage().(*Envelope_StatusFollow); ok {
		return x.StatusFollow
	}
	return nil
}

func (x *Envelope) GetStatusPresenceEvent() *StatusPresenceEvent {
	if x, ok := x.GetMessage().(*Envelope_StatusPresenceEvent); ok {
		return x.StatusPresenceEvent
	}
	return nil
}

func (x *Envelope) GetStatusUnfollow() *StatusUnfollow {
	if x, ok := x.GetMessage().(*Envelope_StatusUnfollow); ok {
		return x.StatusUnfollow
	}
	return nil
}

func (x *Envelope) GetStatusUpdate() *StatusUpdate {
	if x, ok := x.GetMessage().(*Envelope_StatusUpdate); ok {
		return x.StatusUpdate
	}
	return nil
}

func (x *Envelope) GetStreamData() *StreamData {
	if x, ok := x.GetMessage().(*Envelope_StreamData); ok {
		return x.StreamData
	}
	return nil
}

func (x *Envelope) GetStreamPresenceEvent() *StreamPresenceEvent {
	if x, ok := x.GetMessage().(*Envelope_StreamPresenceEvent); ok {
		return x.StreamPresenceEvent
	}
	return nil
}

func (x *Envelope) GetPing() *Ping {
	if x, ok := x.GetMessage().(*Envelope_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *Envelope) GetPong() *Pong {
	if x, ok := x.GetMessage().(*Envelope_Pong); ok {
		return x.Pong
	}
	return nil
}

func (x *Envelope) GetMessageTypingEvent() *MessageTypingEvent {
	if x, ok := x.GetMessage().(*Envelope_MessageTypingEvent); ok {
		return x.MessageTypingEvent
	}
	return nil
}

func (x *Envelope) GetLastSeenMessageEvent() *LastSeenMessageEvent {
	if x, ok := x.GetMessage().(*Envelope_LastSeenMessageEvent); ok {
		return x.LastSeenMessageEvent
	}
	return nil
}

func (x *Envelope) GetMessageReactionEvent() *api.MessageReaction {
	if x, ok := x.GetMessage().(*Envelope_MessageReactionEvent); ok {
		return x.MessageReactionEvent
	}
	return nil
}

func (x *Envelope) GetVoiceJoinedEvent() *VoiceJoinedEvent {
	if x, ok := x.GetMessage().(*Envelope_VoiceJoinedEvent); ok {
		return x.VoiceJoinedEvent
	}
	return nil
}

func (x *Envelope) GetVoiceLeavedEvent() *VoiceLeavedEvent {
	if x, ok := x.GetMessage().(*Envelope_VoiceLeavedEvent); ok {
		return x.VoiceLeavedEvent
	}
	return nil
}

func (x *Envelope) GetVoiceStartedEvent() *VoiceStartedEvent {
	if x, ok := x.GetMessage().(*Envelope_VoiceStartedEvent); ok {
		return x.VoiceStartedEvent
	}
	return nil
}

func (x *Envelope) GetVoiceEndedEvent() *VoiceEndedEvent {
	if x, ok := x.GetMessage().(*Envelope_VoiceEndedEvent); ok {
		return x.VoiceEndedEvent
	}
	return nil
}

func (x *Envelope) GetChannelCreatedEvent() *ChannelCreatedEvent {
	if x, ok := x.GetMessage().(*Envelope_ChannelCreatedEvent); ok {
		return x.ChannelCreatedEvent
	}
	return nil
}

func (x *Envelope) GetChannelDeletedEvent() *ChannelDeletedEvent {
	if x, ok := x.GetMessage().(*Envelope_ChannelDeletedEvent); ok {
		return x.ChannelDeletedEvent
	}
	return nil
}

func (x *Envelope) GetChannelUpdatedEvent() *ChannelUpdatedEvent {
	if x, ok := x.GetMessage().(*Envelope_ChannelUpdatedEvent); ok {
		return x.ChannelUpdatedEvent
	}
	return nil
}

func (x *Envelope) GetLastPinMessageEvent() *LastPinMessageEvent {
	if x, ok := x.GetMessage().(*Envelope_LastPinMessageEvent); ok {
		return x.LastPinMessageEvent
	}
	return nil
}

func (x *Envelope) GetCustomStatusEvent() *CustomStatusEvent {
	if x, ok := x.GetMessage().(*Envelope_CustomStatusEvent); ok {
		return x.CustomStatusEvent
	}
	return nil
}

func (x *Envelope) GetUserChannelAddedEvent() *UserChannelAdded {
	if x, ok := x.GetMessage().(*Envelope_UserChannelAddedEvent); ok {
		return x.UserChannelAddedEvent
	}
	return nil
}

func (x *Envelope) GetUserChannelRemovedEvent() *UserChannelRemoved {
	if x, ok := x.GetMessage().(*Envelope_UserChannelRemovedEvent); ok {
		return x.UserChannelRemovedEvent
	}
	return nil
}

func (x *Envelope) GetUserClanRemovedEvent() *UserClanRemoved {
	if x, ok := x.GetMessage().(*Envelope_UserClanRemovedEvent); ok {
		return x.UserClanRemovedEvent
	}
	return nil
}

func (x *Envelope) GetClanUpdatedEvent() *ClanUpdatedEvent {
	if x, ok := x.GetMessage().(*Envelope_ClanUpdatedEvent); ok {
		return x.ClanUpdatedEvent
	}
	return nil
}

func (x *Envelope) GetClanProfileUpdatedEvent() *ClanProfileUpdatedEvent {
	if x, ok := x.GetMessage().(*Envelope_ClanProfileUpdatedEvent); ok {
		return x.ClanProfileUpdatedEvent
	}
	return nil
}

func (x *Envelope) GetCheckNameExistedEvent() *CheckNameExistedEvent {
	if x, ok := x.GetMessage().(*Envelope_CheckNameExistedEvent); ok {
		return x.CheckNameExistedEvent
	}
	return nil
}

func (x *Envelope) GetUserProfileUpdatedEvent() *UserProfileUpdatedEvent {
	if x, ok := x.GetMessage().(*Envelope_UserProfileUpdatedEvent); ok {
		return x.UserProfileUpdatedEvent
	}
	return nil
}

func (x *Envelope) GetAddClanUserEvent() *AddClanUserEvent {
	if x, ok := x.GetMessage().(*Envelope_AddClanUserEvent); ok {
		return x.AddClanUserEvent
	}
	return nil
}

func (x *Envelope) GetClanEventCreated() *api.CreateEventRequest {
	if x, ok := x.GetMessage().(*Envelope_ClanEventCreated); ok {
		return x.ClanEventCreated
	}
	return nil
}

func (x *Envelope) GetRoleAssignEvent() *RoleAssignedEvent {
	if x, ok := x.GetMessage().(*Envelope_RoleAssignEvent); ok {
		return x.RoleAssignEvent
	}
	return nil
}

func (x *Envelope) GetClanDeletedEvent() *ClanDeletedEvent {
	if x, ok := x.GetMessage().(*Envelope_ClanDeletedEvent); ok {
		return x.ClanDeletedEvent
	}
	return nil
}

func (x *Envelope) GetGiveCoffeeEvent() *api.GiveCoffeeEvent {
	if x, ok := x.GetMessage().(*Envelope_GiveCoffeeEvent); ok {
		return x.GiveCoffeeEvent
	}
	return nil
}

func (x *Envelope) GetStickerCreateEvent() *StickerCreateEvent {
	if x, ok := x.GetMessage().(*Envelope_StickerCreateEvent); ok {
		return x.StickerCreateEvent
	}
	return nil
}

func (x *Envelope) GetStickerUpdateEvent() *StickerUpdateEvent {
	if x, ok := x.GetMessage().(*Envelope_StickerUpdateEvent); ok {
		return x.StickerUpdateEvent
	}
	return nil
}

func (x *Envelope) GetStickerDeleteEvent() *StickerDeleteEvent {
	if x, ok := x.GetMessage().(*Envelope_StickerDeleteEvent); ok {
		return x.StickerDeleteEvent
	}
	return nil
}

func (x *Envelope) GetRoleEvent() *RoleEvent {
	if x, ok := x.GetMessage().(*Envelope_RoleEvent); ok {
		return x.RoleEvent
	}
	return nil
}

func (x *Envelope) GetEventEmoji() *EventEmoji {
	if x, ok := x.GetMessage().(*Envelope_EventEmoji); ok {
		return x.EventEmoji
	}
	return nil
}

func (x *Envelope) GetStreamingJoinedEvent() *StreamingJoinedEvent {
	if x, ok := x.GetMessage().(*Envelope_StreamingJoinedEvent); ok {
		return x.StreamingJoinedEvent
	}
	return nil
}

func (x *Envelope) GetStreamingLeavedEvent() *StreamingLeavedEvent {
	if x, ok := x.GetMessage().(*Envelope_StreamingLeavedEvent); ok {
		return x.StreamingLeavedEvent
	}
	return nil
}

func (x *Envelope) GetStreamingStartedEvent() *StreamingStartedEvent {
	if x, ok := x.GetMessage().(*Envelope_StreamingStartedEvent); ok {
		return x.StreamingStartedEvent
	}
	return nil
}

func (x *Envelope) GetStreamingEndedEvent() *StreamingEndedEvent {
	if x, ok := x.GetMessage().(*Envelope_StreamingEndedEvent); ok {
		return x.StreamingEndedEvent
	}
	return nil
}

func (x *Envelope) GetPermissionSetEvent() *PermissionSetEvent {
	if x, ok := x.GetMessage().(*Envelope_PermissionSetEvent); ok {
		return x.PermissionSetEvent
	}
	return nil
}

func (x *Envelope) GetPermissionChangedEvent() *PermissionChangedEvent {
	if x, ok := x.GetMessage().(*Envelope_PermissionChangedEvent); ok {
		return x.PermissionChangedEvent
	}
	return nil
}

func (x *Envelope) GetTokenSentEvent() *api.TokenSentEvent {
	if x, ok := x.GetMessage().(*Envelope_TokenSentEvent); ok {
		return x.TokenSentEvent
	}
	return nil
}

func (x *Envelope) GetMessageButtonClicked() *MessageButtonClicked {
	if x, ok := x.GetMessage().(*Envelope_MessageButtonClicked); ok {
		return x.MessageButtonClicked
	}
	return nil
}

func (x *Envelope) GetUnmuteEvent() *UnmuteEvent {
	if x, ok := x.GetMessage().(*Envelope_UnmuteEvent); ok {
		return x.UnmuteEvent
	}
	return nil
}

func (x *Envelope) GetWebrtcSignalingFwd() *WebrtcSignalingFwd {
	if x, ok := x.GetMessage().(*Envelope_WebrtcSignalingFwd); ok {
		return x.WebrtcSignalingFwd
	}
	return nil
}

func (x *Envelope) GetJoinPttChannel() *JoinPTTChannel {
	if x, ok := x.GetMessage().(*Envelope_JoinPttChannel); ok {
		return x.JoinPttChannel
	}
	return nil
}

func (x *Envelope) GetTalkPttChannel() *TalkPTTChannel {
	if x, ok := x.GetMessage().(*Envelope_TalkPttChannel); ok {
		return x.TalkPttChannel
	}
	return nil
}

func (x *Envelope) GetListActivity() *ListActivity {
	if x, ok := x.GetMessage().(*Envelope_ListActivity); ok {
		return x.ListActivity
	}
	return nil
}

func (x *Envelope) GetDropdownBoxSelected() *DropdownBoxSelected {
	if x, ok := x.GetMessage().(*Envelope_DropdownBoxSelected); ok {
		return x.DropdownBoxSelected
	}
	return nil
}

func (x *Envelope) GetIncomingCallPush() *IncomingCallPush {
	if x, ok := x.GetMessage().(*Envelope_IncomingCallPush); ok {
		return x.IncomingCallPush
	}
	return nil
}

func (x *Envelope) GetPttJoinedEvent() *PTTJoinedEvent {
	if x, ok := x.GetMessage().(*Envelope_PttJoinedEvent); ok {
		return x.PttJoinedEvent
	}
	return nil
}

func (x *Envelope) GetPttLeavedEvent() *PTTLeavedEvent {
	if x, ok := x.GetMessage().(*Envelope_PttLeavedEvent); ok {
		return x.PttLeavedEvent
	}
	return nil
}

func (x *Envelope) GetSdTopicEvent() *SdTopicEvent {
	if x, ok := x.GetMessage().(*Envelope_SdTopicEvent); ok {
		return x.SdTopicEvent
	}
	return nil
}

func (x *Envelope) GetJoinStreamingChannel() *JoinStreamingChannel {
	if x, ok := x.GetMessage().(*Envelope_JoinStreamingChannel); ok {
		return x.JoinStreamingChannel
	}
	return nil
}

type isEnvelope_Message interface {
	isEnvelope_Message()
}

type Envelope_Channel struct {
	// A response from a channel join operation.
	Channel *Channel `protobuf:"bytes,2,opt,name=channel,proto3,oneof"`
}

type Envelope_ClanJoin struct {
	// Join a realtime chat clan
	ClanJoin *ClanJoin `protobuf:"bytes,3,opt,name=clan_join,json=clanJoin,proto3,oneof"`
}

type Envelope_ChannelJoin struct {
	// Join a realtime chat channel.
	ChannelJoin *ChannelJoin `protobuf:"bytes,4,opt,name=channel_join,json=channelJoin,proto3,oneof"`
}

type Envelope_ChannelLeave struct {
	// Leave a realtime chat channel.
	ChannelLeave *ChannelLeave `protobuf:"bytes,5,opt,name=channel_leave,json=channelLeave,proto3,oneof"`
}

type Envelope_ChannelMessage struct {
	// An incoming message on a realtime chat channel.
	ChannelMessage *api.ChannelMessage `protobuf:"bytes,6,opt,name=channel_message,json=channelMessage,proto3,oneof"`
}

type Envelope_ChannelMessageAck struct {
	// An acknowledgement received in response to sending a message on a chat channel.
	ChannelMessageAck *ChannelMessageAck `protobuf:"bytes,7,opt,name=channel_message_ack,json=channelMessageAck,proto3,oneof"`
}

type Envelope_ChannelMessageSend struct {
	// Send a message to a realtime chat channel.
	ChannelMessageSend *ChannelMessageSend `protobuf:"bytes,8,opt,name=channel_message_send,json=channelMessageSend,proto3,oneof"`
}

type Envelope_ChannelMessageUpdate struct {
	// Update a message previously sent to a realtime chat channel.
	ChannelMessageUpdate *ChannelMessageUpdate `protobuf:"bytes,9,opt,name=channel_message_update,json=channelMessageUpdate,proto3,oneof"`
}

type Envelope_ChannelMessageRemove struct {
	// Remove a message previously sent to a realtime chat channel.
	ChannelMessageRemove *ChannelMessageRemove `protobuf:"bytes,10,opt,name=channel_message_remove,json=channelMessageRemove,proto3,oneof"`
}

type Envelope_ChannelPresenceEvent struct {
	// Presence update for a particular realtime chat channel.
	ChannelPresenceEvent *ChannelPresenceEvent `protobuf:"bytes,11,opt,name=channel_presence_event,json=channelPresenceEvent,proto3,oneof"`
}

type Envelope_Error struct {
	// Describes an error which occurred on the server.
	Error *Error `protobuf:"bytes,12,opt,name=error,proto3,oneof"`
}

type Envelope_Notifications struct {
	// Notifications send by the server.
	Notifications *Notifications `protobuf:"bytes,13,opt,name=notifications,proto3,oneof"`
}

type Envelope_Rpc struct {
	// RPC call or response.
	Rpc *api.Rpc `protobuf:"bytes,14,opt,name=rpc,proto3,oneof"`
}

type Envelope_Status struct {
	// An incoming status snapshot for some set of users.
	Status *Status `protobuf:"bytes,15,opt,name=status,proto3,oneof"`
}

type Envelope_StatusFollow struct {
	// Start following some set of users to receive their status updates.
	StatusFollow *StatusFollow `protobuf:"bytes,16,opt,name=status_follow,json=statusFollow,proto3,oneof"`
}

type Envelope_StatusPresenceEvent struct {
	// An incoming status update.
	StatusPresenceEvent *StatusPresenceEvent `protobuf:"bytes,17,opt,name=status_presence_event,json=statusPresenceEvent,proto3,oneof"`
}

type Envelope_StatusUnfollow struct {
	// Stop following some set of users to no longer receive their status updates.
	StatusUnfollow *StatusUnfollow `protobuf:"bytes,18,opt,name=status_unfollow,json=statusUnfollow,proto3,oneof"`
}

type Envelope_StatusUpdate struct {
	// Set the user's own status.
	StatusUpdate *StatusUpdate `protobuf:"bytes,19,opt,name=status_update,json=statusUpdate,proto3,oneof"`
}

type Envelope_StreamData struct {
	// A data message delivered over a stream.
	StreamData *StreamData `protobuf:"bytes,20,opt,name=stream_data,json=streamData,proto3,oneof"`
}

type Envelope_StreamPresenceEvent struct {
	// Presence update for a particular stream.
	StreamPresenceEvent *StreamPresenceEvent `protobuf:"bytes,21,opt,name=stream_presence_event,json=streamPresenceEvent,proto3,oneof"`
}

type Envelope_Ping struct {
	// Application-level heartbeat and connection check.
	Ping *Ping `protobuf:"bytes,22,opt,name=ping,proto3,oneof"`
}

type Envelope_Pong struct {
	// Application-level heartbeat and connection check response.
	Pong *Pong `protobuf:"bytes,23,opt,name=pong,proto3,oneof"`
}

type Envelope_MessageTypingEvent struct {
	// User typing event
	MessageTypingEvent *MessageTypingEvent `protobuf:"bytes,24,opt,name=message_typing_event,json=messageTypingEvent,proto3,oneof"`
}

type Envelope_LastSeenMessageEvent struct {
	// Last seen message event
	LastSeenMessageEvent *LastSeenMessageEvent `protobuf:"bytes,25,opt,name=last_seen_message_event,json=lastSeenMessageEvent,proto3,oneof"`
}

type Envelope_MessageReactionEvent struct {
	// User send reactoin event
	MessageReactionEvent *api.MessageReaction `protobuf:"bytes,26,opt,name=message_reaction_event,json=messageReactionEvent,proto3,oneof"`
}

type Envelope_VoiceJoinedEvent struct {
	// user join voice channel
	VoiceJoinedEvent *VoiceJoinedEvent `protobuf:"bytes,27,opt,name=voice_joined_event,json=voiceJoinedEvent,proto3,oneof"`
}

type Envelope_VoiceLeavedEvent struct {
	// user leave voice channel
	VoiceLeavedEvent *VoiceLeavedEvent `protobuf:"bytes,28,opt,name=voice_leaved_event,json=voiceLeavedEvent,proto3,oneof"`
}

type Envelope_VoiceStartedEvent struct {
	// voice channel start
	VoiceStartedEvent *VoiceStartedEvent `protobuf:"bytes,29,opt,name=voice_started_event,json=voiceStartedEvent,proto3,oneof"`
}

type Envelope_VoiceEndedEvent struct {
	// voice channel end
	VoiceEndedEvent *VoiceEndedEvent `protobuf:"bytes,30,opt,name=voice_ended_event,json=voiceEndedEvent,proto3,oneof"`
}

type Envelope_ChannelCreatedEvent struct {
	// channel created event
	ChannelCreatedEvent *ChannelCreatedEvent `protobuf:"bytes,31,opt,name=channel_created_event,json=channelCreatedEvent,proto3,oneof"`
}

type Envelope_ChannelDeletedEvent struct {
	// channel deleted event
	ChannelDeletedEvent *ChannelDeletedEvent `protobuf:"bytes,32,opt,name=channel_deleted_event,json=channelDeletedEvent,proto3,oneof"`
}

type Envelope_ChannelUpdatedEvent struct {
	// channel deleted event
	ChannelUpdatedEvent *ChannelUpdatedEvent `protobuf:"bytes,33,opt,name=channel_updated_event,json=channelUpdatedEvent,proto3,oneof"`
}

type Envelope_LastPinMessageEvent struct {
	// Last pin message event
	LastPinMessageEvent *LastPinMessageEvent `protobuf:"bytes,34,opt,name=last_pin_message_event,json=lastPinMessageEvent,proto3,oneof"`
}

type Envelope_CustomStatusEvent struct {
	// Update custom status
	CustomStatusEvent *CustomStatusEvent `protobuf:"bytes,35,opt,name=custom_status_event,json=customStatusEvent,proto3,oneof"`
}

type Envelope_UserChannelAddedEvent struct {
	// User is added to channel event
	UserChannelAddedEvent *UserChannelAdded `protobuf:"bytes,36,opt,name=user_channel_added_event,json=userChannelAddedEvent,proto3,oneof"`
}

type Envelope_UserChannelRemovedEvent struct {
	// User is removed to channel event
	UserChannelRemovedEvent *UserChannelRemoved `protobuf:"bytes,37,opt,name=user_channel_removed_event,json=userChannelRemovedEvent,proto3,oneof"`
}

type Envelope_UserClanRemovedEvent struct {
	// User is removed to clan event
	UserClanRemovedEvent *UserClanRemoved `protobuf:"bytes,38,opt,name=user_clan_removed_event,json=userClanRemovedEvent,proto3,oneof"`
}

type Envelope_ClanUpdatedEvent struct {
	// Clan updated event
	ClanUpdatedEvent *ClanUpdatedEvent `protobuf:"bytes,39,opt,name=clan_updated_event,json=clanUpdatedEvent,proto3,oneof"`
}

type Envelope_ClanProfileUpdatedEvent struct {
	// Clan profile updated event
	ClanProfileUpdatedEvent *ClanProfileUpdatedEvent `protobuf:"bytes,40,opt,name=clan_profile_updated_event,json=clanProfileUpdatedEvent,proto3,oneof"`
}

type Envelope_CheckNameExistedEvent struct {
	// Check duplicate clan name event
	CheckNameExistedEvent *CheckNameExistedEvent `protobuf:"bytes,41,opt,name=check_name_existed_event,json=checkNameExistedEvent,proto3,oneof"`
}

type Envelope_UserProfileUpdatedEvent struct {
	// User profile update event
	UserProfileUpdatedEvent *UserProfileUpdatedEvent `protobuf:"bytes,42,opt,name=user_profile_updated_event,json=userProfileUpdatedEvent,proto3,oneof"`
}

type Envelope_AddClanUserEvent struct {
	// user join clan
	AddClanUserEvent *AddClanUserEvent `protobuf:"bytes,43,opt,name=add_clan_user_event,json=addClanUserEvent,proto3,oneof"`
}

type Envelope_ClanEventCreated struct {
	// clan event created
	ClanEventCreated *api.CreateEventRequest `protobuf:"bytes,44,opt,name=clan_event_created,json=clanEventCreated,proto3,oneof"`
}

type Envelope_RoleAssignEvent struct {
	// role assigned event
	RoleAssignEvent *RoleAssignedEvent `protobuf:"bytes,45,opt,name=role_assign_event,json=roleAssignEvent,proto3,oneof"`
}

type Envelope_ClanDeletedEvent struct {
	// clan deleted event
	ClanDeletedEvent *ClanDeletedEvent `protobuf:"bytes,46,opt,name=clan_deleted_event,json=clanDeletedEvent,proto3,oneof"`
}

type Envelope_GiveCoffeeEvent struct {
	// Give a coffe event
	GiveCoffeeEvent *api.GiveCoffeeEvent `protobuf:"bytes,47,opt,name=give_coffee_event,json=giveCoffeeEvent,proto3,oneof"`
}

type Envelope_StickerCreateEvent struct {
	// sticker created event
	StickerCreateEvent *StickerCreateEvent `protobuf:"bytes,48,opt,name=sticker_create_event,json=stickerCreateEvent,proto3,oneof"`
}

type Envelope_StickerUpdateEvent struct {
	// sticker updated event
	StickerUpdateEvent *StickerUpdateEvent `protobuf:"bytes,49,opt,name=sticker_update_event,json=stickerUpdateEvent,proto3,oneof"`
}

type Envelope_StickerDeleteEvent struct {
	// sticker deleted event
	StickerDeleteEvent *StickerDeleteEvent `protobuf:"bytes,50,opt,name=sticker_delete_event,json=stickerDeleteEvent,proto3,oneof"`
}

type Envelope_RoleEvent struct {
	// role created event
	RoleEvent *RoleEvent `protobuf:"bytes,51,opt,name=role_event,json=roleEvent,proto3,oneof"`
}

type Envelope_EventEmoji struct {
	// Event emoji
	EventEmoji *EventEmoji `protobuf:"bytes,52,opt,name=event_emoji,json=eventEmoji,proto3,oneof"`
}

type Envelope_StreamingJoinedEvent struct {
	// user join streaming channel
	StreamingJoinedEvent *StreamingJoinedEvent `protobuf:"bytes,53,opt,name=streaming_joined_event,json=streamingJoinedEvent,proto3,oneof"`
}

type Envelope_StreamingLeavedEvent struct {
	// user leave streaming channel
	StreamingLeavedEvent *StreamingLeavedEvent `protobuf:"bytes,54,opt,name=streaming_leaved_event,json=streamingLeavedEvent,proto3,oneof"`
}

type Envelope_StreamingStartedEvent struct {
	// streaming channel start
	StreamingStartedEvent *StreamingStartedEvent `protobuf:"bytes,55,opt,name=streaming_started_event,json=streamingStartedEvent,proto3,oneof"`
}

type Envelope_StreamingEndedEvent struct {
	// streaming channel end
	StreamingEndedEvent *StreamingEndedEvent `protobuf:"bytes,56,opt,name=streaming_ended_event,json=streamingEndedEvent,proto3,oneof"`
}

type Envelope_PermissionSetEvent struct {
	// set permission of role/user in channel
	PermissionSetEvent *PermissionSetEvent `protobuf:"bytes,57,opt,name=permission_set_event,json=permissionSetEvent,proto3,oneof"`
}

type Envelope_PermissionChangedEvent struct {
	// permission changed event
	PermissionChangedEvent *PermissionChangedEvent `protobuf:"bytes,58,opt,name=permission_changed_event,json=permissionChangedEvent,proto3,oneof"`
}

type Envelope_TokenSentEvent struct {
	// token is sent event
	TokenSentEvent *api.TokenSentEvent `protobuf:"bytes,59,opt,name=token_sent_event,json=tokenSentEvent,proto3,oneof"`
}

type Envelope_MessageButtonClicked struct {
	MessageButtonClicked *MessageButtonClicked `protobuf:"bytes,60,opt,name=message_button_clicked,json=messageButtonClicked,proto3,oneof"`
}

type Envelope_UnmuteEvent struct {
	// unmute channel event
	UnmuteEvent *UnmuteEvent `protobuf:"bytes,61,opt,name=unmute_event,json=unmuteEvent,proto3,oneof"`
}

type Envelope_WebrtcSignalingFwd struct {
	// voice call
	WebrtcSignalingFwd *WebrtcSignalingFwd `protobuf:"bytes,62,opt,name=webrtc_signaling_fwd,json=webrtcSignalingFwd,proto3,oneof"`
}

type Envelope_JoinPttChannel struct {
	// join ptt
	JoinPttChannel *JoinPTTChannel `protobuf:"bytes,63,opt,name=join_ptt_channel,json=joinPttChannel,proto3,oneof"`
}

type Envelope_TalkPttChannel struct {
	// talk ptt
	TalkPttChannel *TalkPTTChannel `protobuf:"bytes,64,opt,name=talk_ptt_channel,json=talkPttChannel,proto3,oneof"`
}

type Envelope_ListActivity struct {
	// List activity event for each user
	ListActivity *ListActivity `protobuf:"bytes,65,opt,name=list_activity,json=listActivity,proto3,oneof"`
}

type Envelope_DropdownBoxSelected struct {
	// dropdown box selected
	DropdownBoxSelected *DropdownBoxSelected `protobuf:"bytes,66,opt,name=dropdown_box_selected,json=dropdownBoxSelected,proto3,oneof"`
}

type Envelope_IncomingCallPush struct {
	// IncomingCallPush
	IncomingCallPush *IncomingCallPush `protobuf:"bytes,67,opt,name=incoming_call_push,json=incomingCallPush,proto3,oneof"`
}

type Envelope_PttJoinedEvent struct {
	// user join ptt
	PttJoinedEvent *PTTJoinedEvent `protobuf:"bytes,68,opt,name=ptt_joined_event,json=pttJoinedEvent,proto3,oneof"`
}

type Envelope_PttLeavedEvent struct {
	// user leave ptt
	PttLeavedEvent *PTTLeavedEvent `protobuf:"bytes,69,opt,name=ptt_leaved_event,json=pttLeavedEvent,proto3,oneof"`
}

type Envelope_SdTopicEvent struct {
	// Sd topic event
	SdTopicEvent *SdTopicEvent `protobuf:"bytes,70,opt,name=sd_topic_event,json=sdTopicEvent,proto3,oneof"`
}

type Envelope_JoinStreamingChannel struct {
	// streaming webrtc
	JoinStreamingChannel *JoinStreamingChannel `protobuf:"bytes,71,opt,name=join_streaming_channel,json=joinStreamingChannel,proto3,oneof"`
}

func (*Envelope_Channel) isEnvelope_Message() {}

func (*Envelope_ClanJoin) isEnvelope_Message() {}

func (*Envelope_ChannelJoin) isEnvelope_Message() {}

func (*Envelope_ChannelLeave) isEnvelope_Message() {}

func (*Envelope_ChannelMessage) isEnvelope_Message() {}

func (*Envelope_ChannelMessageAck) isEnvelope_Message() {}

func (*Envelope_ChannelMessageSend) isEnvelope_Message() {}

func (*Envelope_ChannelMessageUpdate) isEnvelope_Message() {}

func (*Envelope_ChannelMessageRemove) isEnvelope_Message() {}

func (*Envelope_ChannelPresenceEvent) isEnvelope_Message() {}

func (*Envelope_Error) isEnvelope_Message() {}

func (*Envelope_Notifications) isEnvelope_Message() {}

func (*Envelope_Rpc) isEnvelope_Message() {}

func (*Envelope_Status) isEnvelope_Message() {}

func (*Envelope_StatusFollow) isEnvelope_Message() {}

func (*Envelope_StatusPresenceEvent) isEnvelope_Message() {}

func (*Envelope_StatusUnfollow) isEnvelope_Message() {}

func (*Envelope_StatusUpdate) isEnvelope_Message() {}

func (*Envelope_StreamData) isEnvelope_Message() {}

func (*Envelope_StreamPresenceEvent) isEnvelope_Message() {}

func (*Envelope_Ping) isEnvelope_Message() {}

func (*Envelope_Pong) isEnvelope_Message() {}

func (*Envelope_MessageTypingEvent) isEnvelope_Message() {}

func (*Envelope_LastSeenMessageEvent) isEnvelope_Message() {}

func (*Envelope_MessageReactionEvent) isEnvelope_Message() {}

func (*Envelope_VoiceJoinedEvent) isEnvelope_Message() {}

func (*Envelope_VoiceLeavedEvent) isEnvelope_Message() {}

func (*Envelope_VoiceStartedEvent) isEnvelope_Message() {}

func (*Envelope_VoiceEndedEvent) isEnvelope_Message() {}

func (*Envelope_ChannelCreatedEvent) isEnvelope_Message() {}

func (*Envelope_ChannelDeletedEvent) isEnvelope_Message() {}

func (*Envelope_ChannelUpdatedEvent) isEnvelope_Message() {}

func (*Envelope_LastPinMessageEvent) isEnvelope_Message() {}

func (*Envelope_CustomStatusEvent) isEnvelope_Message() {}

func (*Envelope_UserChannelAddedEvent) isEnvelope_Message() {}

func (*Envelope_UserChannelRemovedEvent) isEnvelope_Message() {}

func (*Envelope_UserClanRemovedEvent) isEnvelope_Message() {}

func (*Envelope_ClanUpdatedEvent) isEnvelope_Message() {}

func (*Envelope_ClanProfileUpdatedEvent) isEnvelope_Message() {}

func (*Envelope_CheckNameExistedEvent) isEnvelope_Message() {}

func (*Envelope_UserProfileUpdatedEvent) isEnvelope_Message() {}

func (*Envelope_AddClanUserEvent) isEnvelope_Message() {}

func (*Envelope_ClanEventCreated) isEnvelope_Message() {}

func (*Envelope_RoleAssignEvent) isEnvelope_Message() {}

func (*Envelope_ClanDeletedEvent) isEnvelope_Message() {}

func (*Envelope_GiveCoffeeEvent) isEnvelope_Message() {}

func (*Envelope_StickerCreateEvent) isEnvelope_Message() {}

func (*Envelope_StickerUpdateEvent) isEnvelope_Message() {}

func (*Envelope_StickerDeleteEvent) isEnvelope_Message() {}

func (*Envelope_RoleEvent) isEnvelope_Message() {}

func (*Envelope_EventEmoji) isEnvelope_Message() {}

func (*Envelope_StreamingJoinedEvent) isEnvelope_Message() {}

func (*Envelope_StreamingLeavedEvent) isEnvelope_Message() {}

func (*Envelope_StreamingStartedEvent) isEnvelope_Message() {}

func (*Envelope_StreamingEndedEvent) isEnvelope_Message() {}

func (*Envelope_PermissionSetEvent) isEnvelope_Message() {}

func (*Envelope_PermissionChangedEvent) isEnvelope_Message() {}

func (*Envelope_TokenSentEvent) isEnvelope_Message() {}

func (*Envelope_MessageButtonClicked) isEnvelope_Message() {}

func (*Envelope_UnmuteEvent) isEnvelope_Message() {}

func (*Envelope_WebrtcSignalingFwd) isEnvelope_Message() {}

func (*Envelope_JoinPttChannel) isEnvelope_Message() {}

func (*Envelope_TalkPttChannel) isEnvelope_Message() {}

func (*Envelope_ListActivity) isEnvelope_Message() {}

func (*Envelope_DropdownBoxSelected) isEnvelope_Message() {}

func (*Envelope_IncomingCallPush) isEnvelope_Message() {}

func (*Envelope_PttJoinedEvent) isEnvelope_Message() {}

func (*Envelope_PttLeavedEvent) isEnvelope_Message() {}

func (*Envelope_SdTopicEvent) isEnvelope_Message() {}

func (*Envelope_JoinStreamingChannel) isEnvelope_Message() {}

type JoinStreamingChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel id
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// type offer, answer or candidate
	DataType int32 `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// offer
	JsonData string `protobuf:"bytes,3,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"`
	// receiver id
	ReceiverId string `protobuf:"bytes,4,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	// clan id
	ClanId string `protobuf:"bytes,5,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// streaming_push
	StreamingPush bool `protobuf:"varint,6,opt,name=streaming_push,json=streamingPush,proto3" json:"streaming_push,omitempty"`
}

func (x *JoinStreamingChannel) Reset() {
	*x = JoinStreamingChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinStreamingChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinStreamingChannel) ProtoMessage() {}

func (x *JoinStreamingChannel) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinStreamingChannel.ProtoReflect.Descriptor instead.
func (*JoinStreamingChannel) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{1}
}

func (x *JoinStreamingChannel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *JoinStreamingChannel) GetDataType() int32 {
	if x != nil {
		return x.DataType
	}
	return 0
}

func (x *JoinStreamingChannel) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

func (x *JoinStreamingChannel) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

func (x *JoinStreamingChannel) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *JoinStreamingChannel) GetStreamingPush() bool {
	if x != nil {
		return x.StreamingPush
	}
	return false
}

type IncomingCallPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverId string `protobuf:"bytes,1,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	JsonData   string `protobuf:"bytes,3,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"`
	ChannelId  string `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	CallerId   string `protobuf:"bytes,5,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
}

func (x *IncomingCallPush) Reset() {
	*x = IncomingCallPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomingCallPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingCallPush) ProtoMessage() {}

func (x *IncomingCallPush) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingCallPush.ProtoReflect.Descriptor instead.
func (*IncomingCallPush) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{2}
}

func (x *IncomingCallPush) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

func (x *IncomingCallPush) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

func (x *IncomingCallPush) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *IncomingCallPush) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

type WebrtcSignalingFwd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiverId string `protobuf:"bytes,1,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	DataType   int32  `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	JsonData   string `protobuf:"bytes,3,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"`
	ChannelId  string `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	CallerId   string `protobuf:"bytes,5,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
}

func (x *WebrtcSignalingFwd) Reset() {
	*x = WebrtcSignalingFwd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebrtcSignalingFwd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebrtcSignalingFwd) ProtoMessage() {}

func (x *WebrtcSignalingFwd) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebrtcSignalingFwd.ProtoReflect.Descriptor instead.
func (*WebrtcSignalingFwd) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{3}
}

func (x *WebrtcSignalingFwd) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

func (x *WebrtcSignalingFwd) GetDataType() int32 {
	if x != nil {
		return x.DataType
	}
	return 0
}

func (x *WebrtcSignalingFwd) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

func (x *WebrtcSignalingFwd) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *WebrtcSignalingFwd) GetCallerId() string {
	if x != nil {
		return x.CallerId
	}
	return ""
}

type AddClanUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// the user
	User *UserProfileRedis `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *AddClanUserEvent) Reset() {
	*x = AddClanUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddClanUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddClanUserEvent) ProtoMessage() {}

func (x *AddClanUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddClanUserEvent.ProtoReflect.Descriptor instead.
func (*AddClanUserEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{4}
}

func (x *AddClanUserEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *AddClanUserEvent) GetUser() *UserProfileRedis {
	if x != nil {
		return x.User
	}
	return nil
}

// On role assign
type RoleAssignedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The clan of this role
	ClanId string `protobuf:"bytes,1,opt,name=ClanId,proto3" json:"ClanId,omitempty"`
	// Role ID
	RoleId string `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// UserIds Assigned
	UserIdsAssigned []string `protobuf:"bytes,3,rep,name=user_ids_assigned,json=userIdsAssigned,proto3" json:"user_ids_assigned,omitempty"`
	// UserIds Removed
	UserIdsRemoved []string `protobuf:"bytes,4,rep,name=user_ids_removed,json=userIdsRemoved,proto3" json:"user_ids_removed,omitempty"`
}

func (x *RoleAssignedEvent) Reset() {
	*x = RoleAssignedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleAssignedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAssignedEvent) ProtoMessage() {}

func (x *RoleAssignedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAssignedEvent.ProtoReflect.Descriptor instead.
func (*RoleAssignedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{5}
}

func (x *RoleAssignedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *RoleAssignedEvent) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *RoleAssignedEvent) GetUserIdsAssigned() []string {
	if x != nil {
		return x.UserIdsAssigned
	}
	return nil
}

func (x *RoleAssignedEvent) GetUserIdsRemoved() []string {
	if x != nil {
		return x.UserIdsRemoved
	}
	return nil
}

// Permission role channel
type PermissionRoleChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Permission id
	PermissionId string `protobuf:"bytes,1,opt,name=permission_id,json=permissionId,proto3" json:"permission_id,omitempty"`
	// active
	Active bool `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *PermissionRoleChannel) Reset() {
	*x = PermissionRoleChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionRoleChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionRoleChannel) ProtoMessage() {}

func (x *PermissionRoleChannel) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionRoleChannel.ProtoReflect.Descriptor instead.
func (*PermissionRoleChannel) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{6}
}

func (x *PermissionRoleChannel) GetPermissionId() string {
	if x != nil {
		return x.PermissionId
	}
	return ""
}

func (x *PermissionRoleChannel) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

// hashtagDM
type HashtagDm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel id.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The channel lable
	ChannelLabel string `protobuf:"bytes,2,opt,name=channel_label,json=channelLabel,proto3" json:"channel_label,omitempty"`
	// The clan of this channel
	ClanId string `protobuf:"bytes,3,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The clan name
	ClanName string `protobuf:"bytes,4,opt,name=clan_name,json=clanName,proto3" json:"clan_name,omitempty"`
	MeetingCode string `protobuf:"bytes,5,opt,name=meeting_code,json=meetingCode,proto3" json:"meeting_code,omitempty"`
	Type int32 `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	ChannelPrivate int32 `protobuf:"varint,7,opt,name=channel_private,json=channelPrivate,proto3" json:"channel_private,omitempty"`
	ParrentId string `protobuf:"bytes,8,opt,name=parrent_id,json=parrentId,proto3" json:"parrent_id,omitempty"`
}

func (x *HashtagDm) Reset() {
	*x = HashtagDm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashtagDm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashtagDm) ProtoMessage() {}

func (x *HashtagDm) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashtagDm.ProtoReflect.Descriptor instead.
func (*HashtagDm) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{7}
}

func (x *HashtagDm) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *HashtagDm) GetChannelLabel() string {
	if x != nil {
		return x.ChannelLabel
	}
	return ""
}

func (x *HashtagDm) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *HashtagDm) GetClanName() string {
	if x != nil {
		return x.ClanName
	}
	return ""
}

func (x *HashtagDm) GetMeetingCode() string {
	if x != nil {
		return x.MeetingCode
	}
	return ""
}

func (x *HashtagDm) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *HashtagDm) GetChannelPrivate() int32 {
	if x != nil {
		return x.ChannelPrivate
	}
	return 0
}

func (x *HashtagDm) GetParrentId() string {
	if x != nil {
		return x.ParrentId
	}
	return ""
}

// Channel description record
type ChannelDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The clan of this channel
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The channel this message belongs to.
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The channel type.
	Type *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The channel lable
	ChannelLabel string `protobuf:"bytes,4,opt,name=channel_label,json=channelLabel,proto3" json:"channel_label,omitempty"`
	// The channel private
	ChannelPrivate int32 `protobuf:"varint,5,opt,name=channel_private,json=channelPrivate,proto3" json:"channel_private,omitempty"`
	// meeting code
	MeetingCode string `protobuf:"bytes,6,opt,name=meeting_code,json=meetingCode,proto3" json:"meeting_code,omitempty"`
	ClanName string `protobuf:"bytes,7,opt,name=clan_name,json=clanName,proto3" json:"clan_name,omitempty"`
	ParrentId string `protobuf:"bytes,8,opt,name=parrent_id,json=parrentId,proto3" json:"parrent_id,omitempty"`
	LastSentMessage *api.ChannelMessageHeader `protobuf:"bytes,12,opt,name=last_sent_message,json=lastSentMessage,proto3" json:"last_sent_message,omitempty"`
}

func (x *ChannelDescription) Reset() {
	*x = ChannelDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDescription) ProtoMessage() {}

func (x *ChannelDescription) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDescription.ProtoReflect.Descriptor instead.
func (*ChannelDescription) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{8}
}

func (x *ChannelDescription) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ChannelDescription) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelDescription) GetType() *wrapperspb.Int32Value {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ChannelDescription) GetChannelLabel() string {
	if x != nil {
		return x.ChannelLabel
	}
	return ""
}

func (x *ChannelDescription) GetChannelPrivate() int32 {
	if x != nil {
		return x.ChannelPrivate
	}
	return 0
}

func (x *ChannelDescription) GetMeetingCode() string {
	if x != nil {
		return x.MeetingCode
	}
	return ""
}

func (x *ChannelDescription) GetClanName() string {
	if x != nil {
		return x.ClanName
	}
	return ""
}

func (x *ChannelDescription) GetParrentId() string {
	if x != nil {
		return x.ParrentId
	}
	return ""
}

func (x *ChannelDescription) GetLastSentMessage() *api.ChannelMessageHeader {
	if x != nil {
		return x.LastSentMessage
	}
	return nil
}

type ClanEmoji struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// src url
	Src string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
	// shortname
	Shortname string `protobuf:"bytes,3,opt,name=shortname,proto3" json:"shortname,omitempty"`
	// category
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// creator id
	CreatorId string `protobuf:"bytes,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	// clan_id
	ClanId string `protobuf:"bytes,6,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// clan logo
	Logo string `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	// clan name
	ClanName string `protobuf:"bytes,8,opt,name=clan_name,json=clanName,proto3" json:"clan_name,omitempty"`
}

func (x *ClanEmoji) Reset() {
	*x = ClanEmoji{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanEmoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanEmoji) ProtoMessage() {}

func (x *ClanEmoji) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanEmoji.ProtoReflect.Descriptor instead.
func (*ClanEmoji) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{9}
}

func (x *ClanEmoji) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClanEmoji) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *ClanEmoji) GetShortname() string {
	if x != nil {
		return x.Shortname
	}
	return ""
}

func (x *ClanEmoji) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ClanEmoji) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *ClanEmoji) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ClanEmoji) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ClanEmoji) GetClanName() string {
	if x != nil {
		return x.ClanName
	}
	return ""
}

// A realtime chat channel.
type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the channel.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The users currently in the channel.
	Presences []*UserPresence `protobuf:"bytes,2,rep,name=presences,proto3" json:"presences,omitempty"`
	// A reference to the current user's presence in the channel.
	Self *UserPresence `protobuf:"bytes,3,opt,name=self,proto3" json:"self,omitempty"`
	// The name of the chat room, or an empty string if this message was not sent through a chat room.
	ChanelLabel string `protobuf:"bytes,4,opt,name=chanel_label,json=chanelLabel,proto3" json:"chanel_label,omitempty"`
	// The clan logo
	ClanLogo string `protobuf:"bytes,5,opt,name=clan_logo,json=clanLogo,proto3" json:"clan_logo,omitempty"`
	// The category name
	CategoryName string `protobuf:"bytes,6,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{10}
}

func (x *Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Channel) GetPresences() []*UserPresence {
	if x != nil {
		return x.Presences
	}
	return nil
}

func (x *Channel) GetSelf() *UserPresence {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *Channel) GetChanelLabel() string {
	if x != nil {
		return x.ChanelLabel
	}
	return ""
}

func (x *Channel) GetClanLogo() string {
	if x != nil {
		return x.ClanLogo
	}
	return ""
}

func (x *Channel) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

// Join operation for a realtime chat channel.
type ClanJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of channel or group
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
}

func (x *ClanJoin) Reset() {
	*x = ClanJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanJoin) ProtoMessage() {}

func (x *ClanJoin) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanJoin.ProtoReflect.Descriptor instead.
func (*ClanJoin) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{11}
}

func (x *ClanJoin) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

// Join operation for a realtime chat channel.
type ChannelJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The id of channel or group
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// channel type
	ChannelType int32 `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	// is public
	IsPublic bool `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *ChannelJoin) Reset() {
	*x = ChannelJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelJoin) ProtoMessage() {}

func (x *ChannelJoin) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelJoin.ProtoReflect.Descriptor instead.
func (*ChannelJoin) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{12}
}

func (x *ChannelJoin) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ChannelJoin) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelJoin) GetChannelType() int32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *ChannelJoin) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

// Leave a realtime channel.
type ChannelLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The ID of the channel to leave.
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// channel type
	ChannelType int32 `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	// is public channel
	IsPublic bool `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *ChannelLeave) Reset() {
	*x = ChannelLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelLeave) ProtoMessage() {}

func (x *ChannelLeave) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelLeave.ProtoReflect.Descriptor instead.
func (*ChannelLeave) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelLeave) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ChannelLeave) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelLeave) GetChannelType() int32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *ChannelLeave) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

// A receipt reply from a channel message send operation.
type ChannelMessageAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel the message was sent to.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The unique ID assigned to the message.
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The code representing a message type or category.
	Code *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Username of the message sender.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the message was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The UNIX time (for gRPC clients) or ISO string (for REST clients) when the message was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// True if the message was persisted to the channel's history, false otherwise.
	Persistent *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=persistent,proto3" json:"persistent,omitempty"`
	// The clan logo
	ClanLogo string `protobuf:"bytes,8,opt,name=clan_logo,json=clanLogo,proto3" json:"clan_logo,omitempty"`
	// The category name
	CategoryName string `protobuf:"bytes,9,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
}

func (x *ChannelMessageAck) Reset() {
	*x = ChannelMessageAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageAck) ProtoMessage() {}

func (x *ChannelMessageAck) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageAck.ProtoReflect.Descriptor instead.
func (*ChannelMessageAck) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{14}
}

func (x *ChannelMessageAck) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelMessageAck) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ChannelMessageAck) GetCode() *wrapperspb.Int32Value {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ChannelMessageAck) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChannelMessageAck) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ChannelMessageAck) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ChannelMessageAck) GetPersistent() *wrapperspb.BoolValue {
	if x != nil {
		return x.Persistent
	}
	return nil
}

func (x *ChannelMessageAck) GetClanLogo() string {
	if x != nil {
		return x.ClanLogo
	}
	return ""
}

func (x *ChannelMessageAck) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

// Send a message to a realtime channel.
type ChannelMessageSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The clan that channel belong to.
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The channel to sent to.
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Message content.
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	// Message mention
	Mentions []*api.MessageMention `protobuf:"bytes,4,rep,name=mentions,proto3" json:"mentions,omitempty"`
	// Message attachment
	Attachments []*api.MessageAttachment `protobuf:"bytes,5,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// Message reference
	References []*api.MessageRef `protobuf:"bytes,6,rep,name=references,proto3" json:"references,omitempty"`
	// Mode
	Mode int32 `protobuf:"varint,7,opt,name=mode,proto3" json:"mode,omitempty"`
	// anonymous message
	AnonymousMessage bool `protobuf:"varint,8,opt,name=anonymous_message,json=anonymousMessage,proto3" json:"anonymous_message,omitempty"`
	// mention everyone
	MentionEveryone bool `protobuf:"varint,9,opt,name=mention_everyone,json=mentionEveryone,proto3" json:"mention_everyone,omitempty"`
	// clan avatar
	Avatar string `protobuf:"bytes,10,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// is public
	IsPublic bool `protobuf:"varint,11,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// code
	Code int32 `protobuf:"varint,12,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ChannelMessageSend) Reset() {
	*x = ChannelMessageSend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageSend) ProtoMessage() {}

func (x *ChannelMessageSend) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageSend.ProtoReflect.Descriptor instead.
func (*ChannelMessageSend) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{15}
}

func (x *ChannelMessageSend) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ChannelMessageSend) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelMessageSend) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChannelMessageSend) GetMentions() []*api.MessageMention {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *ChannelMessageSend) GetAttachments() []*api.MessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *ChannelMessageSend) GetReferences() []*api.MessageRef {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *ChannelMessageSend) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *ChannelMessageSend) GetAnonymousMessage() bool {
	if x != nil {
		return x.AnonymousMessage
	}
	return false
}

func (x *ChannelMessageSend) GetMentionEveryone() bool {
	if x != nil {
		return x.MentionEveryone
	}
	return false
}

func (x *ChannelMessageSend) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *ChannelMessageSend) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ChannelMessageSend) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// Update a message previously sent to a realtime channel.
type ChannelMessageUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The clan that channel belong to.
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The channel the message was sent to.
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The ID assigned to the message to update.
	MessageId string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// New message content.
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	// The mentions
	Mentions []*api.MessageMention `protobuf:"bytes,5,rep,name=mentions,proto3" json:"mentions,omitempty"`
	// Message attachment
	Attachments []*api.MessageAttachment `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// The mode
	Mode int32 `protobuf:"varint,7,opt,name=mode,proto3" json:"mode,omitempty"`
	// is public
	IsPublic bool `protobuf:"varint,8,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// hide editted
	HideEditted bool `protobuf:"varint,9,opt,name=hide_editted,json=hideEditted,proto3" json:"hide_editted,omitempty"`
}

func (x *ChannelMessageUpdate) Reset() {
	*x = ChannelMessageUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageUpdate) ProtoMessage() {}

func (x *ChannelMessageUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageUpdate.ProtoReflect.Descriptor instead.
func (*ChannelMessageUpdate) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{16}
}

func (x *ChannelMessageUpdate) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ChannelMessageUpdate) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelMessageUpdate) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ChannelMessageUpdate) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChannelMessageUpdate) GetMentions() []*api.MessageMention {
	if x != nil {
		return x.Mentions
	}
	return nil
}

func (x *ChannelMessageUpdate) GetAttachments() []*api.MessageAttachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *ChannelMessageUpdate) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *ChannelMessageUpdate) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ChannelMessageUpdate) GetHideEditted() bool {
	if x != nil {
		return x.HideEditted
	}
	return false
}

// Remove a message previously sent to a realtime channel.
type ChannelMessageRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The clan that channel belong to.
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The channel the message was sent to.
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The ID assigned to the message to update.
	MessageId string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The mode
	Mode int32 `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// is public
	IsPublic bool `protobuf:"varint,5,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *ChannelMessageRemove) Reset() {
	*x = ChannelMessageRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelMessageRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageRemove) ProtoMessage() {}

func (x *ChannelMessageRemove) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageRemove.ProtoReflect.Descriptor instead.
func (*ChannelMessageRemove) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{17}
}

func (x *ChannelMessageRemove) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ChannelMessageRemove) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelMessageRemove) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ChannelMessageRemove) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *ChannelMessageRemove) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

// A set of joins and leaves on a particular channel.
type ChannelPresenceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The channel identifier this event is for.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Presences joining the channel as part of this event, if any.
	Joins []*UserPresence `protobuf:"bytes,2,rep,name=joins,proto3" json:"joins,omitempty"`
	// Presences leaving the channel as part of this event, if any.
	Leaves []*UserPresence `protobuf:"bytes,3,rep,name=leaves,proto3" json:"leaves,omitempty"`
	// The clan logo
	ClanLogo string `protobuf:"bytes,4,opt,name=clan_logo,json=clanLogo,proto3" json:"clan_logo,omitempty"`
	// The category name
	CategoryName string `protobuf:"bytes,5,opt,name=category_name,json=categoryName,proto3" json:"category_name,omitempty"`
	// The mode
	Mode int32 `protobuf:"varint,6,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *ChannelPresenceEvent) Reset() {
	*x = ChannelPresenceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelPresenceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPresenceEvent) ProtoMessage() {}

func (x *ChannelPresenceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPresenceEvent.ProtoReflect.Descriptor instead.
func (*ChannelPresenceEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{18}
}

func (x *ChannelPresenceEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelPresenceEvent) GetJoins() []*UserPresence {
	if x != nil {
		return x.Joins
	}
	return nil
}

func (x *ChannelPresenceEvent) GetLeaves() []*UserPresence {
	if x != nil {
		return x.Leaves
	}
	return nil
}

func (x *ChannelPresenceEvent) GetClanLogo() string {
	if x != nil {
		return x.ClanLogo
	}
	return ""
}

func (x *ChannelPresenceEvent) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *ChannelPresenceEvent) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

// A logical error which may occur on the server.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error code which should be one of "Error.Code" enums.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A message in English to help developers debug the response.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Additional error details which may be different for each response.
	Context map[string]string `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{19}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

// A collection of zero or more notifications.
type Notifications struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collection of notifications.
	Notifications []*api.Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (x *Notifications) Reset() {
	*x = Notifications{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notifications) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notifications) ProtoMessage() {}

func (x *Notifications) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notifications.ProtoReflect.Descriptor instead.
func (*Notifications) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{20}
}

func (x *Notifications) GetNotifications() []*api.Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

// Application-level heartbeat and connection check.
type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{21}
}

// Application-level heartbeat and connection check response.
type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{22}
}

// A snapshot of statuses for some set of users.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User statuses.
	Presences []*UserPresence `protobuf:"bytes,1,rep,name=presences,proto3" json:"presences,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{23}
}

func (x *Status) GetPresences() []*UserPresence {
	if x != nil {
		return x.Presences
	}
	return nil
}

// Start receiving status updates for some set of users.
type StatusFollow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User IDs to follow.
	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// Usernames to follow.
	Usernames []string `protobuf:"bytes,2,rep,name=usernames,proto3" json:"usernames,omitempty"`
}

func (x *StatusFollow) Reset() {
	*x = StatusFollow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusFollow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusFollow) ProtoMessage() {}

func (x *StatusFollow) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusFollow.ProtoReflect.Descriptor instead.
func (*StatusFollow) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{24}
}

func (x *StatusFollow) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *StatusFollow) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

// A batch of status updates for a given user.
type StatusPresenceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// New statuses for the user.
	Joins []*UserPresence `protobuf:"bytes,2,rep,name=joins,proto3" json:"joins,omitempty"`
	// Previous statuses for the user.
	Leaves []*UserPresence `protobuf:"bytes,3,rep,name=leaves,proto3" json:"leaves,omitempty"`
}

func (x *StatusPresenceEvent) Reset() {
	*x = StatusPresenceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusPresenceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusPresenceEvent) ProtoMessage() {}

func (x *StatusPresenceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusPresenceEvent.ProtoReflect.Descriptor instead.
func (*StatusPresenceEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{25}
}

func (x *StatusPresenceEvent) GetJoins() []*UserPresence {
	if x != nil {
		return x.Joins
	}
	return nil
}

func (x *StatusPresenceEvent) GetLeaves() []*UserPresence {
	if x != nil {
		return x.Leaves
	}
	return nil
}

// Last pin message by user
type LastPinMessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The unique ID of this channel.
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The unique ID of this message.
	MessageId string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The stream mode
	Mode int32 `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// The UserID
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The timestamp
	TimestampSeconds uint32 `protobuf:"varint,6,opt,name=timestamp_seconds,json=timestampSeconds,proto3" json:"timestamp_seconds,omitempty"`
	// operation
	Operation int32 `protobuf:"varint,7,opt,name=operation,proto3" json:"operation,omitempty"`
	// is public
	IsPublic bool `protobuf:"varint,8,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *LastPinMessageEvent) Reset() {
	*x = LastPinMessageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastPinMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastPinMessageEvent) ProtoMessage() {}

func (x *LastPinMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastPinMessageEvent.ProtoReflect.Descriptor instead.
func (*LastPinMessageEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{26}
}

func (x *LastPinMessageEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *LastPinMessageEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *LastPinMessageEvent) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *LastPinMessageEvent) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *LastPinMessageEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LastPinMessageEvent) GetTimestampSeconds() uint32 {
	if x != nil {
		return x.TimestampSeconds
	}
	return 0
}

func (x *LastPinMessageEvent) GetOperation() int32 {
	if x != nil {
		return x.Operation
	}
	return 0
}

func (x *LastPinMessageEvent) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

// Last seen message by user
type LastSeenMessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The unique ID of this channel.
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The unique ID of this message.
	MessageId string `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The stream mode
	Mode int32 `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// The timestamp
	TimestampSeconds uint32 `protobuf:"varint,5,opt,name=timestamp_seconds,json=timestampSeconds,proto3" json:"timestamp_seconds,omitempty"`
}

func (x *LastSeenMessageEvent) Reset() {
	*x = LastSeenMessageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastSeenMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastSeenMessageEvent) ProtoMessage() {}

func (x *LastSeenMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastSeenMessageEvent.ProtoReflect.Descriptor instead.
func (*LastSeenMessageEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{27}
}

func (x *LastSeenMessageEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *LastSeenMessageEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *LastSeenMessageEvent) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *LastSeenMessageEvent) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *LastSeenMessageEvent) GetTimestampSeconds() uint32 {
	if x != nil {
		return x.TimestampSeconds
	}
	return 0
}

// Message typing event data
type MessageTypingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// * The channel this message belongs to.
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// * Message sender, usually a user ID.
	SenderId string `protobuf:"bytes,3,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// mode
	Mode int32 `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// is public
	IsPublic bool `protobuf:"varint,5,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *MessageTypingEvent) Reset() {
	*x = MessageTypingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTypingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTypingEvent) ProtoMessage() {}

func (x *MessageTypingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTypingEvent.ProtoReflect.Descriptor instead.
func (*MessageTypingEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{28}
}

func (x *MessageTypingEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *MessageTypingEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *MessageTypingEvent) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *MessageTypingEvent) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *MessageTypingEvent) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

// Voice Joined event
type VoiceLeavedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id voice
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The unique identifier of the chat clan.
	ClanId string `protobuf:"bytes,2,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// voice channel name
	VoiceChannelId string `protobuf:"bytes,3,opt,name=voice_channel_id,json=voiceChannelId,proto3" json:"voice_channel_id,omitempty"`
	// voice user_id
	VoiceUserId string `protobuf:"bytes,4,opt,name=voice_user_id,json=voiceUserId,proto3" json:"voice_user_id,omitempty"`
}

func (x *VoiceLeavedEvent) Reset() {
	*x = VoiceLeavedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceLeavedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceLeavedEvent) ProtoMessage() {}

func (x *VoiceLeavedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceLeavedEvent.ProtoReflect.Descriptor instead.
func (*VoiceLeavedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{29}
}

func (x *VoiceLeavedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VoiceLeavedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *VoiceLeavedEvent) GetVoiceChannelId() string {
	if x != nil {
		return x.VoiceChannelId
	}
	return ""
}

func (x *VoiceLeavedEvent) GetVoiceUserId() string {
	if x != nil {
		return x.VoiceUserId
	}
	return ""
}

// Voice Joined event
type VoiceJoinedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * The unique identifier of the chat clan.
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The channel name
	ClanName string `protobuf:"bytes,2,opt,name=clan_name,json=clanName,proto3" json:"clan_name,omitempty"`
	// id voice
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// voice participant
	Participant string `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
	// user id
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// voice channel label
	VoiceChannelLabel string `protobuf:"bytes,6,opt,name=voice_channel_label,json=voiceChannelLabel,proto3" json:"voice_channel_label,omitempty"`
	// voice channel id
	VoiceChannelId string `protobuf:"bytes,7,opt,name=voice_channel_id,json=voiceChannelId,proto3" json:"voice_channel_id,omitempty"`
	// last screenshot
	LastScreenshot string `protobuf:"bytes,8,opt,name=last_screenshot,json=lastScreenshot,proto3" json:"last_screenshot,omitempty"`
}

func (x *VoiceJoinedEvent) Reset() {
	*x = VoiceJoinedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceJoinedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceJoinedEvent) ProtoMessage() {}

func (x *VoiceJoinedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceJoinedEvent.ProtoReflect.Descriptor instead.
func (*VoiceJoinedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{30}
}

func (x *VoiceJoinedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *VoiceJoinedEvent) GetClanName() string {
	if x != nil {
		return x.ClanName
	}
	return ""
}

func (x *VoiceJoinedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VoiceJoinedEvent) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *VoiceJoinedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VoiceJoinedEvent) GetVoiceChannelLabel() string {
	if x != nil {
		return x.VoiceChannelLabel
	}
	return ""
}

func (x *VoiceJoinedEvent) GetVoiceChannelId() string {
	if x != nil {
		return x.VoiceChannelId
	}
	return ""
}

func (x *VoiceJoinedEvent) GetLastScreenshot() string {
	if x != nil {
		return x.LastScreenshot
	}
	return ""
}

// Voice start event
type VoiceStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id voice
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The unique identifier of the chat clan.
	ClanId string `protobuf:"bytes,2,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// voice channel name
	VoiceChannelId string `protobuf:"bytes,3,opt,name=voice_channel_id,json=voiceChannelId,proto3" json:"voice_channel_id,omitempty"`
}

func (x *VoiceStartedEvent) Reset() {
	*x = VoiceStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceStartedEvent) ProtoMessage() {}

func (x *VoiceStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceStartedEvent.ProtoReflect.Descriptor instead.
func (*VoiceStartedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{31}
}

func (x *VoiceStartedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VoiceStartedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *VoiceStartedEvent) GetVoiceChannelId() string {
	if x != nil {
		return x.VoiceChannelId
	}
	return ""
}

// Voice start event
type VoiceEndedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id voice
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The unique identifier of the chat clan.
	ClanId string `protobuf:"bytes,2,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// voice channel name
	VoiceChannelId string `protobuf:"bytes,3,opt,name=voice_channel_id,json=voiceChannelId,proto3" json:"voice_channel_id,omitempty"`
}

func (x *VoiceEndedEvent) Reset() {
	*x = VoiceEndedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceEndedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceEndedEvent) ProtoMessage() {}

func (x *VoiceEndedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceEndedEvent.ProtoReflect.Descriptor instead.
func (*VoiceEndedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{32}
}

func (x *VoiceEndedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VoiceEndedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *VoiceEndedEvent) GetVoiceChannelId() string {
	if x != nil {
		return x.VoiceChannelId
	}
	return ""
}

// Streaming Joined event
type StreamingLeavedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The unique identifier of the chat clan.
	ClanId string `protobuf:"bytes,2,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// streaming channel name
	StreamingChannelId string `protobuf:"bytes,3,opt,name=streaming_channel_id,json=streamingChannelId,proto3" json:"streaming_channel_id,omitempty"`
	// streaming user_id
	StreamingUserId string `protobuf:"bytes,4,opt,name=streaming_user_id,json=streamingUserId,proto3" json:"streaming_user_id,omitempty"`
}

func (x *StreamingLeavedEvent) Reset() {
	*x = StreamingLeavedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingLeavedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingLeavedEvent) ProtoMessage() {}

func (x *StreamingLeavedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingLeavedEvent.ProtoReflect.Descriptor instead.
func (*StreamingLeavedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{33}
}

func (x *StreamingLeavedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamingLeavedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *StreamingLeavedEvent) GetStreamingChannelId() string {
	if x != nil {
		return x.StreamingChannelId
	}
	return ""
}

func (x *StreamingLeavedEvent) GetStreamingUserId() string {
	if x != nil {
		return x.StreamingUserId
	}
	return ""
}

// Streaming Joined event
type StreamingJoinedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * The unique identifier of the chat clan.
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The channel name
	ClanName string `protobuf:"bytes,2,opt,name=clan_name,json=clanName,proto3" json:"clan_name,omitempty"`
	// id streaming
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// streaming participant
	Participant string `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
	// user id
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// streaming channel label
	StreamingChannelLabel string `protobuf:"bytes,6,opt,name=streaming_channel_label,json=streamingChannelLabel,proto3" json:"streaming_channel_label,omitempty"`
	// streaming channel id
	StreamingChannelId string `protobuf:"bytes,7,opt,name=streaming_channel_id,json=streamingChannelId,proto3" json:"streaming_channel_id,omitempty"`
}

func (x *StreamingJoinedEvent) Reset() {
	*x = StreamingJoinedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingJoinedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingJoinedEvent) ProtoMessage() {}

func (x *StreamingJoinedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingJoinedEvent.ProtoReflect.Descriptor instead.
func (*StreamingJoinedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{34}
}

func (x *StreamingJoinedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *StreamingJoinedEvent) GetClanName() string {
	if x != nil {
		return x.ClanName
	}
	return ""
}

func (x *StreamingJoinedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamingJoinedEvent) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *StreamingJoinedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StreamingJoinedEvent) GetStreamingChannelLabel() string {
	if x != nil {
		return x.StreamingChannelLabel
	}
	return ""
}

func (x *StreamingJoinedEvent) GetStreamingChannelId() string {
	if x != nil {
		return x.StreamingChannelId
	}
	return ""
}

// Streaming start event
type StreamingStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// channel id
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// stream url
	StreamingUrl string `protobuf:"bytes,3,opt,name=streaming_url,json=streamingUrl,proto3" json:"streaming_url,omitempty"`
	// status
	IsStreaming bool `protobuf:"varint,4,opt,name=is_streaming,json=isStreaming,proto3" json:"is_streaming,omitempty"`
}

func (x *StreamingStartedEvent) Reset() {
	*x = StreamingStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingStartedEvent) ProtoMessage() {}

func (x *StreamingStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingStartedEvent.ProtoReflect.Descriptor instead.
func (*StreamingStartedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{35}
}

func (x *StreamingStartedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *StreamingStartedEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *StreamingStartedEvent) GetStreamingUrl() string {
	if x != nil {
		return x.StreamingUrl
	}
	return ""
}

func (x *StreamingStartedEvent) GetIsStreaming() bool {
	if x != nil {
		return x.IsStreaming
	}
	return false
}

// Streaming start event
type StreamingEndedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// channel id
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *StreamingEndedEvent) Reset() {
	*x = StreamingEndedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingEndedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingEndedEvent) ProtoMessage() {}

func (x *StreamingEndedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingEndedEvent.ProtoReflect.Descriptor instead.
func (*StreamingEndedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{36}
}

func (x *StreamingEndedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *StreamingEndedEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelCreatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// category
	CategoryId string `protobuf:"bytes,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	// creator
	CreatorId string `protobuf:"bytes,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	// parrent id
	ParrentId string `protobuf:"bytes,4,opt,name=parrent_id,json=parrentId,proto3" json:"parrent_id,omitempty"`
	// channel id
	ChannelId string `protobuf:"bytes,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// channel label
	ChannelLabel string `protobuf:"bytes,6,opt,name=channel_label,json=channelLabel,proto3" json:"channel_label,omitempty"`
	// channel private
	ChannelPrivate int32 `protobuf:"varint,7,opt,name=channel_private,json=channelPrivate,proto3" json:"channel_private,omitempty"`
	// channel type
	ChannelType *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	// status
	Status int32 `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	// app url
	AppUrl string `protobuf:"bytes,10,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
}

func (x *ChannelCreatedEvent) Reset() {
	*x = ChannelCreatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelCreatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCreatedEvent) ProtoMessage() {}

func (x *ChannelCreatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCreatedEvent.ProtoReflect.Descriptor instead.
func (*ChannelCreatedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{37}
}

func (x *ChannelCreatedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ChannelCreatedEvent) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *ChannelCreatedEvent) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *ChannelCreatedEvent) GetParrentId() string {
	if x != nil {
		return x.ParrentId
	}
	return ""
}

func (x *ChannelCreatedEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelCreatedEvent) GetChannelLabel() string {
	if x != nil {
		return x.ChannelLabel
	}
	return ""
}

func (x *ChannelCreatedEvent) GetChannelPrivate() int32 {
	if x != nil {
		return x.ChannelPrivate
	}
	return 0
}

func (x *ChannelCreatedEvent) GetChannelType() *wrapperspb.Int32Value {
	if x != nil {
		return x.ChannelType
	}
	return nil
}

func (x *ChannelCreatedEvent) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChannelCreatedEvent) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

type RoleEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role   *api.Role `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Status int32     `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	UserId string    `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *RoleEvent) Reset() {
	*x = RoleEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleEvent) ProtoMessage() {}

func (x *RoleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleEvent.ProtoReflect.Descriptor instead.
func (*RoleEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{38}
}

func (x *RoleEvent) GetRole() *api.Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *RoleEvent) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RoleEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ChannelDeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// category
	CategoryId string `protobuf:"bytes,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	// parrent id
	ParrentId string `protobuf:"bytes,3,opt,name=parrent_id,json=parrentId,proto3" json:"parrent_id,omitempty"`
	// channel id
	ChannelId string `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// deletor
	Deletor string `protobuf:"bytes,5,opt,name=deletor,proto3" json:"deletor,omitempty"`
}

func (x *ChannelDeletedEvent) Reset() {
	*x = ChannelDeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDeletedEvent) ProtoMessage() {}

func (x *ChannelDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDeletedEvent.ProtoReflect.Descriptor instead.
func (*ChannelDeletedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{39}
}

func (x *ChannelDeletedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ChannelDeletedEvent) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *ChannelDeletedEvent) GetParrentId() string {
	if x != nil {
		return x.ParrentId
	}
	return ""
}

func (x *ChannelDeletedEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelDeletedEvent) GetDeletor() string {
	if x != nil {
		return x.Deletor
	}
	return ""
}

type ClanDeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// deletor
	Deletor string `protobuf:"bytes,2,opt,name=deletor,proto3" json:"deletor,omitempty"`
}

func (x *ClanDeletedEvent) Reset() {
	*x = ClanDeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanDeletedEvent) ProtoMessage() {}

func (x *ClanDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanDeletedEvent.ProtoReflect.Descriptor instead.
func (*ClanDeletedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{40}
}

func (x *ClanDeletedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ClanDeletedEvent) GetDeletor() string {
	if x != nil {
		return x.Deletor
	}
	return ""
}

type StickerCreateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// source
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// shortname
	Shortname string `protobuf:"bytes,3,opt,name=shortname,proto3" json:"shortname,omitempty"`
	// category
	Category string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// creator_id
	CreatorId string `protobuf:"bytes,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	// sticker id
	StickerId string `protobuf:"bytes,6,opt,name=sticker_id,json=stickerId,proto3" json:"sticker_id,omitempty"`
	// logo
	Logo string `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	// clan name
	ClanName string `protobuf:"bytes,8,opt,name=clan_name,json=clanName,proto3" json:"clan_name,omitempty"`
}

func (x *StickerCreateEvent) Reset() {
	*x = StickerCreateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerCreateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerCreateEvent) ProtoMessage() {}

func (x *StickerCreateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerCreateEvent.ProtoReflect.Descriptor instead.
func (*StickerCreateEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{41}
}

func (x *StickerCreateEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *StickerCreateEvent) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *StickerCreateEvent) GetShortname() string {
	if x != nil {
		return x.Shortname
	}
	return ""
}

func (x *StickerCreateEvent) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *StickerCreateEvent) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *StickerCreateEvent) GetStickerId() string {
	if x != nil {
		return x.StickerId
	}
	return ""
}

func (x *StickerCreateEvent) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *StickerCreateEvent) GetClanName() string {
	if x != nil {
		return x.ClanName
	}
	return ""
}

type StickerUpdateEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// shortname
	Shortname string `protobuf:"bytes,1,opt,name=shortname,proto3" json:"shortname,omitempty"`
	// sticker id
	StickerId string `protobuf:"bytes,2,opt,name=sticker_id,json=stickerId,proto3" json:"sticker_id,omitempty"`
	// user id update
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *StickerUpdateEvent) Reset() {
	*x = StickerUpdateEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerUpdateEvent) ProtoMessage() {}

func (x *StickerUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerUpdateEvent.ProtoReflect.Descriptor instead.
func (*StickerUpdateEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{42}
}

func (x *StickerUpdateEvent) GetShortname() string {
	if x != nil {
		return x.Shortname
	}
	return ""
}

func (x *StickerUpdateEvent) GetStickerId() string {
	if x != nil {
		return x.StickerId
	}
	return ""
}

func (x *StickerUpdateEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type StickerDeleteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sticker id
	StickerId string `protobuf:"bytes,2,opt,name=sticker_id,json=stickerId,proto3" json:"sticker_id,omitempty"`
	// user id delete
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *StickerDeleteEvent) Reset() {
	*x = StickerDeleteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StickerDeleteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickerDeleteEvent) ProtoMessage() {}

func (x *StickerDeleteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickerDeleteEvent.ProtoReflect.Descriptor instead.
func (*StickerDeleteEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{43}
}

func (x *StickerDeleteEvent) GetStickerId() string {
	if x != nil {
		return x.StickerId
	}
	return ""
}

func (x *StickerDeleteEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ChannelUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// category
	CategoryId string `protobuf:"bytes,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	// creator
	CreatorId string `protobuf:"bytes,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	// parrent id
	ParrentId string `protobuf:"bytes,4,opt,name=parrent_id,json=parrentId,proto3" json:"parrent_id,omitempty"`
	// channel id
	ChannelId string `protobuf:"bytes,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// channel label
	ChannelLabel string `protobuf:"bytes,6,opt,name=channel_label,json=channelLabel,proto3" json:"channel_label,omitempty"`
	// channel type
	ChannelType *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	// status
	Status int32 `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	// meeting code
	MeetingCode string `protobuf:"bytes,9,opt,name=meeting_code,json=meetingCode,proto3" json:"meeting_code,omitempty"`
	// error
	IsError bool `protobuf:"varint,10,opt,name=is_error,json=isError,proto3" json:"is_error,omitempty"`
	// channel private
	ChannelPrivate bool `protobuf:"varint,11,opt,name=channel_private,json=channelPrivate,proto3" json:"channel_private,omitempty"`
	// app url
	AppUrl string `protobuf:"bytes,12,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// e2ee
	E2Ee int32 `protobuf:"varint,13,opt,name=e2ee,proto3" json:"e2ee,omitempty"`
	// topic
	Topic string `protobuf:"bytes,14,opt,name=topic,proto3" json:"topic,omitempty"`
	AgeRestricted int32 `protobuf:"varint,15,opt,name=age_restricted,json=ageRestricted,proto3" json:"age_restricted,omitempty"`
}

func (x *ChannelUpdatedEvent) Reset() {
	*x = ChannelUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdatedEvent) ProtoMessage() {}

func (x *ChannelUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdatedEvent.ProtoReflect.Descriptor instead.
func (*ChannelUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{44}
}

func (x *ChannelUpdatedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ChannelUpdatedEvent) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *ChannelUpdatedEvent) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *ChannelUpdatedEvent) GetParrentId() string {
	if x != nil {
		return x.ParrentId
	}
	return ""
}

func (x *ChannelUpdatedEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelUpdatedEvent) GetChannelLabel() string {
	if x != nil {
		return x.ChannelLabel
	}
	return ""
}

func (x *ChannelUpdatedEvent) GetChannelType() *wrapperspb.Int32Value {
	if x != nil {
		return x.ChannelType
	}
	return nil
}

func (x *ChannelUpdatedEvent) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ChannelUpdatedEvent) GetMeetingCode() string {
	if x != nil {
		return x.MeetingCode
	}
	return ""
}

func (x *ChannelUpdatedEvent) GetIsError() bool {
	if x != nil {
		return x.IsError
	}
	return false
}

func (x *ChannelUpdatedEvent) GetChannelPrivate() bool {
	if x != nil {
		return x.ChannelPrivate
	}
	return false
}

func (x *ChannelUpdatedEvent) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *ChannelUpdatedEvent) GetE2Ee() int32 {
	if x != nil {
		return x.E2Ee
	}
	return 0
}

func (x *ChannelUpdatedEvent) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ChannelUpdatedEvent) GetAgeRestricted() int32 {
	if x != nil {
		return x.AgeRestricted
	}
	return 0
}

// Stop receiving status updates for some set of users.
type StatusUnfollow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Users to unfollow.
	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *StatusUnfollow) Reset() {
	*x = StatusUnfollow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusUnfollow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUnfollow) ProtoMessage() {}

func (x *StatusUnfollow) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUnfollow.ProtoReflect.Descriptor instead.
func (*StatusUnfollow) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{45}
}

func (x *StatusUnfollow) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// Set the user's own status.
type StatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status string to set, if not present the user will appear offline.
	Status *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{46}
}

func (x *StatusUpdate) GetStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.Status
	}
	return nil
}

// Represents identifying information for a stream.
type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mode identifies the type of stream.
	Mode int32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// Subject is the primary identifier, if any.
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Subcontext is a secondary identifier, if any.
	ClanId string `protobuf:"bytes,3,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The label is an arbitrary identifying string, if the stream has one.
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{47}
}

func (x *Stream) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Stream) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Stream) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *Stream) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// A data message delivered over a stream.
type StreamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream this data message relates to.
	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// The sender, if any.
	Sender *UserPresence `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// Arbitrary contents of the data message.
	Data string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// True if this data was delivered reliably, false otherwise.
	Reliable bool `protobuf:"varint,4,opt,name=reliable,proto3" json:"reliable,omitempty"`
}

func (x *StreamData) Reset() {
	*x = StreamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamData) ProtoMessage() {}

func (x *StreamData) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamData.ProtoReflect.Descriptor instead.
func (*StreamData) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{48}
}

func (x *StreamData) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *StreamData) GetSender() *UserPresence {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *StreamData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *StreamData) GetReliable() bool {
	if x != nil {
		return x.Reliable
	}
	return false
}

// A set of joins and leaves on a particular stream.
type StreamPresenceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The stream this event relates to.
	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	// Presences joining the stream as part of this event, if any.
	Joins []*UserPresence `protobuf:"bytes,2,rep,name=joins,proto3" json:"joins,omitempty"`
	// Presences leaving the stream as part of this event, if any.
	Leaves []*UserPresence `protobuf:"bytes,3,rep,name=leaves,proto3" json:"leaves,omitempty"`
}

func (x *StreamPresenceEvent) Reset() {
	*x = StreamPresenceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPresenceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPresenceEvent) ProtoMessage() {}

func (x *StreamPresenceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPresenceEvent.ProtoReflect.Descriptor instead.
func (*StreamPresenceEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{49}
}

func (x *StreamPresenceEvent) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *StreamPresenceEvent) GetJoins() []*UserPresence {
	if x != nil {
		return x.Joins
	}
	return nil
}

func (x *StreamPresenceEvent) GetLeaves() []*UserPresence {
	if x != nil {
		return x.Leaves
	}
	return nil
}

// A user session associated to a stream, usually through a list operation or a join/leave event.
type UserPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user this presence belongs to.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// A unique session ID identifying the particular connection, because the user may have many.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The username for display purposes.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Whether this presence generates persistent data/messages, if applicable for the stream type.
	Persistence bool `protobuf:"varint,4,opt,name=persistence,proto3" json:"persistence,omitempty"`
	// A user-set status message for this stream, if applicable.
	Status *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	IsMobile bool `protobuf:"varint,6,opt,name=is_mobile,json=isMobile,proto3" json:"is_mobile,omitempty"`
	// Metadata
	Metadata string `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *UserPresence) Reset() {
	*x = UserPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPresence) ProtoMessage() {}

func (x *UserPresence) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPresence.ProtoReflect.Descriptor instead.
func (*UserPresence) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{50}
}

func (x *UserPresence) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserPresence) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UserPresence) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserPresence) GetPersistence() bool {
	if x != nil {
		return x.Persistence
	}
	return false
}

func (x *UserPresence) GetStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UserPresence) GetIsMobile() bool {
	if x != nil {
		return x.IsMobile
	}
	return false
}

func (x *UserPresence) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

// A custom status presence
type CustomStatusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// the user id
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// username
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// the status
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CustomStatusEvent) Reset() {
	*x = CustomStatusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomStatusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomStatusEvent) ProtoMessage() {}

func (x *CustomStatusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomStatusEvent.ProtoReflect.Descriptor instead.
func (*CustomStatusEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{51}
}

func (x *CustomStatusEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *CustomStatusEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CustomStatusEvent) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CustomStatusEvent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// A event when user is added to channel
type UserChannelAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the channel id
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// the user
	Users []*UserProfileRedis `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	// the custom status
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// the clan id
	ClanId string `protobuf:"bytes,4,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// the channel type
	ChannelType int32 `protobuf:"varint,5,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	// is public
	IsPublic bool `protobuf:"varint,6,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// the parent_id
	ParentId string `protobuf:"bytes,7,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *UserChannelAdded) Reset() {
	*x = UserChannelAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChannelAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelAdded) ProtoMessage() {}

func (x *UserChannelAdded) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelAdded.ProtoReflect.Descriptor instead.
func (*UserChannelAdded) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{52}
}

func (x *UserChannelAdded) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *UserChannelAdded) GetUsers() []*UserProfileRedis {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UserChannelAdded) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserChannelAdded) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *UserChannelAdded) GetChannelType() int32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *UserChannelAdded) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *UserChannelAdded) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

type UserChannelRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the channel id
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// the user
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// the channel type
	ChannelType int32 `protobuf:"varint,3,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
}

func (x *UserChannelRemoved) Reset() {
	*x = UserChannelRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChannelRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelRemoved) ProtoMessage() {}

func (x *UserChannelRemoved) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelRemoved.ProtoReflect.Descriptor instead.
func (*UserChannelRemoved) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{53}
}

func (x *UserChannelRemoved) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *UserChannelRemoved) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *UserChannelRemoved) GetChannelType() int32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

type UserClanRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// the user
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (x *UserClanRemoved) Reset() {
	*x = UserClanRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserClanRemoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserClanRemoved) ProtoMessage() {}

func (x *UserClanRemoved) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserClanRemoved.ProtoReflect.Descriptor instead.
func (*UserClanRemoved) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{54}
}

func (x *UserClanRemoved) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *UserClanRemoved) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

// clan updated event
type ClanUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the clan id
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// the clan name
	ClanName string `protobuf:"bytes,2,opt,name=clan_name,json=clanName,proto3" json:"clan_name,omitempty"`
	// the clan logo
	ClanLogo string `protobuf:"bytes,3,opt,name=clan_logo,json=clanLogo,proto3" json:"clan_logo,omitempty"`
}

func (x *ClanUpdatedEvent) Reset() {
	*x = ClanUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanUpdatedEvent) ProtoMessage() {}

func (x *ClanUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanUpdatedEvent.ProtoReflect.Descriptor instead.
func (*ClanUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{55}
}

func (x *ClanUpdatedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *ClanUpdatedEvent) GetClanName() string {
	if x != nil {
		return x.ClanName
	}
	return ""
}

func (x *ClanUpdatedEvent) GetClanLogo() string {
	if x != nil {
		return x.ClanLogo
	}
	return ""
}

// clan profile updated event
type ClanProfileUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the clan_nick
	ClanNick string `protobuf:"bytes,2,opt,name=clan_nick,json=clanNick,proto3" json:"clan_nick,omitempty"`
	// the avatar
	ClanAvatar string `protobuf:"bytes,3,opt,name=clan_avatar,json=clanAvatar,proto3" json:"clan_avatar,omitempty"`
	// the clan_id
	ClanId string `protobuf:"bytes,4,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
}

func (x *ClanProfileUpdatedEvent) Reset() {
	*x = ClanProfileUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClanProfileUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClanProfileUpdatedEvent) ProtoMessage() {}

func (x *ClanProfileUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClanProfileUpdatedEvent.ProtoReflect.Descriptor instead.
func (*ClanProfileUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{56}
}

func (x *ClanProfileUpdatedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClanProfileUpdatedEvent) GetClanNick() string {
	if x != nil {
		return x.ClanNick
	}
	return ""
}

func (x *ClanProfileUpdatedEvent) GetClanAvatar() string {
	if x != nil {
		return x.ClanAvatar
	}
	return ""
}

func (x *ClanProfileUpdatedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

// user profile updated event
type UserProfileUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the display_name
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// the avatar
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// the about_me
	AboutMe string `protobuf:"bytes,4,opt,name=about_me,json=aboutMe,proto3" json:"about_me,omitempty"`
	// the channel_id
	ChannelId string `protobuf:"bytes,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// the clan_id
	ClanId string `protobuf:"bytes,6,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
}

func (x *UserProfileUpdatedEvent) Reset() {
	*x = UserProfileUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileUpdatedEvent) ProtoMessage() {}

func (x *UserProfileUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileUpdatedEvent.ProtoReflect.Descriptor instead.
func (*UserProfileUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{57}
}

func (x *UserProfileUpdatedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserProfileUpdatedEvent) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserProfileUpdatedEvent) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserProfileUpdatedEvent) GetAboutMe() string {
	if x != nil {
		return x.AboutMe
	}
	return ""
}

func (x *UserProfileUpdatedEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *UserProfileUpdatedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

// A event when user is added to channel
type UserProfileRedis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User IDs to follow.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Username to follow.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Avatar to follow.
	Avatar string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	// Display name
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// about me
	AboutMe string `protobuf:"bytes,5,opt,name=about_me,json=aboutMe,proto3" json:"about_me,omitempty"`
	// custom status
	CustomStatus string `protobuf:"bytes,6,opt,name=custom_status,json=customStatus,proto3" json:"custom_status,omitempty"`
	// create time
	CreateTimeSecond uint32 `protobuf:"varint,7,opt,name=create_time_second,json=createTimeSecond,proto3" json:"create_time_second,omitempty"`
	// FCM token
	FcmTokens []*FCMTokens `protobuf:"bytes,8,rep,name=fcm_tokens,json=fcmTokens,proto3" json:"fcm_tokens,omitempty"`
	// isOnline
	Online bool `protobuf:"varint,9,opt,name=online,proto3" json:"online,omitempty"`
	// Metadata
	Metadata string `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// is disabled
	IsDisabled bool `protobuf:"varint,11,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
}

func (x *UserProfileRedis) Reset() {
	*x = UserProfileRedis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfileRedis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfileRedis) ProtoMessage() {}

func (x *UserProfileRedis) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfileRedis.ProtoReflect.Descriptor instead.
func (*UserProfileRedis) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{58}
}

func (x *UserProfileRedis) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserProfileRedis) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserProfileRedis) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserProfileRedis) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *UserProfileRedis) GetAboutMe() string {
	if x != nil {
		return x.AboutMe
	}
	return ""
}

func (x *UserProfileRedis) GetCustomStatus() string {
	if x != nil {
		return x.CustomStatus
	}
	return ""
}

func (x *UserProfileRedis) GetCreateTimeSecond() uint32 {
	if x != nil {
		return x.CreateTimeSecond
	}
	return 0
}

func (x *UserProfileRedis) GetFcmTokens() []*FCMTokens {
	if x != nil {
		return x.FcmTokens
	}
	return nil
}

func (x *UserProfileRedis) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *UserProfileRedis) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *UserProfileRedis) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

type FCMTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// deviceID to follow.
	DeviceId string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// tokenID to follow.
	TokenId string `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// platform to follow.
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *FCMTokens) Reset() {
	*x = FCMTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FCMTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FCMTokens) ProtoMessage() {}

func (x *FCMTokens) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FCMTokens.ProtoReflect.Descriptor instead.
func (*FCMTokens) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{59}
}

func (x *FCMTokens) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *FCMTokens) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *FCMTokens) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type CheckNameExistedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// condition_id
	ConditionId string `protobuf:"bytes,2,opt,name=condition_id,json=conditionId,proto3" json:"condition_id,omitempty"`
	// is exist
	Exist bool `protobuf:"varint,3,opt,name=exist,proto3" json:"exist,omitempty"`
	// type check
	Type int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CheckNameExistedEvent) Reset() {
	*x = CheckNameExistedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNameExistedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNameExistedEvent) ProtoMessage() {}

func (x *CheckNameExistedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNameExistedEvent.ProtoReflect.Descriptor instead.
func (*CheckNameExistedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{60}
}

func (x *CheckNameExistedEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CheckNameExistedEvent) GetConditionId() string {
	if x != nil {
		return x.ConditionId
	}
	return ""
}

func (x *CheckNameExistedEvent) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *CheckNameExistedEvent) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// Notification setting record
type NotificationChannelCategorySetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Notification id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelCategoryLabel string `protobuf:"bytes,2,opt,name=channel_category_label,json=channelCategoryLabel,proto3" json:"channel_category_label,omitempty"`
	// Notification title
	NotificationSettingType int32 `protobuf:"varint,3,opt,name=notification_setting_type,json=notificationSettingType,proto3" json:"notification_setting_type,omitempty"`
	ChannelCategoryTitle string `protobuf:"bytes,4,opt,name=channel_category_title,json=channelCategoryTitle,proto3" json:"channel_category_title,omitempty"`
	Action int32 `protobuf:"varint,5,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *NotificationChannelCategorySetting) Reset() {
	*x = NotificationChannelCategorySetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationChannelCategorySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationChannelCategorySetting) ProtoMessage() {}

func (x *NotificationChannelCategorySetting) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationChannelCategorySetting.ProtoReflect.Descriptor instead.
func (*NotificationChannelCategorySetting) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{61}
}

func (x *NotificationChannelCategorySetting) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NotificationChannelCategorySetting) GetChannelCategoryLabel() string {
	if x != nil {
		return x.ChannelCategoryLabel
	}
	return ""
}

func (x *NotificationChannelCategorySetting) GetNotificationSettingType() int32 {
	if x != nil {
		return x.NotificationSettingType
	}
	return 0
}

func (x *NotificationChannelCategorySetting) GetChannelCategoryTitle() string {
	if x != nil {
		return x.ChannelCategoryTitle
	}
	return ""
}

func (x *NotificationChannelCategorySetting) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type EventEmoji struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClanId    string `protobuf:"bytes,2,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	ShortName string `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Source    string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	Category  string `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty"`
	Action    int32  `protobuf:"varint,6,opt,name=action,proto3" json:"action,omitempty"`
	UserId    string `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Logo      string `protobuf:"bytes,8,opt,name=logo,proto3" json:"logo,omitempty"`
	ClanName  string `protobuf:"bytes,9,opt,name=clan_name,json=clanName,proto3" json:"clan_name,omitempty"`
}

func (x *EventEmoji) Reset() {
	*x = EventEmoji{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventEmoji) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventEmoji) ProtoMessage() {}

func (x *EventEmoji) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventEmoji.ProtoReflect.Descriptor instead.
func (*EventEmoji) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{62}
}

func (x *EventEmoji) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventEmoji) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *EventEmoji) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *EventEmoji) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EventEmoji) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *EventEmoji) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *EventEmoji) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventEmoji) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *EventEmoji) GetClanName() string {
	if x != nil {
		return x.ClanName
	}
	return ""
}

type PermissionSetEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Caller            string                  `protobuf:"bytes,1,opt,name=caller,proto3" json:"caller,omitempty"`
	RoleId            string                  `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	UserId            string                  `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId         string                  `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PermissionUpdates []*api.PermissionUpdate `protobuf:"bytes,5,rep,name=permission_updates,json=permissionUpdates,proto3" json:"permission_updates,omitempty"`
}

func (x *PermissionSetEvent) Reset() {
	*x = PermissionSetEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionSetEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionSetEvent) ProtoMessage() {}

func (x *PermissionSetEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionSetEvent.ProtoReflect.Descriptor instead.
func (*PermissionSetEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{63}
}

func (x *PermissionSetEvent) GetCaller() string {
	if x != nil {
		return x.Caller
	}
	return ""
}

func (x *PermissionSetEvent) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *PermissionSetEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PermissionSetEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *PermissionSetEvent) GetPermissionUpdates() []*api.PermissionUpdate {
	if x != nil {
		return x.PermissionUpdates
	}
	return nil
}

type PermissionChangedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *PermissionChangedEvent) Reset() {
	*x = PermissionChangedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionChangedEvent) ProtoMessage() {}

func (x *PermissionChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionChangedEvent.ProtoReflect.Descriptor instead.
func (*PermissionChangedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{64}
}

func (x *PermissionChangedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PermissionChangedEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type MessageButtonClicked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ButtonId  string `protobuf:"bytes,3,opt,name=button_id,json=buttonId,proto3" json:"button_id,omitempty"`
	SenderId  string `protobuf:"bytes,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	UserId    string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExtraData string `protobuf:"bytes,6,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
}

func (x *MessageButtonClicked) Reset() {
	*x = MessageButtonClicked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageButtonClicked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageButtonClicked) ProtoMessage() {}

func (x *MessageButtonClicked) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageButtonClicked.ProtoReflect.Descriptor instead.
func (*MessageButtonClicked) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{65}
}

func (x *MessageButtonClicked) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageButtonClicked) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *MessageButtonClicked) GetButtonId() string {
	if x != nil {
		return x.ButtonId
	}
	return ""
}

func (x *MessageButtonClicked) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *MessageButtonClicked) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *MessageButtonClicked) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

type UnmuteEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel id
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// category id
	CategoryId string `protobuf:"bytes,2,opt,name=category_id,json=categoryId,proto3" json:"category_id,omitempty"`
	// clan id
	ClanId string `protobuf:"bytes,3,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
}

func (x *UnmuteEvent) Reset() {
	*x = UnmuteEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmuteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmuteEvent) ProtoMessage() {}

func (x *UnmuteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmuteEvent.ProtoReflect.Descriptor instead.
func (*UnmuteEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{66}
}

func (x *UnmuteEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *UnmuteEvent) GetCategoryId() string {
	if x != nil {
		return x.CategoryId
	}
	return ""
}

func (x *UnmuteEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

type JoinPTTChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel id
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// type offer, answer or candidate
	DataType int32 `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// offer
	JsonData string `protobuf:"bytes,3,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"`
	// receiver id
	ReceiverId string `protobuf:"bytes,4,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
	// clan id
	ClanId string `protobuf:"bytes,5,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
}

func (x *JoinPTTChannel) Reset() {
	*x = JoinPTTChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinPTTChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinPTTChannel) ProtoMessage() {}

func (x *JoinPTTChannel) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinPTTChannel.ProtoReflect.Descriptor instead.
func (*JoinPTTChannel) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{67}
}

func (x *JoinPTTChannel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *JoinPTTChannel) GetDataType() int32 {
	if x != nil {
		return x.DataType
	}
	return 0
}

func (x *JoinPTTChannel) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

func (x *JoinPTTChannel) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

func (x *JoinPTTChannel) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

type TalkPTTChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// channel id
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// is talk
	IsTalk bool `protobuf:"varint,3,opt,name=isTalk,proto3" json:"isTalk,omitempty"`
}

func (x *TalkPTTChannel) Reset() {
	*x = TalkPTTChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TalkPTTChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TalkPTTChannel) ProtoMessage() {}

func (x *TalkPTTChannel) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TalkPTTChannel.ProtoReflect.Descriptor instead.
func (*TalkPTTChannel) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{68}
}

func (x *TalkPTTChannel) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TalkPTTChannel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *TalkPTTChannel) GetIsTalk() bool {
	if x != nil {
		return x.IsTalk
	}
	return false
}

type ListActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acts []*api.UserActivity `protobuf:"bytes,1,rep,name=acts,proto3" json:"acts,omitempty"`
}

func (x *ListActivity) Reset() {
	*x = ListActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivity) ProtoMessage() {}

func (x *ListActivity) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivity.ProtoReflect.Descriptor instead.
func (*ListActivity) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{69}
}

func (x *ListActivity) GetActs() []*api.UserActivity {
	if x != nil {
		return x.Acts
	}
	return nil
}

type DropdownBoxSelected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId   string   `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ChannelId   string   `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	SelectboxId string   `protobuf:"bytes,3,opt,name=selectbox_id,json=selectboxId,proto3" json:"selectbox_id,omitempty"`
	SenderId    string   `protobuf:"bytes,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	UserId      string   `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Values      []string `protobuf:"bytes,6,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DropdownBoxSelected) Reset() {
	*x = DropdownBoxSelected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropdownBoxSelected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropdownBoxSelected) ProtoMessage() {}

func (x *DropdownBoxSelected) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropdownBoxSelected.ProtoReflect.Descriptor instead.
func (*DropdownBoxSelected) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{70}
}

func (x *DropdownBoxSelected) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *DropdownBoxSelected) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *DropdownBoxSelected) GetSelectboxId() string {
	if x != nil {
		return x.SelectboxId
	}
	return ""
}

func (x *DropdownBoxSelected) GetSenderId() string {
	if x != nil {
		return x.SenderId
	}
	return ""
}

func (x *DropdownBoxSelected) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DropdownBoxSelected) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// PTT Joined event
type PTTLeavedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The unique identifier of the chat clan.
	ClanId string `protobuf:"bytes,2,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// channel id
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// user_id
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *PTTLeavedEvent) Reset() {
	*x = PTTLeavedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTTLeavedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTTLeavedEvent) ProtoMessage() {}

func (x *PTTLeavedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTTLeavedEvent.ProtoReflect.Descriptor instead.
func (*PTTLeavedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{71}
}

func (x *PTTLeavedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PTTLeavedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *PTTLeavedEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *PTTLeavedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// PTT Joined event
type PTTJoinedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * The unique identifier of the chat clan.
	ClanId string `protobuf:"bytes,1,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	// The clan_name
	ClanName string `protobuf:"bytes,2,opt,name=clan_name,json=clanName,proto3" json:"clan_name,omitempty"`
	// id
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// ptt participant
	Participant string `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
	// user id
	UserId string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// channel label
	ChannelLabel string `protobuf:"bytes,6,opt,name=channel_label,json=channelLabel,proto3" json:"channel_label,omitempty"`
	// channel id
	ChannelId string `protobuf:"bytes,7,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *PTTJoinedEvent) Reset() {
	*x = PTTJoinedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PTTJoinedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PTTJoinedEvent) ProtoMessage() {}

func (x *PTTJoinedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PTTJoinedEvent.ProtoReflect.Descriptor instead.
func (*PTTJoinedEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{72}
}

func (x *PTTJoinedEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *PTTJoinedEvent) GetClanName() string {
	if x != nil {
		return x.ClanName
	}
	return ""
}

func (x *PTTJoinedEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PTTJoinedEvent) GetParticipant() string {
	if x != nil {
		return x.Participant
	}
	return ""
}

func (x *PTTJoinedEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PTTJoinedEvent) GetChannelLabel() string {
	if x != nil {
		return x.ChannelLabel
	}
	return ""
}

func (x *PTTJoinedEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type SdTopicEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClanId    string `protobuf:"bytes,2,opt,name=clan_id,json=clanId,proto3" json:"clan_id,omitempty"`
	ChannelId string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MessageId string `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *SdTopicEvent) Reset() {
	*x = SdTopicEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rtapi_realtime_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdTopicEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdTopicEvent) ProtoMessage() {}

func (x *SdTopicEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rtapi_realtime_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdTopicEvent.ProtoReflect.Descriptor instead.
func (*SdTopicEvent) Descriptor() ([]byte, []int) {
	return file_rtapi_realtime_proto_rawDescGZIP(), []int{73}
}

func (x *SdTopicEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SdTopicEvent) GetClanId() string {
	if x != nil {
		return x.ClanId
	}
	return ""
}

func (x *SdTopicEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SdTopicEvent) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

var File_rtapi_realtime_proto protoreflect.FileDescriptor

var file_rtapi_realtime_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x74, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x2c, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x6e, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43,
	0x6c, 0x61, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4a,
	0x6f, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x53, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x56, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x5c, 0x0a,
	0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x16, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x5c, 0x0a, 0x16, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0d,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a,
	0x03, 0x72, 0x70, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x70, 0x63, 0x48, 0x00, 0x52, 0x03, 0x72, 0x70,
	0x63, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x66, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x59, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x6e,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x43,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x59, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x50, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x6f, 0x6e,
	0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x6f, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x69,
	0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a,
	0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x16,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x50, 0x0a, 0x12, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x59,
	0x0a, 0x15, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x50,
	0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x15, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x64,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x17, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x17, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x14,
	0x75, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x43, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x1a, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x60,
	0x0a, 0x18, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x66, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x17, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f,
	0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x6e, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x64, 0x64, 0x43, 0x6c,
	0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x12, 0x63,
	0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x11, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x65,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x63,
	0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a,
	0x11, 0x67, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x66, 0x66,
	0x65, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x56, 0x0a, 0x14, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x48, 0x00, 0x52, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x5c, 0x0a, 0x16, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x69,
	0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x17, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x15, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x18, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x48, 0x00, 0x52, 0x14, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x75, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x6e, 0x6d, 0x75, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x6d, 0x75, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x77, 0x64, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x46, 0x77, 0x64, 0x48, 0x00, 0x52, 0x12, 0x77, 0x65, 0x62, 0x72, 0x74,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x77, 0x64, 0x12, 0x4a, 0x0a,
	0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x74, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x54, 0x54,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x50,
	0x74, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x10, 0x74, 0x61, 0x6c,
	0x6b, 0x5f, 0x70, 0x74, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x50, 0x54, 0x54, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x6c, 0x6b, 0x50, 0x74, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x15, 0x64, 0x72,
	0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x64,
	0x6f, 0x77, 0x6e, 0x42, 0x6f, 0x78, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x6f, 0x78, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x75, 0x73, 0x68, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x75, 0x73, 0x68, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x74, 0x74, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x2e, 0x50, 0x54, 0x54, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x74, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x74, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x50,
	0x54, 0x54, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x70, 0x74, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x44, 0x0a, 0x0e, 0x73, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x16, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x14, 0x6a,
	0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd0,
	0x01, 0x0a, 0x14, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x73,
	0x68, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x75, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xab, 0x01, 0x0a, 0x12, 0x57, 0x65, 0x62, 0x72, 0x74, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x46, 0x77, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x22, 0x61,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x43, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x54,
	0x0a, 0x15, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x09, 0x48, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67,
	0x44, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf7, 0x02, 0x0a, 0x12,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x6e, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x73, 0x65,
	0x6c, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x65, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x08, 0x43, 0x6c, 0x61, 0x6e, 0x4a,
	0x6f, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x96, 0x03,
	0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x03, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x66, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x6f,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x69, 0x64, 0x65,
	0x45, 0x64, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0xf5, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x6a,
	0x6f, 0x69, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x61, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0xfb, 0x02, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a,
	0x45, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1e,
	0x0a, 0x1a, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1e,
	0x0a, 0x1a, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x22, 0x4e,
	0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3d, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x06,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x06, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x44,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x7f, 0x0a,
	0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x05, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x22, 0x81,
	0x02, 0x0a, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x22, 0x89, 0x01, 0x0a, 0x10, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x96, 0x02, 0x0a,
	0x10, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x66, 0x0a, 0x11, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x64, 0x0a,
	0x0f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x81, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x22, 0x4d, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0xeb, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x22, 0x61,
	0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x72, 0x22, 0x45, 0x0a, 0x10, 0x43,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x6f, 0x72, 0x22, 0xee, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x12, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4c, 0x0a, 0x12, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xfa, 0x03,
	0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x32, 0x65,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x65, 0x32, 0x65, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x44, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6a, 0x0a,
	0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xaf,
	0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x32, 0x0a, 0x05, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x05, 0x6a, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73,
	0x22, 0xf3, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x79, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x45,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x65, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x89, 0x01, 0x0a,
	0x17, 0x43, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x6e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x5f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x4d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xff, 0x02, 0x0a, 0x10,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x4d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x38,
	0x0a, 0x0a, 0x66, 0x63, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x46, 0x43, 0x4d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x09, 0x66,
	0x63, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x5f, 0x0a,
	0x09, 0x46, 0x43, 0x4d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x78,
	0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x22, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x19, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xea, 0x01, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x01, 0x0a,
	0x12, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x0b, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xa3, 0x01, 0x0a, 0x0e,
	0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x54, 0x54, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a,
	0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x22, 0x60, 0x0a, 0x0e, 0x54, 0x61, 0x6c, 0x6b, 0x50, 0x54, 0x54, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x73, 0x54, 0x61, 0x6c, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54,
	0x61, 0x6c, 0x6b, 0x22, 0x3b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x04, 0x61, 0x63, 0x74, 0x73,
	0x22, 0xc4, 0x01, 0x0a, 0x13, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x6f, 0x78,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x0e, 0x50, 0x54, 0x54, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x0e, 0x50,
	0x54, 0x54, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x22, 0x75, 0x0a, 0x0c, 0x53, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x55, 0x0a, 0x1a, 0x63, 0x6f, 0x6d,
	0x2e, 0x68, 0x65, 0x72, 0x6f, 0x69, 0x63, 0x6c, 0x61, 0x62, 0x73, 0x2e, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x2e, 0x72, 0x74, 0x61, 0x70, 0x69, 0x42, 0x0d, 0x4d, 0x65, 0x7a, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x01, 0x5a, 0x15, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x2f,
	0x76, 0x32, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x74, 0x61, 0x70, 0x69, 0xaa,
	0x02, 0x0e, 0x4d, 0x65, 0x7a, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rtapi_realtime_proto_rawDescOnce sync.Once
	file_rtapi_realtime_proto_rawDescData = file_rtapi_realtime_proto_rawDesc
)

func file_rtapi_realtime_proto_rawDescGZIP() []byte {
	file_rtapi_realtime_proto_rawDescOnce.Do(func() {
		file_rtapi_realtime_proto_rawDescData = protoimpl.X.CompressGZIP(file_rtapi_realtime_proto_rawDescData)
	})
	return file_rtapi_realtime_proto_rawDescData
}

var file_rtapi_realtime_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rtapi_realtime_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_rtapi_realtime_proto_goTypes = []any{
	(Error_Code)(0),                            // 0: mezon.realtime.Error.Code
	(*Envelope)(nil),                           // 1: mezon.realtime.Envelope
	(*JoinStreamingChannel)(nil),               // 2: mezon.realtime.JoinStreamingChannel
	(*IncomingCallPush)(nil),                   // 3: mezon.realtime.IncomingCallPush
	(*WebrtcSignalingFwd)(nil),                 // 4: mezon.realtime.WebrtcSignalingFwd
	(*AddClanUserEvent)(nil),                   // 5: mezon.realtime.AddClanUserEvent
	(*RoleAssignedEvent)(nil),                  // 6: mezon.realtime.RoleAssignedEvent
	(*PermissionRoleChannel)(nil),              // 7: mezon.realtime.PermissionRoleChannel
	(*HashtagDm)(nil),                          // 8: mezon.realtime.HashtagDm
	(*ChannelDescription)(nil),                 // 9: mezon.realtime.ChannelDescription
	(*ClanEmoji)(nil),                          // 10: mezon.realtime.ClanEmoji
	(*Channel)(nil),                            // 11: mezon.realtime.Channel
	(*ClanJoin)(nil),                           // 12: mezon.realtime.ClanJoin
	(*ChannelJoin)(nil),                        // 13: mezon.realtime.ChannelJoin
	(*ChannelLeave)(nil),                       // 14: mezon.realtime.ChannelLeave
	(*ChannelMessageAck)(nil),                  // 15: mezon.realtime.ChannelMessageAck
	(*ChannelMessageSend)(nil),                 // 16: mezon.realtime.ChannelMessageSend
	(*ChannelMessageUpdate)(nil),               // 17: mezon.realtime.ChannelMessageUpdate
	(*ChannelMessageRemove)(nil),               // 18: mezon.realtime.ChannelMessageRemove
	(*ChannelPresenceEvent)(nil),               // 19: mezon.realtime.ChannelPresenceEvent
	(*Error)(nil),                              // 20: mezon.realtime.Error
	(*Notifications)(nil),                      // 21: mezon.realtime.Notifications
	(*Ping)(nil),                               // 22: mezon.realtime.Ping
	(*Pong)(nil),                               // 23: mezon.realtime.Pong
	(*Status)(nil),                             // 24: mezon.realtime.Status
	(*StatusFollow)(nil),                       // 25: mezon.realtime.StatusFollow
	(*StatusPresenceEvent)(nil),                // 26: mezon.realtime.StatusPresenceEvent
	(*LastPinMessageEvent)(nil),                // 27: mezon.realtime.LastPinMessageEvent
	(*LastSeenMessageEvent)(nil),               // 28: mezon.realtime.LastSeenMessageEvent
	(*MessageTypingEvent)(nil),                 // 29: mezon.realtime.MessageTypingEvent
	(*VoiceLeavedEvent)(nil),                   // 30: mezon.realtime.VoiceLeavedEvent
	(*VoiceJoinedEvent)(nil),                   // 31: mezon.realtime.VoiceJoinedEvent
	(*VoiceStartedEvent)(nil),                  // 32: mezon.realtime.VoiceStartedEvent
	(*VoiceEndedEvent)(nil),                    // 33: mezon.realtime.VoiceEndedEvent
	(*StreamingLeavedEvent)(nil),               // 34: mezon.realtime.StreamingLeavedEvent
	(*StreamingJoinedEvent)(nil),               // 35: mezon.realtime.StreamingJoinedEvent
	(*StreamingStartedEvent)(nil),              // 36: mezon.realtime.StreamingStartedEvent
	(*StreamingEndedEvent)(nil),                // 37: mezon.realtime.StreamingEndedEvent
	(*ChannelCreatedEvent)(nil),                // 38: mezon.realtime.ChannelCreatedEvent
	(*RoleEvent)(nil),                          // 39: mezon.realtime.RoleEvent
	(*ChannelDeletedEvent)(nil),                // 40: mezon.realtime.ChannelDeletedEvent
	(*ClanDeletedEvent)(nil),                   // 41: mezon.realtime.ClanDeletedEvent
	(*StickerCreateEvent)(nil),                 // 42: mezon.realtime.StickerCreateEvent
	(*StickerUpdateEvent)(nil),                 // 43: mezon.realtime.StickerUpdateEvent
	(*StickerDeleteEvent)(nil),                 // 44: mezon.realtime.StickerDeleteEvent
	(*ChannelUpdatedEvent)(nil),                // 45: mezon.realtime.ChannelUpdatedEvent
	(*StatusUnfollow)(nil),                     // 46: mezon.realtime.StatusUnfollow
	(*StatusUpdate)(nil),                       // 47: mezon.realtime.StatusUpdate
	(*Stream)(nil),                             // 48: mezon.realtime.Stream
	(*StreamData)(nil),                         // 49: mezon.realtime.StreamData
	(*StreamPresenceEvent)(nil),                // 50: mezon.realtime.StreamPresenceEvent
	(*UserPresence)(nil),                       // 51: mezon.realtime.UserPresence
	(*CustomStatusEvent)(nil),                  // 52: mezon.realtime.CustomStatusEvent
	(*UserChannelAdded)(nil),                   // 53: mezon.realtime.UserChannelAdded
	(*UserChannelRemoved)(nil),                 // 54: mezon.realtime.UserChannelRemoved
	(*UserClanRemoved)(nil),                    // 55: mezon.realtime.UserClanRemoved
	(*ClanUpdatedEvent)(nil),                   // 56: mezon.realtime.ClanUpdatedEvent
	(*ClanProfileUpdatedEvent)(nil),            // 57: mezon.realtime.ClanProfileUpdatedEvent
	(*UserProfileUpdatedEvent)(nil),            // 58: mezon.realtime.UserProfileUpdatedEvent
	(*UserProfileRedis)(nil),                   // 59: mezon.realtime.UserProfileRedis
	(*FCMTokens)(nil),                          // 60: mezon.realtime.FCMTokens
	(*CheckNameExistedEvent)(nil),              // 61: mezon.realtime.CheckNameExistedEvent
	(*NotificationChannelCategorySetting)(nil), // 62: mezon.realtime.NotificationChannelCategorySetting
	(*EventEmoji)(nil),                         // 63: mezon.realtime.EventEmoji
	(*PermissionSetEvent)(nil),                 // 64: mezon.realtime.PermissionSetEvent
	(*PermissionChangedEvent)(nil),             // 65: mezon.realtime.PermissionChangedEvent
	(*MessageButtonClicked)(nil),               // 66: mezon.realtime.MessageButtonClicked
	(*UnmuteEvent)(nil),                        // 67: mezon.realtime.UnmuteEvent
	(*JoinPTTChannel)(nil),                     // 68: mezon.realtime.JoinPTTChannel
	(*TalkPTTChannel)(nil),                     // 69: mezon.realtime.TalkPTTChannel
	(*ListActivity)(nil),                       // 70: mezon.realtime.ListActivity
	(*DropdownBoxSelected)(nil),                // 71: mezon.realtime.DropdownBoxSelected
	(*PTTLeavedEvent)(nil),                     // 72: mezon.realtime.PTTLeavedEvent
	(*PTTJoinedEvent)(nil),                     // 73: mezon.realtime.PTTJoinedEvent
	(*SdTopicEvent)(nil),                       // 74: mezon.realtime.SdTopicEvent
	nil,                                        // 75: mezon.realtime.Error.ContextEntry
	(*api.ChannelMessage)(nil),                 // 76: mezon.api.ChannelMessage
	(*api.Rpc)(nil),                            // 77: mezon.api.Rpc
	(*api.MessageReaction)(nil),                // 78: mezon.api.MessageReaction
	(*api.CreateEventRequest)(nil),             // 79: mezon.api.CreateEventRequest
	(*api.GiveCoffeeEvent)(nil),                // 80: mezon.api.GiveCoffeeEvent
	(*api.TokenSentEvent)(nil),                 // 81: mezon.api.TokenSentEvent
	(*wrapperspb.Int32Value)(nil),              // 82: google.protobuf.Int32Value
	(*api.ChannelMessageHeader)(nil),           // 83: mezon.api.ChannelMessageHeader
	(*timestamppb.Timestamp)(nil),              // 84: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),               // 85: google.protobuf.BoolValue
	(*api.MessageMention)(nil),                 // 86: mezon.api.MessageMention
	(*api.MessageAttachment)(nil),              // 87: mezon.api.MessageAttachment
	(*api.MessageRef)(nil),                     // 88: mezon.api.MessageRef
	(*api.Notification)(nil),                   // 89: mezon.api.Notification
	(*api.Role)(nil),                           // 90: mezon.api.Role
	(*wrapperspb.StringValue)(nil),             // 91: google.protobuf.StringValue
	(*api.PermissionUpdate)(nil),               // 92: mezon.api.PermissionUpdate
	(*api.UserActivity)(nil),                   // 93: mezon.api.UserActivity
}
var file_rtapi_realtime_proto_depIdxs = []int32{
	11,  // 0: mezon.realtime.Envelope.channel:type_name -> mezon.realtime.Channel
	12,  // 1: mezon.realtime.Envelope.clan_join:type_name -> mezon.realtime.ClanJoin
	13,  // 2: mezon.realtime.Envelope.channel_join:type_name -> mezon.realtime.ChannelJoin
	14,  // 3: mezon.realtime.Envelope.channel_leave:type_name -> mezon.realtime.ChannelLeave
	76,  // 4: mezon.realtime.Envelope.channel_message:type_name -> mezon.api.ChannelMessage
	15,  // 5: mezon.realtime.Envelope.channel_message_ack:type_name -> mezon.realtime.ChannelMessageAck
	16,  // 6: mezon.realtime.Envelope.channel_message_send:type_name -> mezon.realtime.ChannelMessageSend
	17,  // 7: mezon.realtime.Envelope.channel_message_update:type_name -> mezon.realtime.ChannelMessageUpdate
	18,  // 8: mezon.realtime.Envelope.channel_message_remove:type_name -> mezon.realtime.ChannelMessageRemove
	19,  // 9: mezon.realtime.Envelope.channel_presence_event:type_name -> mezon.realtime.ChannelPresenceEvent
	20,  // 10: mezon.realtime.Envelope.error:type_name -> mezon.realtime.Error
	21,  // 11: mezon.realtime.Envelope.notifications:type_name -> mezon.realtime.Notifications
	77,  // 12: mezon.realtime.Envelope.rpc:type_name -> mezon.api.Rpc
	24,  // 13: mezon.realtime.Envelope.status:type_name -> mezon.realtime.Status
	25,  // 14: mezon.realtime.Envelope.status_follow:type_name -> mezon.realtime.StatusFollow
	26,  // 15: mezon.realtime.Envelope.status_presence_event:type_name -> mezon.realtime.StatusPresenceEvent
	46,  // 16: mezon.realtime.Envelope.status_unfollow:type_name -> mezon.realtime.StatusUnfollow
	47,  // 17: mezon.realtime.Envelope.status_update:type_name -> mezon.realtime.StatusUpdate
	49,  // 18: mezon.realtime.Envelope.stream_data:type_name -> mezon.realtime.StreamData
	50,  // 19: mezon.realtime.Envelope.stream_presence_event:type_name -> mezon.realtime.StreamPresenceEvent
	22,  // 20: mezon.realtime.Envelope.ping:type_name -> mezon.realtime.Ping
	23,  // 21: mezon.realtime.Envelope.pong:type_name -> mezon.realtime.Pong
	29,  // 22: mezon.realtime.Envelope.message_typing_event:type_name -> mezon.realtime.MessageTypingEvent
	28,  // 23: mezon.realtime.Envelope.last_seen_message_event:type_name -> mezon.realtime.LastSeenMessageEvent
	78,  // 24: mezon.realtime.Envelope.message_reaction_event:type_name -> mezon.api.MessageReaction
	31,  // 25: mezon.realtime.Envelope.voice_joined_event:type_name -> mezon.realtime.VoiceJoinedEvent
	30,  // 26: mezon.realtime.Envelope.voice_leaved_event:type_name -> mezon.realtime.VoiceLeavedEvent
	32,  // 27: mezon.realtime.Envelope.voice_started_event:type_name -> mezon.realtime.VoiceStartedEvent
	33,  // 28: mezon.realtime.Envelope.voice_ended_event:type_name -> mezon.realtime.VoiceEndedEvent
	38,  // 29: mezon.realtime.Envelope.channel_created_event:type_name -> mezon.realtime.ChannelCreatedEvent
	40,  // 30: mezon.realtime.Envelope.channel_deleted_event:type_name -> mezon.realtime.ChannelDeletedEvent
	45,  // 31: mezon.realtime.Envelope.channel_updated_event:type_name -> mezon.realtime.ChannelUpdatedEvent
	27,  // 32: mezon.realtime.Envelope.last_pin_message_event:type_name -> mezon.realtime.LastPinMessageEvent
	52,  // 33: mezon.realtime.Envelope.custom_status_event:type_name -> mezon.realtime.CustomStatusEvent
	53,  // 34: mezon.realtime.Envelope.user_channel_added_event:type_name -> mezon.realtime.UserChannelAdded
	54,  // 35: mezon.realtime.Envelope.user_channel_removed_event:type_name -> mezon.realtime.UserChannelRemoved
	55,  // 36: mezon.realtime.Envelope.user_clan_removed_event:type_name -> mezon.realtime.UserClanRemoved
	56,  // 37: mezon.realtime.Envelope.clan_updated_event:type_name -> mezon.realtime.ClanUpdatedEvent
	57,  // 38: mezon.realtime.Envelope.clan_profile_updated_event:type_name -> mezon.realtime.ClanProfileUpdatedEvent
	61,  // 39: mezon.realtime.Envelope.check_name_existed_event:type_name -> mezon.realtime.CheckNameExistedEvent
	58,  // 40: mezon.realtime.Envelope.user_profile_updated_event:type_name -> mezon.realtime.UserProfileUpdatedEvent
	5,   // 41: mezon.realtime.Envelope.add_clan_user_event:type_name -> mezon.realtime.AddClanUserEvent
	79,  // 42: mezon.realtime.Envelope.clan_event_created:type_name -> mezon.api.CreateEventRequest
	6,   // 43: mezon.realtime.Envelope.role_assign_event:type_name -> mezon.realtime.RoleAssignedEvent
	41,  // 44: mezon.realtime.Envelope.clan_deleted_event:type_name -> mezon.realtime.ClanDeletedEvent
	80,  // 45: mezon.realtime.Envelope.give_coffee_event:type_name -> mezon.api.GiveCoffeeEvent
	42,  // 46: mezon.realtime.Envelope.sticker_create_event:type_name -> mezon.realtime.StickerCreateEvent
	43,  // 47: mezon.realtime.Envelope.sticker_update_event:type_name -> mezon.realtime.StickerUpdateEvent
	44,  // 48: mezon.realtime.Envelope.sticker_delete_event:type_name -> mezon.realtime.StickerDeleteEvent
	39,  // 49: mezon.realtime.Envelope.role_event:type_name -> mezon.realtime.RoleEvent
	63,  // 50: mezon.realtime.Envelope.event_emoji:type_name -> mezon.realtime.EventEmoji
	35,  // 51: mezon.realtime.Envelope.streaming_joined_event:type_name -> mezon.realtime.StreamingJoinedEvent
	34,  // 52: mezon.realtime.Envelope.streaming_leaved_event:type_name -> mezon.realtime.StreamingLeavedEvent
	36,  // 53: mezon.realtime.Envelope.streaming_started_event:type_name -> mezon.realtime.StreamingStartedEvent
	37,  // 54: mezon.realtime.Envelope.streaming_ended_event:type_name -> mezon.realtime.StreamingEndedEvent
	64,  // 55: mezon.realtime.Envelope.permission_set_event:type_name -> mezon.realtime.PermissionSetEvent
	65,  // 56: mezon.realtime.Envelope.permission_changed_event:type_name -> mezon.realtime.PermissionChangedEvent
	81,  // 57: mezon.realtime.Envelope.token_sent_event:type_name -> mezon.api.TokenSentEvent
	66,  // 58: mezon.realtime.Envelope.message_button_clicked:type_name -> mezon.realtime.MessageButtonClicked
	67,  // 59: mezon.realtime.Envelope.unmute_event:type_name -> mezon.realtime.UnmuteEvent
	4,   // 60: mezon.realtime.Envelope.webrtc_signaling_fwd:type_name -> mezon.realtime.WebrtcSignalingFwd
	68,  // 61: mezon.realtime.Envelope.join_ptt_channel:type_name -> mezon.realtime.JoinPTTChannel
	69,  // 62: mezon.realtime.Envelope.talk_ptt_channel:type_name -> mezon.realtime.TalkPTTChannel
	70,  // 63: mezon.realtime.Envelope.list_activity:type_name -> mezon.realtime.ListActivity
	71,  // 64: mezon.realtime.Envelope.dropdown_box_selected:type_name -> mezon.realtime.DropdownBoxSelected
	3,   // 65: mezon.realtime.Envelope.incoming_call_push:type_name -> mezon.realtime.IncomingCallPush
	73,  // 66: mezon.realtime.Envelope.ptt_joined_event:type_name -> mezon.realtime.PTTJoinedEvent
	72,  // 67: mezon.realtime.Envelope.ptt_leaved_event:type_name -> mezon.realtime.PTTLeavedEvent
	74,  // 68: mezon.realtime.Envelope.sd_topic_event:type_name -> mezon.realtime.SdTopicEvent
	2,   // 69: mezon.realtime.Envelope.join_streaming_channel:type_name -> mezon.realtime.JoinStreamingChannel
	59,  // 70: mezon.realtime.AddClanUserEvent.user:type_name -> mezon.realtime.UserProfileRedis
	82,  // 71: mezon.realtime.ChannelDescription.type:type_name -> google.protobuf.Int32Value
	83,  // 72: mezon.realtime.ChannelDescription.last_sent_message:type_name -> mezon.api.ChannelMessageHeader
	51,  // 73: mezon.realtime.Channel.presences:type_name -> mezon.realtime.UserPresence
	51,  // 74: mezon.realtime.Channel.self:type_name -> mezon.realtime.UserPresence
	82,  // 75: mezon.realtime.ChannelMessageAck.code:type_name -> google.protobuf.Int32Value
	84,  // 76: mezon.realtime.ChannelMessageAck.create_time:type_name -> google.protobuf.Timestamp
	84,  // 77: mezon.realtime.ChannelMessageAck.update_time:type_name -> google.protobuf.Timestamp
	85,  // 78: mezon.realtime.ChannelMessageAck.persistent:type_name -> google.protobuf.BoolValue
	86,  // 79: mezon.realtime.ChannelMessageSend.mentions:type_name -> mezon.api.MessageMention
	87,  // 80: mezon.realtime.ChannelMessageSend.attachments:type_name -> mezon.api.MessageAttachment
	88,  // 81: mezon.realtime.ChannelMessageSend.references:type_name -> mezon.api.MessageRef
	86,  // 82: mezon.realtime.ChannelMessageUpdate.mentions:type_name -> mezon.api.MessageMention
	87,  // 83: mezon.realtime.ChannelMessageUpdate.attachments:type_name -> mezon.api.MessageAttachment
	51,  // 84: mezon.realtime.ChannelPresenceEvent.joins:type_name -> mezon.realtime.UserPresence
	51,  // 85: mezon.realtime.ChannelPresenceEvent.leaves:type_name -> mezon.realtime.UserPresence
	75,  // 86: mezon.realtime.Error.context:type_name -> mezon.realtime.Error.ContextEntry
	89,  // 87: mezon.realtime.Notifications.notifications:type_name -> mezon.api.Notification
	51,  // 88: mezon.realtime.Status.presences:type_name -> mezon.realtime.UserPresence
	51,  // 89: mezon.realtime.StatusPresenceEvent.joins:type_name -> mezon.realtime.UserPresence
	51,  // 90: mezon.realtime.StatusPresenceEvent.leaves:type_name -> mezon.realtime.UserPresence
	82,  // 91: mezon.realtime.ChannelCreatedEvent.channel_type:type_name -> google.protobuf.Int32Value
	90,  // 92: mezon.realtime.RoleEvent.role:type_name -> mezon.api.Role
	82,  // 93: mezon.realtime.ChannelUpdatedEvent.channel_type:type_name -> google.protobuf.Int32Value
	91,  // 94: mezon.realtime.StatusUpdate.status:type_name -> google.protobuf.StringValue
	48,  // 95: mezon.realtime.StreamData.stream:type_name -> mezon.realtime.Stream
	51,  // 96: mezon.realtime.StreamData.sender:type_name -> mezon.realtime.UserPresence
	48,  // 97: mezon.realtime.StreamPresenceEvent.stream:type_name -> mezon.realtime.Stream
	51,  // 98: mezon.realtime.StreamPresenceEvent.joins:type_name -> mezon.realtime.UserPresence
	51,  // 99: mezon.realtime.StreamPresenceEvent.leaves:type_name -> mezon.realtime.UserPresence
	91,  // 100: mezon.realtime.UserPresence.status:type_name -> google.protobuf.StringValue
	59,  // 101: mezon.realtime.UserChannelAdded.users:type_name -> mezon.realtime.UserProfileRedis
	60,  // 102: mezon.realtime.UserProfileRedis.fcm_tokens:type_name -> mezon.realtime.FCMTokens
	92,  // 103: mezon.realtime.PermissionSetEvent.permission_updates:type_name -> mezon.api.PermissionUpdate
	93,  // 104: mezon.realtime.ListActivity.acts:type_name -> mezon.api.UserActivity
	105, // [105:105] is the sub-list for method output_type
	105, // [105:105] is the sub-list for method input_type
	105, // [105:105] is the sub-list for extension type_name
	105, // [105:105] is the sub-list for extension extendee
	0,   // [0:105] is the sub-list for field type_name
}

func init() { file_rtapi_realtime_proto_init() }
func file_rtapi_realtime_proto_init() {
	if File_rtapi_realtime_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rtapi_realtime_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*JoinStreamingChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*IncomingCallPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*WebrtcSignalingFwd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AddClanUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RoleAssignedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PermissionRoleChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*HashtagDm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ClanEmoji); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ClanJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelMessageAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelMessageSend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelMessageUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelMessageRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelPresenceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Notifications); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*StatusFollow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*StatusPresenceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*LastPinMessageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*LastSeenMessageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*MessageTypingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*VoiceLeavedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*VoiceJoinedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*VoiceStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*VoiceEndedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*StreamingLeavedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*StreamingJoinedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*StreamingStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*StreamingEndedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelCreatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*RoleEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelDeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*ClanDeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*StickerCreateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*StickerUpdateEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*StickerDeleteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*ChannelUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*StatusUnfollow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*StatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*StreamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*StreamPresenceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*UserPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*CustomStatusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*UserChannelAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*UserChannelRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*UserClanRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*ClanUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*ClanProfileUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*UserProfileUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*UserProfileRedis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*FCMTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*CheckNameExistedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*NotificationChannelCategorySetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*EventEmoji); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*PermissionSetEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*PermissionChangedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*MessageButtonClicked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*UnmuteEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*JoinPTTChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*TalkPTTChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*ListActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*DropdownBoxSelected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*PTTLeavedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*PTTJoinedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rtapi_realtime_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*SdTopicEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rtapi_realtime_proto_msgTypes[0].OneofWrappers = []any{
		(*Envelope_Channel)(nil),
		(*Envelope_ClanJoin)(nil),
		(*Envelope_ChannelJoin)(nil),
		(*Envelope_ChannelLeave)(nil),
		(*Envelope_ChannelMessage)(nil),
		(*Envelope_ChannelMessageAck)(nil),
		(*Envelope_ChannelMessageSend)(nil),
		(*Envelope_ChannelMessageUpdate)(nil),
		(*Envelope_ChannelMessageRemove)(nil),
		(*Envelope_ChannelPresenceEvent)(nil),
		(*Envelope_Error)(nil),
		(*Envelope_Notifications)(nil),
		(*Envelope_Rpc)(nil),
		(*Envelope_Status)(nil),
		(*Envelope_StatusFollow)(nil),
		(*Envelope_StatusPresenceEvent)(nil),
		(*Envelope_StatusUnfollow)(nil),
		(*Envelope_StatusUpdate)(nil),
		(*Envelope_StreamData)(nil),
		(*Envelope_StreamPresenceEvent)(nil),
		(*Envelope_Ping)(nil),
		(*Envelope_Pong)(nil),
		(*Envelope_MessageTypingEvent)(nil),
		(*Envelope_LastSeenMessageEvent)(nil),
		(*Envelope_MessageReactionEvent)(nil),
		(*Envelope_VoiceJoinedEvent)(nil),
		(*Envelope_VoiceLeavedEvent)(nil),
		(*Envelope_VoiceStartedEvent)(nil),
		(*Envelope_VoiceEndedEvent)(nil),
		(*Envelope_ChannelCreatedEvent)(nil),
		(*Envelope_ChannelDeletedEvent)(nil),
		(*Envelope_ChannelUpdatedEvent)(nil),
		(*Envelope_LastPinMessageEvent)(nil),
		(*Envelope_CustomStatusEvent)(nil),
		(*Envelope_UserChannelAddedEvent)(nil),
		(*Envelope_UserChannelRemovedEvent)(nil),
		(*Envelope_UserClanRemovedEvent)(nil),
		(*Envelope_ClanUpdatedEvent)(nil),
		(*Envelope_ClanProfileUpdatedEvent)(nil),
		(*Envelope_CheckNameExistedEvent)(nil),
		(*Envelope_UserProfileUpdatedEvent)(nil),
		(*Envelope_AddClanUserEvent)(nil),
		(*Envelope_ClanEventCreated)(nil),
		(*Envelope_RoleAssignEvent)(nil),
		(*Envelope_ClanDeletedEvent)(nil),
		(*Envelope_GiveCoffeeEvent)(nil),
		(*Envelope_StickerCreateEvent)(nil),
		(*Envelope_StickerUpdateEvent)(nil),
		(*Envelope_StickerDeleteEvent)(nil),
		(*Envelope_RoleEvent)(nil),
		(*Envelope_EventEmoji)(nil),
		(*Envelope_StreamingJoinedEvent)(nil),
		(*Envelope_StreamingLeavedEvent)(nil),
		(*Envelope_StreamingStartedEvent)(nil),
		(*Envelope_StreamingEndedEvent)(nil),
		(*Envelope_PermissionSetEvent)(nil),
		(*Envelope_PermissionChangedEvent)(nil),
		(*Envelope_TokenSentEvent)(nil),
		(*Envelope_MessageButtonClicked)(nil),
		(*Envelope_UnmuteEvent)(nil),
		(*Envelope_WebrtcSignalingFwd)(nil),
		(*Envelope_JoinPttChannel)(nil),
		(*Envelope_TalkPttChannel)(nil),
		(*Envelope_ListActivity)(nil),
		(*Envelope_DropdownBoxSelected)(nil),
		(*Envelope_IncomingCallPush)(nil),
		(*Envelope_PttJoinedEvent)(nil),
		(*Envelope_PttLeavedEvent)(nil),
		(*Envelope_SdTopicEvent)(nil),
		(*Envelope_JoinStreamingChannel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rtapi_realtime_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rtapi_realtime_proto_goTypes,
		DependencyIndexes: file_rtapi_realtime_proto_depIdxs,
		EnumInfos:         file_rtapi_realtime_proto_enumTypes,
		MessageInfos:      file_rtapi_realtime_proto_msgTypes,
	}.Build()
	File_rtapi_realtime_proto = out.File
	file_rtapi_realtime_proto_rawDesc = nil
	file_rtapi_realtime_proto_goTypes = nil
	file_rtapi_realtime_proto_depIdxs = nil
}
