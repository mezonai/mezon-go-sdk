---
swagger: "2.0"
info:
  version: "2.0"
  title: "Mezon API v2"
  contact:
    name: "The Mezon Authors & Contributors"
    url: "https://github.com/heroiclabs/mezon"
    email: "hello@heroiclabs.com"
host: "127.0.0.1:7350"
tags:
- name: "Mezon"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
security:
- BearerJwt: []
paths:
  /healthcheck:
    get:
      tags:
      - "Mezon"
      summary: "A healthcheck which load balancers can use to check the service."
      operationId: "Mezon_Healthcheck"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account:
    get:
      tags:
      - "Mezon"
      summary: "Fetch the current user's account."
      operationId: "Mezon_GetAccount"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiAccount"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    put:
      tags:
      - "Mezon"
      summary: "Update fields in the current user's account."
      operationId: "Mezon_UpdateAccount"
      parameters:
      - in: "body"
        name: "body"
        description: "Update a user's account details."
        required: true
        schema:
          $ref: "#/definitions/apiUpdateAccountRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "Mezon"
      summary: "Delete the current user's account."
      operationId: "Mezon_DeleteAccount"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/authenticate/apple:
    post:
      tags:
      - "Mezon"
      summary: "Authenticate a user with an Apple ID against the server."
      operationId: "Mezon_AuthenticateApple"
      parameters:
      - in: "body"
        name: "account"
        description: "The Apple account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountApple"
        x-exportParamName: "Account"
      - name: "create"
        in: "query"
        description: "Register the account if the user does not already exist."
        required: false
        type: "boolean"
        x-exportParamName: "Create"
        x-optionalDataType: "Bool"
      - name: "username"
        in: "query"
        description: "Set the username on the account at register. Must be unique."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/authenticate/checklogin:
    post:
      tags:
      - "Mezon"
      operationId: "Mezon_CheckLoginRequest"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiConfirmLoginRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/authenticate/confirmlogin:
    post:
      tags:
      - "Mezon"
      operationId: "Mezon_ConfirmLogin"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiConfirmLoginRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/authenticate/createqrlogin:
    post:
      tags:
      - "Mezon"
      operationId: "Mezon_CreateQRLogin"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiLoginRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiLoginIDResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/authenticate/custom:
    post:
      tags:
      - "Mezon"
      summary: "Authenticate a user with a custom id against the server."
      operationId: "Mezon_AuthenticateCustom"
      parameters:
      - in: "body"
        name: "account"
        description: "The custom account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountCustom"
        x-exportParamName: "Account"
      - name: "create"
        in: "query"
        description: "Register the account if the user does not already exist."
        required: false
        type: "boolean"
        x-exportParamName: "Create"
        x-optionalDataType: "Bool"
      - name: "username"
        in: "query"
        description: "Set the username on the account at register. Must be unique."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/authenticate/device:
    post:
      tags:
      - "Mezon"
      summary: "Authenticate a user with a device id against the server."
      operationId: "Mezon_AuthenticateDevice"
      parameters:
      - in: "body"
        name: "account"
        description: "The device account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountDevice"
        x-exportParamName: "Account"
      - name: "create"
        in: "query"
        description: "Register the account if the user does not already exist."
        required: false
        type: "boolean"
        x-exportParamName: "Create"
        x-optionalDataType: "Bool"
      - name: "username"
        in: "query"
        description: "Set the username on the account at register. Must be unique."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/authenticate/email:
    post:
      tags:
      - "Mezon"
      summary: "Authenticate a user with an email+password against the server."
      operationId: "Mezon_AuthenticateEmail"
      parameters:
      - in: "body"
        name: "account"
        description: "The email account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountEmail"
        x-exportParamName: "Account"
      - name: "create"
        in: "query"
        description: "Register the account if the user does not already exist."
        required: false
        type: "boolean"
        x-exportParamName: "Create"
        x-optionalDataType: "Bool"
      - name: "username"
        in: "query"
        description: "Set the username on the account at register. Must be unique."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/authenticate/facebook:
    post:
      tags:
      - "Mezon"
      summary: "Authenticate a user with a Facebook OAuth token against the server."
      operationId: "Mezon_AuthenticateFacebook"
      parameters:
      - in: "body"
        name: "account"
        description: "The Facebook account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountFacebook"
        x-exportParamName: "Account"
      - name: "create"
        in: "query"
        description: "Register the account if the user does not already exist."
        required: false
        type: "boolean"
        x-exportParamName: "Create"
        x-optionalDataType: "Bool"
      - name: "username"
        in: "query"
        description: "Set the username on the account at register. Must be unique."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "sync"
        in: "query"
        description: "Import Facebook friends for the user."
        required: false
        type: "boolean"
        x-exportParamName: "Sync"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/authenticate/facebookinstantgame:
    post:
      tags:
      - "Mezon"
      summary: "Authenticate a user with a Facebook Instant Game token against the\
        \ server."
      operationId: "Mezon_AuthenticateFacebookInstantGame"
      parameters:
      - in: "body"
        name: "account"
        description: "The Facebook Instant Game account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountFacebookInstantGame"
        x-exportParamName: "Account"
      - name: "create"
        in: "query"
        description: "Register the account if the user does not already exist."
        required: false
        type: "boolean"
        x-exportParamName: "Create"
        x-optionalDataType: "Bool"
      - name: "username"
        in: "query"
        description: "Set the username on the account at register. Must be unique."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/authenticate/gamecenter:
    post:
      tags:
      - "Mezon"
      summary: "Authenticate a user with Apple's GameCenter against the server."
      operationId: "Mezon_AuthenticateGameCenter"
      parameters:
      - in: "body"
        name: "account"
        description: "The Game Center account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountGameCenter"
        x-exportParamName: "Account"
      - name: "create"
        in: "query"
        description: "Register the account if the user does not already exist."
        required: false
        type: "boolean"
        x-exportParamName: "Create"
        x-optionalDataType: "Bool"
      - name: "username"
        in: "query"
        description: "Set the username on the account at register. Must be unique."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/authenticate/google:
    get:
      tags:
      - "Mezon"
      summary: "Authenticate a user with Google against the server."
      operationId: "Mezon_AuthenticateGoogleRedirect"
      parameters:
      - name: "code"
        in: "query"
        description: "The code"
        required: false
        type: "string"
        x-exportParamName: "Code"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "Mezon"
      summary: "Authenticate a user with Google against the server."
      operationId: "Mezon_AuthenticateGoogle"
      parameters:
      - in: "body"
        name: "account"
        description: "The Google account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountGoogle"
        x-exportParamName: "Account"
      - name: "create"
        in: "query"
        description: "Register the account if the user does not already exist."
        required: false
        type: "boolean"
        x-exportParamName: "Create"
        x-optionalDataType: "Bool"
      - name: "username"
        in: "query"
        description: "Set the username on the account at register. Must be unique."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/authenticate/steam:
    post:
      tags:
      - "Mezon"
      summary: "Authenticate a user with Steam against the server."
      operationId: "Mezon_AuthenticateSteam"
      parameters:
      - in: "body"
        name: "account"
        description: "The Steam account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountSteam"
        x-exportParamName: "Account"
      - name: "create"
        in: "query"
        description: "Register the account if the user does not already exist."
        required: false
        type: "boolean"
        x-exportParamName: "Create"
        x-optionalDataType: "Bool"
      - name: "username"
        in: "query"
        description: "Set the username on the account at register. Must be unique."
        required: false
        type: "string"
        x-exportParamName: "Username"
        x-optionalDataType: "String"
      - name: "sync"
        in: "query"
        description: "Import Steam friends for the user."
        required: false
        type: "boolean"
        x-exportParamName: "Sync"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/link/apple:
    post:
      tags:
      - "Mezon"
      summary: "Add an Apple ID to the social profiles on the current user's account."
      operationId: "Mezon_LinkApple"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a Apple Sign In token to the server. Used with authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountApple"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/link/custom:
    post:
      tags:
      - "Mezon"
      summary: "Add a custom ID to the social profiles on the current user's account."
      operationId: "Mezon_LinkCustom"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a custom ID to the server. Used with authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountCustom"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/link/device:
    post:
      tags:
      - "Mezon"
      summary: "Add a device ID to the social profiles on the current user's account."
      operationId: "Mezon_LinkDevice"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a device to the server. Used with authenticate/link/unlink\
          \ and user."
        required: true
        schema:
          $ref: "#/definitions/apiAccountDevice"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/link/email:
    post:
      tags:
      - "Mezon"
      summary: "Add an email+password to the social profiles on the current user's\
        \ account."
      operationId: "Mezon_LinkEmail"
      parameters:
      - in: "body"
        name: "body"
        description: "Send an email with password to the server. Used with authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountEmail"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/link/facebook:
    post:
      tags:
      - "Mezon"
      summary: "Add Facebook to the social profiles on the current user's account."
      operationId: "Mezon_LinkFacebook"
      parameters:
      - in: "body"
        name: "account"
        description: "The Facebook account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountFacebook"
        x-exportParamName: "Account"
      - name: "sync"
        in: "query"
        description: "Import Facebook friends for the user."
        required: false
        type: "boolean"
        x-exportParamName: "Sync"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/link/facebookinstantgame:
    post:
      tags:
      - "Mezon"
      summary: "Add Facebook Instant Game to the social profiles on the current user's\
        \ account."
      operationId: "Mezon_LinkFacebookInstantGame"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a Facebook Instant Game token to the server. Used with\
          \ authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountFacebookInstantGame"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/link/gamecenter:
    post:
      tags:
      - "Mezon"
      summary: "Add Apple's GameCenter to the social profiles on the current user's\
        \ account."
      operationId: "Mezon_LinkGameCenter"
      parameters:
      - in: "body"
        name: "body"
        description: "Send Apple's Game Center account credentials to the server.\
          \ Used with authenticate/link/unlink.\n\nhttps://developer.apple.com/documentation/gamekit/gklocalplayer/1515407-generateidentityverificationsign"
        required: true
        schema:
          $ref: "#/definitions/apiAccountGameCenter"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/link/google:
    post:
      tags:
      - "Mezon"
      summary: "Add Google to the social profiles on the current user's account."
      operationId: "Mezon_LinkGoogle"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a Google token to the server. Used with authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountGoogle"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/link/steam:
    post:
      tags:
      - "Mezon"
      summary: "Add Steam to the social profiles on the current user's account."
      operationId: "Mezon_LinkSteam"
      parameters:
      - in: "body"
        name: "body"
        description: "Link Steam to the current user's account."
        required: true
        schema:
          $ref: "#/definitions/apiLinkSteamRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/registry:
    post:
      tags:
      - "Mezon"
      summary: "Authenticate a user with an email+password against the server."
      operationId: "Mezon_RegistrationEmail"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiRegistrationEmailRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/session/refresh:
    post:
      tags:
      - "Mezon"
      summary: "Refresh a user's session using a refresh token retrieved from a previous\
        \ authentication request."
      operationId: "Mezon_SessionRefresh"
      parameters:
      - in: "body"
        name: "body"
        description: "Authenticate against the server with a refresh token."
        required: true
        schema:
          $ref: "#/definitions/apiSessionRefreshRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/account/unlink/apple:
    post:
      tags:
      - "Mezon"
      summary: "Remove the Apple ID from the social profiles on the current user's\
        \ account."
      operationId: "Mezon_UnlinkApple"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a Apple Sign In token to the server. Used with authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountApple"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/unlink/custom:
    post:
      tags:
      - "Mezon"
      summary: "Remove the custom ID from the social profiles on the current user's\
        \ account."
      operationId: "Mezon_UnlinkCustom"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a custom ID to the server. Used with authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountCustom"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/unlink/device:
    post:
      tags:
      - "Mezon"
      summary: "Remove the device ID from the social profiles on the current user's\
        \ account."
      operationId: "Mezon_UnlinkDevice"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a device to the server. Used with authenticate/link/unlink\
          \ and user."
        required: true
        schema:
          $ref: "#/definitions/apiAccountDevice"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/unlink/email:
    post:
      tags:
      - "Mezon"
      summary: "Remove the email+password from the social profiles on the current\
        \ user's account."
      operationId: "Mezon_UnlinkEmail"
      parameters:
      - in: "body"
        name: "body"
        description: "Send an email with password to the server. Used with authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountEmail"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/unlink/facebook:
    post:
      tags:
      - "Mezon"
      summary: "Remove Facebook from the social profiles on the current user's account."
      operationId: "Mezon_UnlinkFacebook"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a Facebook token to the server. Used with authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountFacebook"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/unlink/facebookinstantgame:
    post:
      tags:
      - "Mezon"
      summary: "Remove Facebook Instant Game profile from the social profiles on the\
        \ current user's account."
      operationId: "Mezon_UnlinkFacebookInstantGame"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a Facebook Instant Game token to the server. Used with\
          \ authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountFacebookInstantGame"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/unlink/gamecenter:
    post:
      tags:
      - "Mezon"
      summary: "Remove Apple's GameCenter from the social profiles on the current\
        \ user's account."
      operationId: "Mezon_UnlinkGameCenter"
      parameters:
      - in: "body"
        name: "body"
        description: "Send Apple's Game Center account credentials to the server.\
          \ Used with authenticate/link/unlink.\n\nhttps://developer.apple.com/documentation/gamekit/gklocalplayer/1515407-generateidentityverificationsign"
        required: true
        schema:
          $ref: "#/definitions/apiAccountGameCenter"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/unlink/google:
    post:
      tags:
      - "Mezon"
      summary: "Remove Google from the social profiles on the current user's account."
      operationId: "Mezon_UnlinkGoogle"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a Google token to the server. Used with authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountGoogle"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/account/unlink/steam:
    post:
      tags:
      - "Mezon"
      summary: "Remove Steam from the social profiles on the current user's account."
      operationId: "Mezon_UnlinkSteam"
      parameters:
      - in: "body"
        name: "body"
        description: "Send a Steam token to the server. Used with authenticate/link/unlink."
        required: true
        schema:
          $ref: "#/definitions/apiAccountSteam"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/activity:
    get:
      tags:
      - "Mezon"
      summary: "List activity"
      operationId: "Mezon_ListActivity"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListUserActivity"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "Mezon"
      summary: "Create user activity"
      operationId: "Mezon_CreateActiviy"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiCreateActivityRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiUserActivity"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/apps/add:
    post:
      tags:
      - "Mezon"
      summary: "Add a new apps."
      operationId: "Mezon_AddApp"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiAddAppRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/apps/app:
    get:
      tags:
      - "Mezon"
      summary: "List (and optionally filter) accounts."
      operationId: "Mezon_ListApps"
      parameters:
      - name: "filter"
        in: "query"
        description: "User ID or username filter."
        required: false
        type: "string"
        x-exportParamName: "Filter"
        x-optionalDataType: "String"
      - name: "tombstones"
        in: "query"
        description: "Search only recorded deletes."
        required: false
        type: "boolean"
        x-exportParamName: "Tombstones"
        x-optionalDataType: "Bool"
      - name: "cursor"
        in: "query"
        description: "Cursor to start from"
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiAppList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/apps/app/{appId}/clan/{clanId}:
    post:
      tags:
      - "Mezon"
      summary: "Add an app to clan."
      operationId: "Mezon_AddAppToClan"
      parameters:
      - name: "appId"
        in: "path"
        description: "The unique identifier of the app."
        required: true
        type: "string"
        x-exportParamName: "AppId"
      - name: "clanId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/apps/app/{id}:
    get:
      tags:
      - "Mezon"
      summary: "Get detailed app information."
      operationId: "Mezon_GetApp"
      parameters:
      - name: "id"
        in: "path"
        description: "The unique identifier of the app."
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiApp"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    put:
      tags:
      - "Mezon"
      summary: "Update one or more fields on a app."
      operationId: "Mezon_UpdateApp"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID to update."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateAppBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "Mezon"
      summary: "Delete all information stored for an app."
      operationId: "Mezon_DeleteApp"
      parameters:
      - name: "id"
        in: "path"
        description: "The unique identifier of the app."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "recordDeletion"
        in: "query"
        description: "Record the app deletion - used for GDPR compliance."
        required: false
        type: "boolean"
        x-exportParamName: "RecordDeletion"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/apps/app/{id}/ban:
    post:
      tags:
      - "Mezon"
      summary: "Ban a app."
      operationId: "Mezon_BanApp"
      parameters:
      - name: "id"
        in: "path"
        description: "The unique identifier of the app."
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/apps/app/{id}/unban:
    post:
      tags:
      - "Mezon"
      summary: "Unban an app."
      operationId: "Mezon_UnbanApp"
      parameters:
      - name: "id"
        in: "path"
        description: "The unique identifier of the app."
        required: true
        type: "string"
        x-exportParamName: "Id"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/apps/authenticate/token:
    post:
      tags:
      - "Mezon"
      summary: "Authenticate a app with a token against the server."
      operationId: "Mezon_Authenticate"
      parameters:
      - in: "body"
        name: "body"
        description: "Authenticate against the server with a device ID."
        required: true
        schema:
          $ref: "#/definitions/apiAuthenticateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSession"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BasicAuth: []
  /v2/audit_log:
    get:
      tags:
      - "Mezon"
      operationId: "Mezon_ListAuditLog"
      parameters:
      - name: "actionLog"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ActionLog"
        x-optionalDataType: "String"
      - name: "userId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "UserId"
        x-optionalDataType: "String"
      - name: "clanId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "pageSize"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/mezonapiListAuditLog"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/canvases/editor:
    post:
      tags:
      - "Mezon"
      summary: "Channel canvas editor"
      operationId: "Mezon_EditChannelCanvases"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiEditChannelCanvasRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiEditChannelCanvasResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/canvases/{canvasId}:
    delete:
      tags:
      - "Mezon"
      operationId: "Mezon_DeleteChannelCanvas"
      parameters:
      - name: "canvasId"
        in: "path"
        description: "canvas id"
        required: true
        type: "string"
        x-exportParamName: "CanvasId"
      - name: "clanId"
        in: "query"
        description: "clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "channelId"
        in: "query"
        description: "channel id"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/canvases/{id}:
    get:
      tags:
      - "Mezon"
      operationId: "Mezon_GetChannelCanvasDetail"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "clanId"
        in: "query"
        description: "clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "channelId"
        in: "query"
        description: "channel id"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChannelCanvasDetailResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/category/orders:
    put:
      tags:
      - "Mezon"
      operationId: "Mezon_UpdateCategoryOrder"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiUpdateCategoryOrderRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/categorydesc/{clanId}:
    get:
      tags:
      - "Mezon"
      operationId: "Mezon_ListCategoryDescs"
      parameters:
      - name: "clanId"
        in: "path"
        description: "the Clan that category belong to"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      - name: "creatorId"
        in: "query"
        description: "Category creator"
        required: false
        type: "string"
        x-exportParamName: "CreatorId"
        x-optionalDataType: "String"
      - name: "categoryName"
        in: "query"
        description: "Category name"
        required: false
        type: "string"
        x-exportParamName: "CategoryName"
        x-optionalDataType: "String"
      - name: "categoryId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "CategoryId"
        x-optionalDataType: "String"
      - name: "categoryOrder"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "CategoryOrder"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiCategoryDescList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel-apps:
    get:
      tags:
      - "Mezon"
      summary: "List channel apps."
      operationId: "Mezon_ListChannelApps"
      parameters:
      - name: "clanId"
        in: "query"
        description: "clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListChannelAppsResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel-canvases/{channelId}:
    get:
      tags:
      - "Mezon"
      operationId: "Mezon_GetChannelCanvasList"
      parameters:
      - name: "channelId"
        in: "path"
        description: "channel id"
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - name: "clanId"
        in: "query"
        description: "clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChannelCanvasListResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel/favorite:
    post:
      tags:
      - "Mezon"
      operationId: "Mezon_AddChannelFavorite"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiAddFavoriteChannelRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiAddFavoriteChannelResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel/favorite/{channelId}:
    delete:
      tags:
      - "Mezon"
      operationId: "Mezon_RemoveChannelFavorite"
      parameters:
      - name: "channelId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel/favorite/{clanId}:
    get:
      tags:
      - "Mezon"
      operationId: "Mezon_GetListFavoriteChannel"
      parameters:
      - name: "clanId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListFavoriteChannelResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel/{channelId}:
    get:
      tags:
      - "Mezon"
      summary: "List a channel's message history."
      operationId: "Mezon_ListChannelMessages"
      parameters:
      - name: "channelId"
        in: "path"
        description: "The channel ID to list from."
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - name: "clanId"
        in: "query"
        description: "the clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "messageId"
        in: "query"
        description: "The current message ID."
        required: false
        type: "string"
        x-exportParamName: "MessageId"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "direction"
        in: "query"
        description: "True if listing should be older messages to newer, false if\
          \ reverse."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Direction"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChannelMessageList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel/{channelId}/add:
    post:
      tags:
      - "Mezon"
      summary: "Add users to a channel."
      operationId: "Mezon_AddChannelUsers"
      parameters:
      - name: "channelId"
        in: "path"
        description: "The channel to add users to."
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - name: "userIds"
        in: "query"
        description: "The users to add."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "UserIds"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel/{channelId}/attachment:
    get:
      tags:
      - "Mezon"
      summary: "List all attachment that are part of a channel."
      operationId: "Mezon_ListChannelAttachment"
      parameters:
      - name: "channelId"
        in: "path"
        description: "The channel ID to list from."
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - name: "clanId"
        in: "query"
        description: "The clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "fileType"
        in: "query"
        description: "The channel type"
        required: false
        type: "string"
        x-exportParamName: "FileType"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "state"
        in: "query"
        description: "The group user state to list."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "State"
        x-optionalDataType: "Int32"
      - name: "before"
        in: "query"
        description: "An optional previous id for page."
        required: false
        type: "string"
        x-exportParamName: "Before"
        x-optionalDataType: "String"
      - name: "after"
        in: "query"
        description: "An optional next id for page."
        required: false
        type: "string"
        x-exportParamName: "After"
        x-optionalDataType: "String"
      - name: "around"
        in: "query"
        description: "An optional around id for page."
        required: false
        type: "string"
        x-exportParamName: "Around"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChannelAttachmentList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel/{channelId}/encrypt_method:
    get:
      tags:
      - "Mezon"
      summary: "get channel encryption method"
      operationId: "Mezon_GetChanEncryptionMethod"
      parameters:
      - name: "channelId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - name: "method"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Method"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChanEncryptionMethod"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "Mezon"
      summary: "store channel encryption method"
      operationId: "Mezon_SetChanEncryptionMethod"
      parameters:
      - name: "channelId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonSetChanEncryptionMethodBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel/{channelId}/leave:
    post:
      tags:
      - "Mezon"
      summary: "Leave a channel the user is a member of."
      operationId: "Mezon_LeaveThread"
      parameters:
      - name: "channelId"
        in: "path"
        description: "The channel ID to leave."
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel/{channelId}/remove:
    post:
      tags:
      - "Mezon"
      summary: "Kick a set of users from a channel."
      operationId: "Mezon_RemoveChannelUsers"
      parameters:
      - name: "channelId"
        in: "path"
        description: "The channel ID to kick from."
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - name: "userIds"
        in: "query"
        description: "The users to kick."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "UserIds"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channel/{channelId}/user:
    get:
      tags:
      - "Mezon"
      summary: "List all users that are part of a channel."
      operationId: "Mezon_ListChannelUsers"
      parameters:
      - name: "channelId"
        in: "path"
        description: "The channel ID to list from."
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - name: "clanId"
        in: "query"
        description: "The clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "channelType"
        in: "query"
        description: "The channel type"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "ChannelType"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "state"
        in: "query"
        description: "The group user state to list."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "State"
        x-optionalDataType: "Int32"
      - name: "cursor"
        in: "query"
        description: "An optional next page cursor."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChannelUserList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channeldesc:
    get:
      tags:
      - "Mezon"
      summary: "List user channels"
      operationId: "Mezon_ListChannelDescs"
      parameters:
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "state"
        in: "query"
        description: "The channel state to list."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "State"
        x-optionalDataType: "Int32"
      - name: "cursor"
        in: "query"
        description: "Cursor to start from"
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "clanId"
        in: "query"
        description: "The clan of this channel"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "channelType"
        in: "query"
        description: "channel type"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "ChannelType"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChannelDescList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "Mezon"
      summary: "Create a new channel with the current user as the owner."
      operationId: "Mezon_CreateChannelDesc"
      parameters:
      - in: "body"
        name: "body"
        description: "Create a channel within clan."
        required: true
        schema:
          $ref: "#/definitions/apiCreateChannelDescRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChannelDescription"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channeldesc/users/add:
    get:
      tags:
      - "Mezon"
      summary: "list user add channel by channel ids"
      operationId: "Mezon_ListUsersAddChannelByChannelId"
      parameters:
      - name: "channelId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiAllUsersAddChannelResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channeldesc/{channelId}:
    put:
      tags:
      - "Mezon"
      summary: "Update fields in a given channel."
      operationId: "Mezon_UpdateChannelDesc"
      parameters:
      - name: "channelId"
        in: "path"
        description: "The ID of the channel to update."
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateChannelDescBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "Mezon"
      summary: "Delete a channel by ID."
      operationId: "Mezon_DeleteChannelDesc"
      parameters:
      - name: "channelId"
        in: "path"
        description: "The id of a channel."
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channelsetting/{clanId}:
    get:
      tags:
      - "Mezon"
      summary: "List channel setting"
      operationId: "Mezon_ListChannelSetting"
      parameters:
      - name: "clanId"
        in: "path"
        description: "clan id"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      - name: "parentId"
        in: "query"
        description: "parent id of thread"
        required: false
        type: "string"
        x-exportParamName: "ParentId"
        x-optionalDataType: "String"
      - name: "categoryId"
        in: "query"
        description: "category id"
        required: false
        type: "string"
        x-exportParamName: "CategoryId"
        x-optionalDataType: "String"
      - name: "privateChannel"
        in: "query"
        description: "is private channel"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "PrivateChannel"
        x-optionalDataType: "Int32"
      - name: "active"
        in: "query"
        description: "is active"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Active"
        x-optionalDataType: "Int32"
      - name: "status"
        in: "query"
        description: "status"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Status"
        x-optionalDataType: "Int32"
      - name: "type"
        in: "query"
        description: "type"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Type_"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "channelLabel"
        in: "query"
        description: "channel label"
        required: false
        type: "string"
        x-exportParamName: "ChannelLabel"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChannelSettingListResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/channelvoice:
    get:
      tags:
      - "Mezon"
      summary: "List all users that are part of a channel."
      operationId: "Mezon_ListChannelVoiceUsers"
      parameters:
      - name: "clanId"
        in: "query"
        description: "The clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "channelId"
        in: "query"
        description: "The channel ID to list from."
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      - name: "channelType"
        in: "query"
        description: "The channel type"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "ChannelType"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "state"
        in: "query"
        description: "The group user state to list."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "State"
        x-optionalDataType: "Int32"
      - name: "cursor"
        in: "query"
        description: "An optional next page cursor."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiVoiceChannelUserList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/clandesc:
    get:
      tags:
      - "Mezon"
      summary: "List clans"
      operationId: "Mezon_ListClanDescs"
      parameters:
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "state"
        in: "query"
        description: "The friend state to list."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "State"
        x-optionalDataType: "Int32"
      - name: "cursor"
        in: "query"
        description: "Cursor to start from"
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiClanDescList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "Mezon"
      summary: "Create a clan"
      operationId: "Mezon_CreateClanDesc"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiCreateClanDescRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiClanDesc"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/clandesc/{clanDescId}:
    delete:
      tags:
      - "Mezon"
      summary: "Delete a clan desc by ID."
      operationId: "Mezon_DeleteClanDesc"
      parameters:
      - name: "clanDescId"
        in: "path"
        description: "The id of a group."
        required: true
        type: "string"
        x-exportParamName: "ClanDescId"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/clandesc/{clanId}:
    put:
      tags:
      - "Mezon"
      summary: "Update fields in a given clan."
      operationId: "Mezon_UpdateClanDesc"
      parameters:
      - name: "clanId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateClanDescBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/clandesc/{clanId}/kick:
    post:
      tags:
      - "Mezon"
      summary: "Kick a set of users from a clan."
      operationId: "Mezon_RemoveClanUsers"
      parameters:
      - name: "clanId"
        in: "path"
        description: "The clan ID to kick from."
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      - name: "userIds"
        in: "query"
        description: "The users to kick."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "UserIds"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/clandesc/{clanId}/user:
    get:
      tags:
      - "Mezon"
      summary: "List all users that are part of a clan."
      operationId: "Mezon_ListClanUsers"
      parameters:
      - name: "clanId"
        in: "path"
        description: "The clan ID to list from."
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiClanUserList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/clandesc/{clanName}:
    get:
      tags:
      - "Mezon"
      summary: "check duplicate clan name"
      operationId: "Mezon_CheckDuplicateClanName"
      parameters:
      - name: "clanName"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ClanName"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiCheckDuplicateClanNameResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/clandescprofile/{clanId}:
    get:
      tags:
      - "Mezon"
      summary: "Get a clan desc profile"
      operationId: "Mezon_GetClanDescProfile"
      parameters:
      - name: "clanId"
        in: "path"
        description: "Clan id"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiClanDescProfile"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    put:
      tags:
      - "Mezon"
      summary: "Update fields in a given clan profile."
      operationId: "Mezon_UpdateClanDescProfile"
      parameters:
      - name: "clanId"
        in: "path"
        description: "Clan id"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateClanDescProfileBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/clanwebhooks:
    post:
      tags:
      - "Mezon"
      summary: "Generate clan webhook."
      operationId: "Mezon_GenerateClanWebhook"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiGenerateClanWebhookRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGenerateClanWebhookResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/clanwebhooks/{clanId}:
    get:
      tags:
      - "Mezon"
      summary: "List clan webhook."
      operationId: "Mezon_ListClanWebhook"
      parameters:
      - name: "clanId"
        in: "path"
        description: "clan_id."
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListClanWebhookResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/clanwebhooks/{id}:
    put:
      tags:
      - "Mezon"
      summary: "Update clan webhook by id."
      operationId: "Mezon_UpdateClanWebhookById"
      parameters:
      - name: "id"
        in: "path"
        description: "webhook id."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateClanWebhookByIdBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "Mezon"
      summary: "Disabled clan webhook."
      operationId: "Mezon_DeleteClanWebhookById"
      parameters:
      - name: "id"
        in: "path"
        description: "id."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "clanId"
        in: "query"
        description: "clan id."
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/clanwebhooks/{token}/{username}:
    post:
      tags:
      - "Mezon"
      summary: "Handler clan webhook."
      operationId: "Mezon_HandlerClanWebhook"
      parameters:
      - name: "token"
        in: "path"
        description: "token."
        required: true
        type: "string"
        x-exportParamName: "Token"
      - name: "username"
        in: "path"
        description: "username."
        required: true
        type: "string"
        x-exportParamName: "Username"
      - in: "body"
        name: "body"
        description: "body."
        required: true
        schema:
          $ref: "#/definitions/apiClanWebhookHandlerBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/createcategory:
    post:
      tags:
      - "Mezon"
      operationId: "Mezon_CreateCategoryDesc"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiCreateCategoryDescRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiCategoryDesc"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/deletecategory/category_id/{categoryId}/clan_id/{clanId}:
    delete:
      tags:
      - "Mezon"
      operationId: "Mezon_DeleteCategoryDesc"
      parameters:
      - name: "categoryId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "CategoryId"
      - name: "clanId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/deletecategoryorder/clan_id/{clanId}:
    delete:
      tags:
      - "Mezon"
      operationId: "Mezon_DeleteCategoryOrder"
      parameters:
      - name: "clanId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/devicetoken:
    post:
      tags:
      - "Mezon"
      summary: "regist fcm device token"
      operationId: "Mezon_RegistFCMDeviceToken"
      parameters:
      - name: "token"
        in: "query"
        description: "The token"
        required: false
        type: "string"
        x-exportParamName: "Token"
        x-optionalDataType: "String"
      - name: "deviceId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "DeviceId"
        x-optionalDataType: "String"
      - name: "platform"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Platform"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRegistFcmDeviceTokenResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/direct/close:
    put:
      tags:
      - "Mezon"
      summary: "close direct message."
      operationId: "Mezon_CloseDirectMess"
      parameters:
      - in: "body"
        name: "body"
        description: "Delete a channel the user has access to."
        required: true
        schema:
          $ref: "#/definitions/apiDeleteChannelDescRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/direct/open:
    put:
      tags:
      - "Mezon"
      summary: "open direct message."
      operationId: "Mezon_OpenDirectMess"
      parameters:
      - in: "body"
        name: "body"
        description: "Delete a channel the user has access to."
        required: true
        schema:
          $ref: "#/definitions/apiDeleteChannelDescRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/e2ee/key_server:
    get:
      tags:
      - "Mezon"
      summary: "get key server"
      operationId: "Mezon_GetKeyServer"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGetKeyServerResp"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/emoji/create:
    post:
      tags:
      - "Mezon"
      summary: "Post clan Emoji  /v2/emoji/create"
      operationId: "Mezon_CreateClanEmoji"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiClanEmojiCreateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/emoji/{id}:
    delete:
      tags:
      - "Mezon"
      summary: "Delete a emoji by ID."
      operationId: "Mezon_DeleteByIdClanEmoji"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "clanId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    patch:
      tags:
      - "Mezon"
      summary: "Update ClanEmoj By id"
      operationId: "Mezon_UpdateClanEmojiById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateClanEmojiByIdBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/emojis:
    get:
      tags:
      - "Mezon"
      summary: "get list emoji by user id"
      operationId: "Mezon_GetListEmojisByUserId"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiEmojiListedResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/es/search:
    post:
      tags:
      - "Mezon"
      summary: "Search message from elasticsearch service."
      operationId: "Mezon_SearchMessage"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiSearchMessageRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSearchMessageResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/event:
    post:
      tags:
      - "Mezon"
      summary: "Submit an event for processing in the server's registered runtime\
        \ custom events handler."
      operationId: "Mezon_Event"
      parameters:
      - in: "body"
        name: "body"
        description: "Represents an event to be passed through the server to registered\
          \ event handlers."
        required: true
        schema:
          $ref: "#/definitions/mezonapiEvent"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/eventmanagement:
    get:
      tags:
      - "Mezon"
      summary: "List user events"
      operationId: "Mezon_ListEvents"
      parameters:
      - name: "clanId"
        in: "query"
        description: "The clan of this event"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiEventList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/eventmanagement/create:
    post:
      tags:
      - "Mezon"
      summary: "Create a new event for clan."
      operationId: "Mezon_CreateEvent"
      parameters:
      - in: "body"
        name: "body"
        description: "Create a event within clan."
        required: true
        schema:
          $ref: "#/definitions/apiCreateEventRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiEventManagement"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/eventmanagement/user:
    put:
      tags:
      - "Mezon"
      summary: "Update fields in a given event."
      operationId: "Mezon_UpdateEventUser"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiDeleteEventRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/eventmanagement/{eventId}:
    put:
      tags:
      - "Mezon"
      summary: "Update fields in a given event."
      operationId: "Mezon_UpdateEvent"
      parameters:
      - name: "eventId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "EventId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateEventBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "Mezon"
      summary: "Delete a event by ID."
      operationId: "Mezon_DeleteEvent"
      parameters:
      - name: "eventId"
        in: "path"
        description: "The id of a event."
        required: true
        type: "string"
        x-exportParamName: "EventId"
      - name: "clanId"
        in: "query"
        description: "clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/friend:
    get:
      tags:
      - "Mezon"
      summary: "List all friends for the current user."
      operationId: "Mezon_ListFriends"
      parameters:
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "state"
        in: "query"
        description: "The friend state to list."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "State"
        x-optionalDataType: "Int32"
      - name: "cursor"
        in: "query"
        description: "An optional next page cursor."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiFriendList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "Mezon"
      summary: "Add friends by ID or username to a user's account."
      operationId: "Mezon_AddFriends"
      parameters:
      - name: "ids"
        in: "query"
        description: "The account id of a user."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Ids"
      - name: "usernames"
        in: "query"
        description: "The account username of a user."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Usernames"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "Mezon"
      summary: "Delete one or more users by ID or username."
      operationId: "Mezon_DeleteFriends"
      parameters:
      - name: "ids"
        in: "query"
        description: "The account id of a user."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Ids"
      - name: "usernames"
        in: "query"
        description: "The account username of a user."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Usernames"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/friend/block:
    post:
      tags:
      - "Mezon"
      summary: "Block one or more users by ID or username."
      operationId: "Mezon_BlockFriends"
      parameters:
      - name: "ids"
        in: "query"
        description: "The account id of a user."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Ids"
      - name: "usernames"
        in: "query"
        description: "The account username of a user."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Usernames"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/friend/facebook:
    post:
      tags:
      - "Mezon"
      summary: "Import Facebook friends and add them to a user's account."
      operationId: "Mezon_ImportFacebookFriends"
      parameters:
      - in: "body"
        name: "account"
        description: "The Facebook account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountFacebook"
        x-exportParamName: "Account"
      - name: "reset"
        in: "query"
        description: "Reset the current user's friends list."
        required: false
        type: "boolean"
        x-exportParamName: "Reset"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/friend/steam:
    post:
      tags:
      - "Mezon"
      summary: "Import Steam friends and add them to a user's account."
      operationId: "Mezon_ImportSteamFriends"
      parameters:
      - in: "body"
        name: "account"
        description: "The Facebook account details."
        required: true
        schema:
          $ref: "#/definitions/apiAccountSteam"
        x-exportParamName: "Account"
      - name: "reset"
        in: "query"
        description: "Reset the current user's friends list."
        required: false
        type: "boolean"
        x-exportParamName: "Reset"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/getChannelCategoryNotiSettingsList:
    get:
      tags:
      - "Mezon"
      summary: "List GetChannelCategoryNotiSettingsList"
      operationId: "Mezon_GetChannelCategoryNotiSettingsList"
      parameters:
      - name: "clanId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiNotificationChannelCategorySettingList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/getclanprofile/{clanId}:
    get:
      tags:
      - "Mezon"
      operationId: "Mezon_GetUserProfileOnClan"
      parameters:
      - name: "clanId"
        in: "path"
        description: "id clanc"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiClanProfile"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/getnotificationcategory:
    get:
      tags:
      - "Mezon"
      summary: "List GetNotificationChannel"
      operationId: "Mezon_GetNotificationCategory"
      parameters:
      - name: "categoryId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "CategoryId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiNotificationUserChannel"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/getnotificationchannel:
    get:
      tags:
      - "Mezon"
      summary: "List GetNotificationChannel"
      operationId: "Mezon_GetNotificationChannel"
      parameters:
      - name: "channelId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiNotificationUserChannel"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/getnotificationclan:
    get:
      tags:
      - "Mezon"
      summary: "List GetNotificationClan"
      operationId: "Mezon_GetNotificationClan"
      parameters:
      - name: "clanId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiNotificationSetting"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/getnotificationreactmessage:
    get:
      tags:
      - "Mezon"
      summary: "List GetNotificationReactMessage"
      operationId: "Mezon_GetNotificationReactMessage"
      parameters:
      - name: "channelId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiNotifiReactMessage"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/givecoffee:
    post:
      tags:
      - "Mezon"
      summary: "Give a coffee"
      operationId: "Mezon_GiveMeACoffee"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiGiveCoffeeEvent"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/hashtagdmlist:
    get:
      tags:
      - "Mezon"
      summary: "List HashtagDMList"
      operationId: "Mezon_HashtagDMList"
      parameters:
      - name: "userId"
        in: "query"
        description: "user Id"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "UserId"
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiHashtagDmList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/invite:
    post:
      tags:
      - "Mezon"
      summary: "Add users to a channel."
      operationId: "Mezon_CreateLinkInviteUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Add link invite users to."
        required: true
        schema:
          $ref: "#/definitions/apiLinkInviteUserRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiLinkInviteUser"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/invite/{inviteId}:
    get:
      tags:
      - "Mezon"
      summary: "Add users to a channel."
      operationId: "Mezon_GetLinkInvite"
      parameters:
      - name: "inviteId"
        in: "path"
        description: "id clan to add link to ."
        required: true
        type: "string"
        x-exportParamName: "InviteId"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiInviteUserRes"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "Mezon"
      summary: "Add users to a channel."
      operationId: "Mezon_InviteUser"
      parameters:
      - name: "inviteId"
        in: "path"
        description: "id clan to add link to ."
        required: true
        type: "string"
        x-exportParamName: "InviteId"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiInviteUserRes"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/listchannelbyuserid:
    get:
      tags:
      - "Mezon"
      summary: "List HashtagDMList"
      operationId: "Mezon_ListChannelByUserId"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChannelDescList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/markasread:
    post:
      tags:
      - "Mezon"
      summary: "Mark as read"
      operationId: "Mezon_MarkAsRead"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiMarkAsReadRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/mutenotificationcategory/set:
    post:
      tags:
      - "Mezon"
      summary: "set mute notification user channel."
      operationId: "Mezon_SetMuteNotificationCategory"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiSetMuteNotificationRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/mutenotificationchannel/set:
    post:
      tags:
      - "Mezon"
      summary: "set mute notification user channel."
      operationId: "Mezon_SetMuteNotificationChannel"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiSetMuteNotificationRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/notification:
    get:
      tags:
      - "Mezon"
      summary: "Fetch list of notifications."
      operationId: "Mezon_ListNotifications"
      parameters:
      - name: "limit"
        in: "query"
        description: "The number of notifications to get. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "clanId"
        in: "query"
        description: "The clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "notificationId"
        in: "query"
        description: "The current notification Id."
        required: false
        type: "string"
        x-exportParamName: "NotificationId"
        x-optionalDataType: "String"
      - name: "code"
        in: "query"
        description: "The code."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Code"
        x-optionalDataType: "Int32"
      - name: "direction"
        in: "query"
        description: "True if listing should be older notifications to newer, false\
          \ if reverse."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Direction"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiNotificationList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "Mezon"
      summary: "Delete one or more notifications for the current user."
      operationId: "Mezon_DeleteNotifications"
      parameters:
      - name: "ids"
        in: "query"
        description: "The id of notifications."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Ids"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/notificationchannel/set:
    post:
      tags:
      - "Mezon"
      summary: "set notification user channel."
      operationId: "Mezon_SetNotificationChannelSetting"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiSetNotificationRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/notificationclan/set:
    post:
      tags:
      - "Mezon"
      summary: "set notification user channel."
      operationId: "Mezon_SetNotificationClanSetting"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiSetDefaultNotificationRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/notificationucategory/set:
    post:
      tags:
      - "Mezon"
      summary: "set notification user channel."
      operationId: "Mezon_SetNotificationCategorySetting"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiSetNotificationRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/notificationusercategory/delete:
    delete:
      tags:
      - "Mezon"
      operationId: "Mezon_DeleteNotificationCategorySetting"
      parameters:
      - name: "categoryId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "CategoryId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/notificationuserchannel/delete:
    delete:
      tags:
      - "Mezon"
      operationId: "Mezon_DeleteNotificationChannel"
      parameters:
      - name: "channelId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/notifireactmessage/delete:
    delete:
      tags:
      - "Mezon"
      operationId: "Mezon_DeleteNotiReactMessage"
      parameters:
      - name: "channelId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/notifireactmessage/set:
    post:
      tags:
      - "Mezon"
      operationId: "Mezon_SetNotificationReactMessage"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiNotificationChannel"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/onboarding:
    get:
      tags:
      - "Mezon"
      summary: "list onboarding."
      operationId: "Mezon_ListOnboarding"
      parameters:
      - name: "clanId"
        in: "query"
        description: "clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "guideType"
        in: "query"
        description: "guide_type: 0 = greeting, 1 = rule, 2 = task, 3 = question"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "GuideType"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListOnboardingResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "Mezon"
      summary: "create onboarding."
      operationId: "Mezon_CreateOnboarding"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiCreateOnboardingRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/onboarding/{id}:
    get:
      tags:
      - "Mezon"
      summary: "get detailed onboarding information."
      operationId: "Mezon_GetOnboardingDetail"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "clanId"
        in: "query"
        description: "clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiOnboardingItem"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    put:
      tags:
      - "Mezon"
      summary: "update onboarding."
      operationId: "Mezon_UpdateOnboarding"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateOnboardingBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "Mezon"
      summary: "delete onboarding."
      operationId: "Mezon_DeleteOnboarding"
      parameters:
      - name: "id"
        in: "path"
        description: "id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "clanId"
        in: "query"
        description: "clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/onboardingsteps:
    get:
      tags:
      - "Mezon"
      summary: "List onboarding step."
      operationId: "Mezon_ListOnboardingStep"
      parameters:
      - name: "clanId"
        in: "query"
        description: "clan id."
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListOnboardingStepResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/onboardingsteps/{clanId}:
    put:
      tags:
      - "Mezon"
      summary: "Update onboarding step."
      operationId: "Mezon_UpdateOnboardingStepByClanId"
      parameters:
      - name: "clanId"
        in: "path"
        description: "clan id."
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateOnboardingStepByClanIdBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/ossrs/callback:
    post:
      tags:
      - "Mezon"
      summary: "Ossrs http callback."
      operationId: "Mezon_StreamingServerCallback"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiOssrsHttpCallbackRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiOssrsHttpCallbackResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/permissionrolechannel/set:
    post:
      tags:
      - "Mezon"
      summary: "set permission role channel."
      operationId: "Mezon_SetRoleChannelPermission"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiUpdateRoleChannelRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/permissions:
    get:
      tags:
      - "Mezon"
      summary: "Get permission list"
      operationId: "Mezon_GetListPermission"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiPermissionList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/permissions/roles/channels/users:
    get:
      tags:
      - "Mezon"
      summary: "GetPermissionByRoleIdChannelId"
      operationId: "Mezon_GetPermissionByRoleIdChannelId"
      parameters:
      - name: "roleId"
        in: "query"
        description: "role id"
        required: false
        type: "string"
        x-exportParamName: "RoleId"
        x-optionalDataType: "String"
      - name: "channelId"
        in: "query"
        description: "channel id"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      - name: "userId"
        in: "query"
        description: "user id"
        required: false
        type: "string"
        x-exportParamName: "UserId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiPermissionRoleChannelListEventResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/pinmessage/delete:
    delete:
      tags:
      - "Mezon"
      operationId: "Mezon_DeletePinMessage"
      parameters:
      - name: "messageId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "MessageId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/pinmessage/get:
    get:
      tags:
      - "Mezon"
      operationId: "Mezon_GetPinMessagesList"
      parameters:
      - name: "messageId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "MessageId"
        x-optionalDataType: "String"
      - name: "channelId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      - name: "clanId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiPinMessagesList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/pinmessage/set:
    post:
      tags:
      - "Mezon"
      summary: "set notification user channel."
      operationId: "Mezon_CreatePinMessage"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiPinMessageRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChannelMessageHeader"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/ptt_channels/users:
    get:
      tags:
      - "Mezon"
      summary: "List all users in ptt channel."
      operationId: "Mezon_ListPTTChannelUsers"
      parameters:
      - name: "clanId"
        in: "query"
        description: "The clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "channelId"
        in: "query"
        description: "The channel ID to list from."
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      - name: "channelType"
        in: "query"
        description: "The channel type"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "ChannelType"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "state"
        in: "query"
        description: "The group user state to list."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "State"
        x-optionalDataType: "Int32"
      - name: "cursor"
        in: "query"
        description: "An optional next page cursor."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiPTTChannelUserList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/pubkey:
    get:
      tags:
      - "Mezon"
      summary: "get pubkey"
      operationId: "Mezon_GetPubKeys"
      parameters:
      - name: "userIds"
        in: "query"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "UserIds"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiGetPubKeysResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/pubkey/push:
    post:
      tags:
      - "Mezon"
      summary: "store pubkey for e2ee"
      operationId: "Mezon_PushPubKey"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiPushPubKeyRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/rolechannel/addrole:
    post:
      tags:
      - "Mezon"
      operationId: "Mezon_AddRolesChannelDesc"
      parameters:
      - in: "body"
        name: "body"
        description: "Add a role for channel."
        required: true
        schema:
          $ref: "#/definitions/apiAddRoleChannelDescRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/rolechannel/category/{newCategoryId}:
    patch:
      tags:
      - "Mezon"
      summary: "update the category of a channel"
      operationId: "Mezon_ChangeChannelCategory"
      parameters:
      - name: "newCategoryId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "NewCategoryId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonChangeChannelCategoryBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/rolechannel/delete:
    put:
      tags:
      - "Mezon"
      summary: "Update a role when Delete a role by ID."
      operationId: "Mezon_DeleteRoleChannelDesc"
      parameters:
      - in: "body"
        name: "body"
        description: "Delete a role the user has access to."
        required: true
        schema:
          $ref: "#/definitions/apiDeleteRoleRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/roles:
    get:
      tags:
      - "Mezon"
      summary: "ListRoles"
      operationId: "Mezon_ListRoles"
      parameters:
      - name: "clanId"
        in: "query"
        description: "clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "limit"
        required: false
        type: "string"
        x-exportParamName: "Limit"
        x-optionalDataType: "String"
      - name: "state"
        in: "query"
        description: "state"
        required: false
        type: "string"
        x-exportParamName: "State"
        x-optionalDataType: "String"
      - name: "cursor"
        in: "query"
        description: "cursor"
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRoleListEventResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "Mezon"
      summary: "Create a new role for clan."
      operationId: "Mezon_CreateRole"
      parameters:
      - in: "body"
        name: "body"
        description: "Create a role within clan."
        required: true
        schema:
          $ref: "#/definitions/apiCreateRoleRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRole"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/roles/{roleId}:
    put:
      tags:
      - "Mezon"
      summary: "Update fields in a given role."
      operationId: "Mezon_UpdateRole"
      parameters:
      - name: "roleId"
        in: "path"
        description: "The ID of the role to update."
        required: true
        type: "string"
        x-exportParamName: "RoleId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateRoleBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "Mezon"
      summary: "Delete a role by ID."
      operationId: "Mezon_DeleteRole"
      parameters:
      - name: "roleId"
        in: "path"
        description: "The id of a role."
        required: true
        type: "string"
        x-exportParamName: "RoleId"
      - name: "channelId"
        in: "query"
        description: "The id of a channel"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      - name: "clanId"
        in: "query"
        description: "clan_id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/roles/{roleId}/permissions:
    get:
      tags:
      - "Mezon"
      summary: "List role permissions"
      operationId: "Mezon_ListRolePermissions"
      parameters:
      - name: "roleId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RoleId"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiPermissionList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/roles/{roleId}/users:
    get:
      tags:
      - "Mezon"
      summary: "List role permissions"
      operationId: "Mezon_ListRoleUsers"
      parameters:
      - name: "roleId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "RoleId"
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "cursor"
        in: "query"
        description: "An optional next page cursor."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRoleUserList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/roleuserinclan/{clanId}:
    get:
      tags:
      - "Mezon"
      operationId: "Mezon_GetRoleOfUserInTheClan"
      parameters:
      - name: "clanId"
        in: "path"
        description: "clan_id."
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      - name: "channelId"
        in: "query"
        description: "channel_id"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRoleList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/rpc/{id}:
    get:
      tags:
      - "Mezon"
      summary: "Execute a Lua function on the server."
      operationId: "Mezon_RpcFunc2"
      parameters:
      - name: "id"
        in: "path"
        description: "The identifier of the function."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "payload"
        in: "query"
        description: "The payload of the function which must be a JSON object."
        required: false
        type: "string"
        x-exportParamName: "Payload"
        x-optionalDataType: "String"
      - name: "httpKey"
        in: "query"
        description: "The authentication key used when executed as a non-client HTTP\
          \ request."
        required: false
        type: "string"
        x-exportParamName: "HttpKey"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRpc"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BearerJwt: []
        HttpKeyAuth: []
    post:
      tags:
      - "Mezon"
      summary: "Execute a Lua function on the server."
      operationId: "Mezon_RpcFunc"
      parameters:
      - name: "id"
        in: "path"
        description: "The identifier of the function."
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "payload"
        description: "The payload of the function which must be a JSON object."
        required: true
        schema:
          type: "string"
        x-exportParamName: "Payload"
      - name: "httpKey"
        in: "query"
        description: "The authentication key used when executed as a non-client HTTP\
          \ request."
        required: false
        type: "string"
        x-exportParamName: "HttpKey"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRpc"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
      security:
      - BearerJwt: []
        HttpKeyAuth: []
  /v2/sendtoken:
    post:
      tags:
      - "Mezon"
      summary: "UpdateWallets"
      operationId: "Mezon_SendToken"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiTokenSentEvent"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/session/logout:
    post:
      tags:
      - "Mezon"
      summary: "Log out a session, invalidate a refresh token, or log out all sessions/refresh\
        \ tokens for a user."
      operationId: "Mezon_SessionLogout"
      parameters:
      - in: "body"
        name: "body"
        description: "Log out a session, invalidate a refresh token, or log out all\
          \ sessions/refresh tokens for a user."
        required: true
        schema:
          $ref: "#/definitions/apiSessionLogoutRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/sticker:
    post:
      tags:
      - "Mezon"
      summary: "Add a new sticker"
      operationId: "Mezon_AddClanSticker"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiClanStickerAddRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/sticker/{id}:
    delete:
      tags:
      - "Mezon"
      summary: "Delete a sticker by ID"
      operationId: "Mezon_DeleteClanStickerById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - name: "clanId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    patch:
      tags:
      - "Mezon"
      summary: "Update a sticker by ID"
      operationId: "Mezon_UpdateClanStickerById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateClanStickerByIdBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/stickers:
    get:
      tags:
      - "Mezon"
      summary: "get list sticker by user id"
      operationId: "Mezon_GetListStickersByUserId"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiStickerListedResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/streaming-channels:
    get:
      tags:
      - "Mezon"
      summary: "List streaming channels."
      operationId: "Mezon_ListStreamingChannels"
      parameters:
      - name: "clanId"
        in: "query"
        description: "clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiListStreamingChannelsResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "Mezon"
      summary: "Register streaming in channel ( for bot - get streaming key)"
      operationId: "Mezon_RegisterStreamingChannel"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiRegisterStreamingChannelRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiRegisterStreamingChannelResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/streaming-channels/users:
    get:
      tags:
      - "Mezon"
      summary: "List all users that are part of a channel."
      operationId: "Mezon_ListStreamingChannelUsers"
      parameters:
      - name: "clanId"
        in: "query"
        description: "The clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "channelId"
        in: "query"
        description: "The channel ID to list from."
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      - name: "channelType"
        in: "query"
        description: "The channel type"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "ChannelType"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "state"
        in: "query"
        description: "The group user state to list."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "State"
        x-optionalDataType: "Int32"
      - name: "cursor"
        in: "query"
        description: "An optional next page cursor."
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiStreamingChannelUserList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/systemmessages:
    get:
      tags:
      - "Mezon"
      summary: "Get the list of system messages."
      operationId: "Mezon_GetSystemMessagesList"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSystemMessagesList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    post:
      tags:
      - "Mezon"
      summary: "Create a system messages."
      operationId: "Mezon_CreateSystemMessage"
      parameters:
      - in: "body"
        name: "body"
        description: "Request to get system message by clan and channel IDs."
        required: true
        schema:
          $ref: "#/definitions/apiSystemMessageRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/systemmessages/{clanId}:
    get:
      tags:
      - "Mezon"
      summary: "Get details of a specific system messages."
      operationId: "Mezon_GetSystemMessageByClanId"
      parameters:
      - name: "clanId"
        in: "path"
        description: "Clan ID"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiSystemMessage"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    put:
      tags:
      - "Mezon"
      summary: "Update a system messages."
      operationId: "Mezon_UpdateSystemMessage"
      parameters:
      - name: "clanId"
        in: "path"
        description: "Clan ID"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateSystemMessageBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    delete:
      tags:
      - "Mezon"
      summary: "Delete a specific system messages."
      operationId: "Mezon_DeleteSystemMessage"
      parameters:
      - name: "clanId"
        in: "path"
        description: "Clan ID"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/thread/{channelId}:
    get:
      tags:
      - "Mezon"
      summary: "List user channels"
      operationId: "Mezon_ListThreadDescs"
      parameters:
      - name: "channelId"
        in: "path"
        description: "channel id"
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - name: "limit"
        in: "query"
        description: "Max number of records to return. Between 1 and 100."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "state"
        in: "query"
        description: "The channel state to list."
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "State"
        x-optionalDataType: "Int32"
      - name: "clanId"
        in: "query"
        description: "The clan of this channel"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "threadId"
        in: "query"
        description: "thread id"
        required: false
        type: "string"
        x-exportParamName: "ThreadId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiChannelDescList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/updatecategory/{clanId}:
    put:
      tags:
      - "Mezon"
      summary: "Update fields in a given category."
      operationId: "Mezon_UpdateCategory"
      parameters:
      - name: "clanId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateCategoryBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/updatechannelprivate:
    put:
      tags:
      - "Mezon"
      summary: "Update channel private."
      operationId: "Mezon_UpdateChannelPrivate"
      parameters:
      - in: "body"
        name: "body"
        description: "Update fields in a given channel."
        required: true
        schema:
          $ref: "#/definitions/apiChangeChannelPrivateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/updateclanprofile/{clanId}:
    put:
      tags:
      - "Mezon"
      operationId: "Mezon_UpdateUserProfileByClan"
      parameters:
      - name: "clanId"
        in: "path"
        description: "id clanc"
        required: true
        type: "string"
        x-exportParamName: "ClanId"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateUserProfileByClanBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/uploadattachmentfile:
    post:
      tags:
      - "Mezon"
      summary: "Upload attachment"
      operationId: "Mezon_UploadAttachmentFile"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiUploadAttachmentRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiUploadAttachment"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/user:
    get:
      tags:
      - "Mezon"
      summary: "Fetch zero or more users by ID and/or username."
      operationId: "Mezon_GetUsers"
      parameters:
      - name: "ids"
        in: "query"
        description: "The account id of a user."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Ids"
      - name: "usernames"
        in: "query"
        description: "The account username of a user."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "Usernames"
      - name: "facebookIds"
        in: "query"
        description: "The Facebook ID of a user."
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        x-exportParamName: "FacebookIds"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiUsers"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/user/update:
    put:
      tags:
      - "Mezon"
      operationId: "Mezon_UpdateUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Fetch a batch of zero or more users from the server."
        required: true
        schema:
          $ref: "#/definitions/apiUpdateUsersRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/users/clans:
    get:
      tags:
      - "Mezon"
      summary: "ListUserClansByUserId"
      operationId: "Mezon_ListUserClansByUserId"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiAllUserClans"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/users/clans/channels:
    get:
      tags:
      - "Mezon"
      summary: "ListUserPermissionInChannel"
      operationId: "Mezon_ListUserPermissionInChannel"
      parameters:
      - name: "clanId"
        in: "query"
        description: "clan id"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      - name: "channelId"
        in: "query"
        description: "channel id"
        required: false
        type: "string"
        x-exportParamName: "ChannelId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiUserPermissionInChannelListResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/userstatus:
    get:
      tags:
      - "Mezon"
      summary: "Get user status"
      operationId: "Mezon_GetUserStatus"
      parameters: []
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiUserStatus"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
    put:
      tags:
      - "Mezon"
      summary: "Update user status"
      operationId: "Mezon_UpdateUserStatus"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiUserStatusUpdate"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/walletledger:
    get:
      tags:
      - "Mezon"
      summary: "Get user status"
      operationId: "Mezon_ListWalletLedger"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "cursor"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "Cursor"
        x-optionalDataType: "String"
      - name: "transactionId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "TransactionId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiWalletLedgerList"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/webhooks/generate:
    post:
      tags:
      - "Mezon"
      summary: "create webhook"
      operationId: "Mezon_GenerateWebhook"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiWebhookCreateRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiWebhookGenerateResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/webhooks/update/{id}:
    patch:
      tags:
      - "Mezon"
      summary: "update webhook name by id"
      operationId: "Mezon_UpdateWebhookById"
      parameters:
      - name: "id"
        in: "path"
        description: "webhook Id"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonUpdateWebhookByIdBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/webhooks/{channelId}:
    get:
      tags:
      - "Mezon"
      summary: "list webhook belong to the channel"
      operationId: "Mezon_ListWebhookByChannelId"
      parameters:
      - name: "channelId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - name: "clanId"
        in: "query"
        required: false
        type: "string"
        x-exportParamName: "ClanId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "A successful response."
          schema:
            $ref: "#/definitions/apiWebhookListResponse"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/webhooks/{channelId}/{token}:
    post:
      tags:
      - "Mezon"
      summary: "webhook"
      operationId: "Mezon_HandlerWebhook"
      parameters:
      - name: "channelId"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "ChannelId"
      - name: "token"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Token"
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/webhooks/{id}:
    patch:
      tags:
      - "Mezon"
      summary: "disabled webhook"
      operationId: "Mezon_DeleteWebhookById"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
        x-exportParamName: "Id"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/MezonDeleteWebhookByIdBody"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
  /v2/withdrawtoken:
    post:
      tags:
      - "Mezon"
      summary: "WithdrawToken"
      operationId: "Mezon_WithdrawToken"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/apiWithdrawTokenRequest"
        x-exportParamName: "Body"
      responses:
        200:
          description: "A successful response."
          schema:
            type: "object"
        default:
          description: "An unexpected error response."
          schema:
            $ref: "#/definitions/rpcStatus"
securityDefinitions:
  BasicAuth:
    type: "basic"
  HttpKeyAuth:
    type: "apiKey"
    name: "http_key"
    in: "header"
definitions:
  ChannelUserListChannelUser:
    type: "object"
    properties:
      userId:
        type: "string"
        description: "User."
      roleId:
        type: "array"
        description: "Their relationship to the role."
        items:
          type: "string"
      id:
        type: "string"
        title: "Id"
      threadId:
        type: "string"
        title: "thread id"
      clanNick:
        type: "string"
        title: "clan nick name"
      clanAvatar:
        type: "string"
        title: "clan avatar"
      clanId:
        type: "string"
        title: "clan Id"
    description: "A single user-role pair."
    example:
      threadId: "threadId"
      clanAvatar: "clanAvatar"
      roleId:
      - "roleId"
      - "roleId"
      clanNick: "clanNick"
      id: "id"
      userId: "userId"
      clanId: "clanId"
  ClanUserListClanUser:
    type: "object"
    properties:
      user:
        description: "User."
        $ref: "#/definitions/apiUser"
      roleId:
        type: "array"
        description: "Their relationship to the role."
        items:
          type: "string"
      clanNick:
        type: "string"
        description: "from the `nick_name` field in the `clan_desc_profile` table."
      clanAvatar:
        type: "string"
        description: "from the `avatar_url` field in the `clan_desc_profile` table."
      clanId:
        type: "string"
    description: "A single user-role pair."
    example:
      clanAvatar: "clanAvatar"
      roleId:
      - "roleId"
      - "roleId"
      clanNick: "clanNick"
      user:
        googleId: "googleId"
        metadata: "metadata"
        avatarUrl: "avatarUrl"
        joinTime: "2000-01-23T04:56:07.000+00:00"
        displayName: "displayName"
        timezone: "timezone"
        facebookId: "facebookId"
        edgeCount: 0
        langTag: "langTag"
        updateTime: "2000-01-23T04:56:07.000+00:00"
        appleId: "appleId"
        aboutMe: "aboutMe"
        steamId: "steamId"
        gamecenterId: "gamecenterId"
        createTime: "2000-01-23T04:56:07.000+00:00"
        dob: "2000-01-23T04:56:07.000+00:00"
        online: true
        location: "location"
        id: "id"
        isMobile: true
        username: "username"
      clanId: "clanId"
  GetPubKeysResponseUserPubKey:
    type: "object"
    properties:
      userId:
        type: "string"
      PK:
        $ref: "#/definitions/apiPubKey"
    example:
      PK:
        encr: "encr"
        sign: "sign"
      userId: "userId"
  MezonChangeChannelCategoryBody:
    type: "object"
    properties:
      channelId:
        type: "string"
    example:
      channelId: "channelId"
  MezonDeleteWebhookByIdBody:
    type: "object"
    properties:
      clanId:
        type: "string"
      channelId:
        type: "string"
    example:
      clanId: "clanId"
      channelId: "channelId"
  MezonSetChanEncryptionMethodBody:
    type: "object"
    properties:
      method:
        type: "string"
    example:
      method: "method"
  MezonUpdateAppBody:
    type: "object"
    properties:
      appname:
        type: "string"
        description: "Username."
      metadata:
        type: "string"
        description: "Metadata."
      applogo:
        type: "string"
        description: "Avatar URL."
      token:
        type: "string"
        description: "Token."
      about:
        type: "string"
        description: "about the app."
    description: "Update app information."
    example:
      metadata: "metadata"
      appname: "appname"
      applogo: "applogo"
      about: "about"
      token: "token"
  MezonUpdateCategoryBody:
    type: "object"
    properties:
      categoryId:
        type: "string"
        description: "The ID of the group to update."
      categoryName:
        type: "string"
    example:
      categoryName: "categoryName"
      categoryId: "categoryId"
  MezonUpdateChannelDescBody:
    type: "object"
    properties:
      channelLabel:
        type: "string"
        title: "The channel lable"
      categoryId:
        type: "string"
        title: "The category of channel"
      appUrl:
        type: "string"
        title: "app url for channel type app"
      topic:
        type: "string"
        title: "topic"
      ageRestricted:
        type: "integer"
        format: "int32"
      e2ee:
        type: "integer"
        format: "int32"
    description: "Update fields in a given channel."
    example:
      ageRestricted: 0
      e2ee: 6
      channelLabel: "channelLabel"
      topic: "topic"
      appUrl: "appUrl"
      categoryId: "categoryId"
  MezonUpdateClanDescBody:
    type: "object"
    properties:
      clanName:
        type: "string"
        title: "Clan name"
      logo:
        type: "string"
        title: "Clan logo"
      banner:
        type: "string"
        title: "Clan banner"
      status:
        type: "integer"
        format: "int32"
        title: "Clan status"
      isOnboarding:
        type: "boolean"
        description: "Is onboarding."
    title: "Update Clan information"
    example:
      isOnboarding: true
      logo: "logo"
      banner: "banner"
      clanName: "clanName"
      status: 0
  MezonUpdateClanDescProfileBody:
    type: "object"
    properties:
      nickName:
        type: "string"
        title: "Clan nick name"
      profileBanner:
        type: "string"
        title: "Clan profile banner"
      profileTheme:
        type: "string"
        title: "Clan profile theme"
      avatarUrl:
        type: "string"
        title: "Clan profile avatar"
    title: "Update Clan profile information"
    example:
      profileTheme: "profileTheme"
      avatarUrl: "avatarUrl"
      nickName: "nickName"
      profileBanner: "profileBanner"
  MezonUpdateClanEmojiByIdBody:
    type: "object"
    properties:
      shortname:
        type: "string"
      clanId:
        type: "string"
    example:
      shortname: "shortname"
      clanId: "clanId"
  MezonUpdateClanStickerByIdBody:
    type: "object"
    properties:
      source:
        type: "string"
      shortname:
        type: "string"
      category:
        type: "string"
      clanId:
        type: "string"
    example:
      source: "source"
      category: "category"
      shortname: "shortname"
      clanId: "clanId"
  MezonUpdateClanWebhookByIdBody:
    type: "object"
    properties:
      clanId:
        type: "string"
        description: "clan id."
      webhookName:
        type: "string"
        description: "webhook name."
      avatar:
        type: "string"
        description: "avatar."
      resetToken:
        type: "boolean"
        description: "reset token."
    example:
      webhookName: "webhookName"
      avatar: "avatar"
      resetToken: true
      clanId: "clanId"
  MezonUpdateEventBody:
    type: "object"
    properties:
      title:
        type: "string"
      logo:
        type: "string"
      description:
        type: "string"
      channelId:
        type: "string"
      address:
        type: "string"
      startTime:
        type: "string"
        format: "date-time"
      endTime:
        type: "string"
        format: "date-time"
      clanId:
        type: "string"
    description: "update a event within clan."
    example:
      address: "address"
      logo: "logo"
      description: "description"
      startTime: "2000-01-23T04:56:07.000+00:00"
      endTime: "2000-01-23T04:56:07.000+00:00"
      title: "title"
      channelId: "channelId"
      clanId: "clanId"
  MezonUpdateOnboardingBody:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "clan id"
      taskType:
        type: "integer"
        format: "int32"
        title: "task type"
      channelId:
        type: "string"
        title: "channel id"
      title:
        type: "string"
        title: "title"
      content:
        type: "string"
        title: "content"
      imageUrl:
        type: "string"
        title: "image"
      answers:
        type: "array"
        title: "answers"
        items:
          $ref: "#/definitions/apiOnboardingAnswer"
    example:
      taskType: 0
      imageUrl: "imageUrl"
      answers:
      - emoji: "emoji"
        imageUrl: "imageUrl"
        description: "description"
        title: "title"
      - emoji: "emoji"
        imageUrl: "imageUrl"
        description: "description"
        title: "title"
      title: "title"
      clanId: "clanId"
      channelId: "channelId"
      content: "content"
  MezonUpdateOnboardingStepByClanIdBody:
    type: "object"
    properties:
      onboardingStep:
        type: "integer"
        format: "int32"
        description: "onboarding step."
    example:
      onboardingStep: 0
  MezonUpdateRoleBody:
    type: "object"
    properties:
      title:
        type: "string"
      color:
        type: "string"
      roleIcon:
        type: "string"
      description:
        type: "string"
      displayOnline:
        type: "integer"
        format: "int32"
      allowMention:
        type: "integer"
        format: "int32"
      addUserIds:
        type: "array"
        description: "The users to add."
        items:
          type: "string"
      activePermissionIds:
        type: "array"
        description: "The permissions to add."
        items:
          type: "string"
      removeUserIds:
        type: "array"
        description: "The users to remove."
        items:
          type: "string"
      removePermissionIds:
        type: "array"
        description: "The permissions to remove."
        items:
          type: "string"
      clanId:
        type: "string"
        title: "the clan id"
      maxPermissionId:
        type: "string"
        title: "id of permission which has max level permission"
    description: "Update fields in a given role."
    example:
      activePermissionIds:
      - "activePermissionIds"
      - "activePermissionIds"
      color: "color"
      removeUserIds:
      - "removeUserIds"
      - "removeUserIds"
      roleIcon: "roleIcon"
      description: "description"
      maxPermissionId: "maxPermissionId"
      addUserIds:
      - "addUserIds"
      - "addUserIds"
      title: "title"
      allowMention: 6
      displayOnline: 0
      clanId: "clanId"
      removePermissionIds:
      - "removePermissionIds"
      - "removePermissionIds"
  MezonUpdateSystemMessageBody:
    type: "object"
    properties:
      channelId:
        type: "string"
        title: "Channel ID"
      welcomeRandom:
        type: "string"
        title: "Welcome random"
      welcomeSticker:
        type: "string"
        title: "Welcome sticker"
      boostMessage:
        type: "string"
        title: "Boost message"
      setupTips:
        type: "string"
        title: "Setup tips"
    description: "Request to get system message by clan and channel IDs."
    example:
      setupTips: "setupTips"
      welcomeSticker: "welcomeSticker"
      boostMessage: "boostMessage"
      welcomeRandom: "welcomeRandom"
      channelId: "channelId"
  MezonUpdateUserProfileByClanBody:
    type: "object"
    properties:
      nickName:
        type: "string"
        title: "nick_name new"
      avatar:
        type: "string"
        title: "avatar"
    title: "update nickname user by clan requset"
    example:
      nickName: "nickName"
      avatar: "avatar"
  MezonUpdateWebhookByIdBody:
    type: "object"
    properties:
      webhookName:
        type: "string"
        title: "webhook name"
      channelIdUpdate:
        type: "string"
        title: "change channel_id of webhook"
      avatar:
        type: "string"
        title: "webhook avatar"
      channelId:
        type: "string"
        title: "channel id"
      clanId:
        type: "string"
        title: "clan id"
    example:
      channelIdUpdate: "channelIdUpdate"
      webhookName: "webhookName"
      avatar: "avatar"
      channelId: "channelId"
      clanId: "clanId"
  RoleUserListRoleUser:
    type: "object"
    properties:
      id:
        type: "string"
        description: "The id of the user's account."
      username:
        type: "string"
        description: "The username of the user's account."
      displayName:
        type: "string"
        description: "The display name of the user."
      avatarUrl:
        type: "string"
        description: "A URL for an avatar image."
      langTag:
        type: "string"
        description: "The language expected to be a tag which follows the BCP-47 spec."
      location:
        type: "string"
        description: "The location set by the user."
      online:
        type: "boolean"
        description: "The timezone set by the user."
    description: "A single user-role pair."
    example:
      avatarUrl: "avatarUrl"
      displayName: "displayName"
      langTag: "langTag"
      online: true
      location: "location"
      id: "id"
      username: "username"
  apiAccount:
    type: "object"
    properties:
      user:
        description: "The user object."
        $ref: "#/definitions/apiUser"
      wallet:
        type: "string"
        description: "The user's wallet data."
      email:
        type: "string"
        description: "The email address of the user."
      devices:
        type: "array"
        description: "The devices which belong to the user's account."
        items:
          $ref: "#/definitions/apiAccountDevice"
      customId:
        type: "string"
        description: "The custom id in the user's account."
      verifyTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time (for gRPC clients) or ISO string (for REST clients)\
          \ when the user's email was verified."
      disableTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time (for gRPC clients) or ISO string (for REST clients)\
          \ when the user's account was disabled/banned."
      logo:
        type: "string"
        title: "Logo url"
      splashScreen:
        type: "string"
        title: "Splash screen url"
    description: "A user with additional account details. Always the current user."
    example:
      wallet: "wallet"
      devices:
      - id: "id"
        vars:
          key: "vars"
      - id: "id"
        vars:
          key: "vars"
      logo: "logo"
      verifyTime: "2000-01-23T04:56:07.000+00:00"
      splashScreen: "splashScreen"
      user:
        googleId: "googleId"
        metadata: "metadata"
        avatarUrl: "avatarUrl"
        joinTime: "2000-01-23T04:56:07.000+00:00"
        displayName: "displayName"
        timezone: "timezone"
        facebookId: "facebookId"
        edgeCount: 0
        langTag: "langTag"
        updateTime: "2000-01-23T04:56:07.000+00:00"
        appleId: "appleId"
        aboutMe: "aboutMe"
        steamId: "steamId"
        gamecenterId: "gamecenterId"
        createTime: "2000-01-23T04:56:07.000+00:00"
        dob: "2000-01-23T04:56:07.000+00:00"
        online: true
        location: "location"
        id: "id"
        isMobile: true
        username: "username"
      customId: "customId"
      email: "email"
      disableTime: "2000-01-23T04:56:07.000+00:00"
  apiAccountApp:
    type: "object"
    properties:
      appid:
        type: "string"
        title: "The app id"
      appname:
        type: "string"
        title: "the app name"
      token:
        type: "string"
        description: "The account token when create apps to access their profile API."
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
    description: "Send a app token to the server. Used with authenticate/link/unlink."
  apiAccountApple:
    type: "object"
    properties:
      token:
        type: "string"
        description: "The ID token received from Apple to validate."
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
    description: "Send a Apple Sign In token to the server. Used with authenticate/link/unlink."
  apiAccountCustom:
    type: "object"
    properties:
      id:
        type: "string"
        description: "A custom identifier."
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
    description: "Send a custom ID to the server. Used with authenticate/link/unlink."
  apiAccountDevice:
    type: "object"
    properties:
      id:
        type: "string"
        description: "A device identifier. Should be obtained by a platform-specific\
          \ device API."
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
    description: "Send a device to the server. Used with authenticate/link/unlink\
      \ and user."
    example:
      id: "id"
      vars:
        key: "vars"
  apiAccountEmail:
    type: "object"
    properties:
      email:
        type: "string"
        description: "A valid RFC-5322 email address."
      password:
        type: "string"
        description: "A password for the user account.\n\nIgnored with unlink operations."
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
    description: "Send an email with password to the server. Used with authenticate/link/unlink."
  apiAccountFacebook:
    type: "object"
    properties:
      token:
        type: "string"
        description: "The OAuth token received from Facebook to access their profile\
          \ API."
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
    description: "Send a Facebook token to the server. Used with authenticate/link/unlink."
  apiAccountFacebookInstantGame:
    type: "object"
    properties:
      signedPlayerInfo:
        type: "string"
        title: "The OAuth token received from a Facebook Instant Game that may be\
          \ decoded with the Application Secret (must be available with the mezon\
          \ configuration)"
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
    description: "Send a Facebook Instant Game token to the server. Used with authenticate/link/unlink."
  apiAccountGameCenter:
    type: "object"
    properties:
      playerId:
        type: "string"
        description: "Player ID (generated by GameCenter)."
      bundleId:
        type: "string"
        description: "Bundle ID (generated by GameCenter)."
      timestampSeconds:
        type: "string"
        format: "int64"
        description: "Time since UNIX epoch when the signature was created."
      salt:
        type: "string"
        description: "A random \"NSString\" used to compute the hash and keep it randomized."
      signature:
        type: "string"
        description: "The verification signature data generated."
      publicKeyUrl:
        type: "string"
        description: "The URL for the public encryption key."
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
    description: "Send Apple's Game Center account credentials to the server. Used\
      \ with authenticate/link/unlink.\n\nhttps://developer.apple.com/documentation/gamekit/gklocalplayer/1515407-generateidentityverificationsign"
  apiAccountGoogle:
    type: "object"
    properties:
      token:
        type: "string"
        description: "The OAuth token received from Google to access their profile\
          \ API."
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
    description: "Send a Google token to the server. Used with authenticate/link/unlink."
  apiAccountSteam:
    type: "object"
    properties:
      token:
        type: "string"
        description: "The account token received from Steam to access their profile\
          \ API."
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
    description: "Send a Steam token to the server. Used with authenticate/link/unlink."
  apiAddAppRequest:
    type: "object"
    properties:
      appname:
        type: "string"
        description: "The appname."
      token:
        type: "string"
        description: "The password."
      creatorId:
        type: "string"
        description: "Creator of the app."
      role:
        type: "integer"
        format: "int32"
        description: "Role of this app."
      isShadow:
        type: "boolean"
        description: "Is shadow."
    title: "Add a new app"
  apiAddFavoriteChannelRequest:
    type: "object"
    properties:
      channelId:
        type: "string"
      clanId:
        type: "string"
  apiAddFavoriteChannelResponse:
    type: "object"
    properties:
      channelId:
        type: "string"
    example:
      channelId: "channelId"
  apiAddRoleChannelDescRequest:
    type: "object"
    properties:
      roleIds:
        type: "array"
        title: "This is the role that needs to be added to the channel"
        items:
          type: "string"
      channelId:
        type: "string"
        title: "This is a channel that needs more roles"
    description: "Add a role for channel."
  apiAllUserClans:
    type: "object"
    properties:
      users:
        type: "array"
        items:
          $ref: "#/definitions/apiUser"
    example:
      users:
      - googleId: "googleId"
        metadata: "metadata"
        avatarUrl: "avatarUrl"
        joinTime: "2000-01-23T04:56:07.000+00:00"
        displayName: "displayName"
        timezone: "timezone"
        facebookId: "facebookId"
        edgeCount: 0
        langTag: "langTag"
        updateTime: "2000-01-23T04:56:07.000+00:00"
        appleId: "appleId"
        aboutMe: "aboutMe"
        steamId: "steamId"
        gamecenterId: "gamecenterId"
        createTime: "2000-01-23T04:56:07.000+00:00"
        dob: "2000-01-23T04:56:07.000+00:00"
        online: true
        location: "location"
        id: "id"
        isMobile: true
        username: "username"
      - googleId: "googleId"
        metadata: "metadata"
        avatarUrl: "avatarUrl"
        joinTime: "2000-01-23T04:56:07.000+00:00"
        displayName: "displayName"
        timezone: "timezone"
        facebookId: "facebookId"
        edgeCount: 0
        langTag: "langTag"
        updateTime: "2000-01-23T04:56:07.000+00:00"
        appleId: "appleId"
        aboutMe: "aboutMe"
        steamId: "steamId"
        gamecenterId: "gamecenterId"
        createTime: "2000-01-23T04:56:07.000+00:00"
        dob: "2000-01-23T04:56:07.000+00:00"
        online: true
        location: "location"
        id: "id"
        isMobile: true
        username: "username"
  apiAllUsersAddChannelResponse:
    type: "object"
    properties:
      channelId:
        type: "string"
      userIds:
        type: "array"
        items:
          type: "string"
      limit:
        type: "integer"
        format: "int32"
    example:
      userIds:
      - "userIds"
      - "userIds"
      limit: 0
      channelId: "channelId"
  apiApp:
    type: "object"
    properties:
      id:
        type: "string"
        title: "app id"
      appname:
        type: "string"
        title: "appname"
      creatorId:
        type: "string"
        title: "creator_id"
      applogo:
        type: "string"
        title: "logo"
      isShadow:
        type: "boolean"
        title: "status online"
      disableTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time when the app was disabled."
      token:
        type: "string"
        title: "string token"
      role:
        type: "integer"
        format: "int32"
        title: "role"
      about:
        type: "string"
        title: "about"
    description: "App information."
    example:
      role: 0
      appname: "appname"
      applogo: "applogo"
      creatorId: "creatorId"
      about: "about"
      id: "id"
      isShadow: true
      disableTime: "2000-01-23T04:56:07.000+00:00"
      token: "token"
  apiAppList:
    type: "object"
    properties:
      apps:
        type: "array"
        description: "A list of apps."
        items:
          $ref: "#/definitions/apiApp"
      totalCount:
        type: "integer"
        format: "int32"
        description: "Approximate total number of apps."
      nextCursor:
        type: "string"
        description: "Next cursor."
    description: "A list of apps."
    example:
      nextCursor: "nextCursor"
      totalCount: 6
      apps:
      - role: 0
        appname: "appname"
        applogo: "applogo"
        creatorId: "creatorId"
        about: "about"
        id: "id"
        isShadow: true
        disableTime: "2000-01-23T04:56:07.000+00:00"
        token: "token"
      - role: 0
        appname: "appname"
        applogo: "applogo"
        creatorId: "creatorId"
        about: "about"
        id: "id"
        isShadow: true
        disableTime: "2000-01-23T04:56:07.000+00:00"
        token: "token"
  apiAuditLog:
    type: "object"
    properties:
      id:
        type: "string"
      userId:
        type: "string"
      clanId:
        type: "string"
      actionLog:
        type: "string"
      entityName:
        type: "string"
      entityId:
        type: "string"
      details:
        type: "string"
      timeLog:
        type: "string"
        format: "date-time"
    example:
      entityName: "entityName"
      timeLog: "2000-01-23T04:56:07.000+00:00"
      entityId: "entityId"
      details: "details"
      id: "id"
      userId: "userId"
      clanId: "clanId"
      actionLog: "actionLog"
  apiAuthenticateRequest:
    type: "object"
    properties:
      account:
        description: "The App account details."
        $ref: "#/definitions/apiAccountApp"
    description: "Authenticate against the server with a device ID."
  apiCategoryDesc:
    type: "object"
    properties:
      creatorId:
        type: "string"
        title: "Category creator"
      clanId:
        type: "string"
        title: "the Clan that category belong to"
      categoryName:
        type: "string"
        title: "Category name"
      categoryId:
        type: "string"
      categoryOrder:
        type: "integer"
        format: "int32"
    title: "Category to group the channel"
    example:
      categoryOrder: 0
      creatorId: "creatorId"
      categoryName: "categoryName"
      clanId: "clanId"
      categoryId: "categoryId"
  apiCategoryDescList:
    type: "object"
    properties:
      categorydesc:
        type: "array"
        description: "A list of channel."
        items:
          $ref: "#/definitions/apiCategoryDesc"
    title: "A list of clan"
    example:
      categorydesc:
      - categoryOrder: 0
        creatorId: "creatorId"
        categoryName: "categoryName"
        clanId: "clanId"
        categoryId: "categoryId"
      - categoryOrder: 0
        creatorId: "creatorId"
        categoryName: "categoryName"
        clanId: "clanId"
        categoryId: "categoryId"
  apiCategoryOrderUpdate:
    type: "object"
    properties:
      categoryId:
        type: "string"
      order:
        type: "integer"
        format: "int32"
  apiChanEncryptionMethod:
    type: "object"
    properties:
      method:
        type: "string"
      channelId:
        type: "string"
    example:
      method: "method"
      channelId: "channelId"
  apiChangeChannelPrivateRequest:
    type: "object"
    properties:
      channelId:
        type: "string"
        description: "The ID of the channel to update."
      channelPrivate:
        type: "integer"
        format: "int32"
        title: "The channel private"
      userIds:
        type: "array"
        description: "The users to add."
        items:
          type: "string"
      roleIds:
        type: "array"
        title: "This is the role that needs to be added to the channel"
        items:
          type: "string"
    description: "Update fields in a given channel."
  apiChannelAppResponse:
    type: "object"
    properties:
      id:
        type: "string"
        title: "id"
      clanId:
        type: "string"
        title: "clan id"
      channelId:
        type: "string"
        title: "channel id"
      appId:
        type: "string"
        title: "app id"
      url:
        type: "string"
        title: "app url"
    example:
      appId: "appId"
      id: "id"
      clanId: "clanId"
      channelId: "channelId"
      url: "url"
  apiChannelAttachment:
    type: "object"
    properties:
      id:
        type: "string"
        title: "url attachment"
      filename:
        type: "string"
        title: "file name"
      filetype:
        type: "string"
        title: "filetype"
      filesize:
        type: "string"
        title: "size"
      url:
        type: "string"
        title: "url"
      uploader:
        type: "string"
        title: "uploader"
      createTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time (for gRPC clients) or ISO string (for REST clients)\
          \ when the group was created."
    title: "channel attachment"
    example:
      filetype: "filetype"
      filename: "filename"
      createTime: "2000-01-23T04:56:07.000+00:00"
      uploader: "uploader"
      id: "id"
      filesize: "filesize"
      url: "url"
  apiChannelAttachmentList:
    type: "object"
    properties:
      attachments:
        type: "array"
        title: "list attachment"
        items:
          $ref: "#/definitions/apiChannelAttachment"
    title: "channel attachment list"
    example:
      attachments:
      - filetype: "filetype"
        filename: "filename"
        createTime: "2000-01-23T04:56:07.000+00:00"
        uploader: "uploader"
        id: "id"
        filesize: "filesize"
        url: "url"
      - filetype: "filetype"
        filename: "filename"
        createTime: "2000-01-23T04:56:07.000+00:00"
        uploader: "uploader"
        id: "id"
        filesize: "filesize"
        url: "url"
  apiChannelCanvasDetailResponse:
    type: "object"
    properties:
      id:
        type: "string"
        title: "id"
      title:
        type: "string"
        title: "title"
      content:
        type: "string"
        title: "content"
      creatorId:
        type: "string"
        title: "creator"
      editorId:
        type: "string"
        title: "editor"
      isDefault:
        type: "boolean"
        title: "is default"
    example:
      editorId: "editorId"
      isDefault: true
      creatorId: "creatorId"
      id: "id"
      title: "title"
      content: "content"
  apiChannelCanvasItem:
    type: "object"
    properties:
      id:
        type: "string"
        title: "id"
      title:
        type: "string"
        title: "title"
      isDefault:
        type: "boolean"
        title: "is default"
      content:
        type: "string"
        title: "content"
      creatorId:
        type: "string"
        title: "creator"
    example:
      isDefault: true
      creatorId: "creatorId"
      id: "id"
      title: "title"
      content: "content"
  apiChannelCanvasListResponse:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "clan id"
      channelId:
        type: "string"
        title: "channel id"
      channelCanvases:
        type: "array"
        title: "channel doc item"
        items:
          $ref: "#/definitions/apiChannelCanvasItem"
    example:
      channelCanvases:
      - isDefault: true
        creatorId: "creatorId"
        id: "id"
        title: "title"
        content: "content"
      - isDefault: true
        creatorId: "creatorId"
        id: "id"
        title: "title"
        content: "content"
      clanId: "clanId"
      channelId: "channelId"
  apiChannelDescList:
    type: "object"
    properties:
      channeldesc:
        type: "array"
        description: "A list of channel."
        items:
          $ref: "#/definitions/apiChannelDescription"
      nextCursor:
        type: "string"
        description: "The cursor to send when retrieving the next page, if any."
      prevCursor:
        type: "string"
        description: "The cursor to send when retrieving the previous page, if any."
      cacheableCursor:
        type: "string"
        description: "Cacheable cursor to list newer channel description. Durable\
          \ and designed to be stored, unlike next/prev cursors."
    description: "A list of channel description, usually a result of a list operation."
    example:
      nextCursor: "nextCursor"
      prevCursor: "prevCursor"
      cacheableCursor: "cacheableCursor"
      channeldesc:
      - parrentId: "parrentId"
        metadata:
        - "metadata"
        - "metadata"
        isMute: true
        creatorId: "creatorId"
        creatorName: "creatorName"
        isOnline:
        - true
        - true
        type: 0
        categoryName: "categoryName"
        aboutMe:
        - "aboutMe"
        - "aboutMe"
        meetingCode: "meetingCode"
        updateTimeSeconds: 2
        usernames: "usernames"
        channelPrivate: 6
        clanId: "clanId"
        channelId: "channelId"
        countMessUnread: 1
        ageRestricted: 7
        e2ee: 9
        channelLabel: "channelLabel"
        lastPinMessage: "lastPinMessage"
        active: 5
        createTimeSeconds: 5
        appUrl: "appUrl"
        userId:
        - "userId"
        - "userId"
        lastSeenMessage:
          senderId: "senderId"
          reaction: "reaction"
          attachment: "attachment"
          referece: "referece"
          id: "id"
          content: "content"
          timestampSeconds: 5
          mention: "mention"
        clanName: "clanName"
        lastSentMessage:
          senderId: "senderId"
          reaction: "reaction"
          attachment: "attachment"
          referece: "referece"
          id: "id"
          content: "content"
          timestampSeconds: 5
          mention: "mention"
        channelAvatar:
        - "channelAvatar"
        - "channelAvatar"
        topic: "topic"
        categoryId: "categoryId"
      - parrentId: "parrentId"
        metadata:
        - "metadata"
        - "metadata"
        isMute: true
        creatorId: "creatorId"
        creatorName: "creatorName"
        isOnline:
        - true
        - true
        type: 0
        categoryName: "categoryName"
        aboutMe:
        - "aboutMe"
        - "aboutMe"
        meetingCode: "meetingCode"
        updateTimeSeconds: 2
        usernames: "usernames"
        channelPrivate: 6
        clanId: "clanId"
        channelId: "channelId"
        countMessUnread: 1
        ageRestricted: 7
        e2ee: 9
        channelLabel: "channelLabel"
        lastPinMessage: "lastPinMessage"
        active: 5
        createTimeSeconds: 5
        appUrl: "appUrl"
        userId:
        - "userId"
        - "userId"
        lastSeenMessage:
          senderId: "senderId"
          reaction: "reaction"
          attachment: "attachment"
          referece: "referece"
          id: "id"
          content: "content"
          timestampSeconds: 5
          mention: "mention"
        clanName: "clanName"
        lastSentMessage:
          senderId: "senderId"
          reaction: "reaction"
          attachment: "attachment"
          referece: "referece"
          id: "id"
          content: "content"
          timestampSeconds: 5
          mention: "mention"
        channelAvatar:
        - "channelAvatar"
        - "channelAvatar"
        topic: "topic"
        categoryId: "categoryId"
  apiChannelDescription:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "The clan of this channel"
      parrentId:
        type: "string"
        description: "The parrent channel this message belongs to."
      channelId:
        type: "string"
        description: "The channel this message belongs to."
      categoryId:
        type: "string"
        title: "The category of channel"
      categoryName:
        type: "string"
        title: "The category name"
      type:
        type: "integer"
        format: "int32"
        description: "The channel type."
      creatorId:
        type: "string"
        description: "creator ID."
      channelLabel:
        type: "string"
        title: "The channel lable"
      channelPrivate:
        type: "integer"
        format: "int32"
        title: "The channel private"
      channelAvatar:
        type: "array"
        title: "The channel avatar"
        items:
          type: "string"
      userId:
        type: "array"
        title: "The user id"
        items:
          type: "string"
      lastSentMessage:
        title: "last message id"
        $ref: "#/definitions/apiChannelMessageHeader"
      lastSeenMessage:
        title: "last seen message id"
        $ref: "#/definitions/apiChannelMessageHeader"
      isOnline:
        type: "array"
        title: "status"
        items:
          type: "boolean"
      meetingCode:
        type: "string"
        title: "meeting code"
      countMessUnread:
        type: "integer"
        format: "int32"
        title: "count message unread"
      active:
        type: "integer"
        format: "int32"
        title: "active channel"
      lastPinMessage:
        type: "string"
        title: "last pin message"
      usernames:
        type: "string"
        title: "the usernames"
      creatorName:
        type: "string"
        title: "creator name"
      createTimeSeconds:
        type: "integer"
        format: "int64"
        title: "create time ms"
      updateTimeSeconds:
        type: "integer"
        format: "int64"
        title: "update time ms"
      metadata:
        type: "array"
        description: "Additional information stored as a JSON object."
        items:
          type: "string"
      aboutMe:
        type: "array"
        title: "about_me"
        items:
          type: "string"
      clanName:
        type: "string"
        title: "clan_name"
      appUrl:
        type: "string"
        title: "app url"
      isMute:
        type: "boolean"
        title: "channel all message"
      ageRestricted:
        type: "integer"
        format: "int32"
        title: "age restricted"
      topic:
        type: "string"
        title: "topic"
      e2ee:
        type: "integer"
        format: "int32"
        title: "e2ee"
    title: "Channel description record"
    example:
      parrentId: "parrentId"
      metadata:
      - "metadata"
      - "metadata"
      isMute: true
      creatorId: "creatorId"
      creatorName: "creatorName"
      isOnline:
      - true
      - true
      type: 0
      categoryName: "categoryName"
      aboutMe:
      - "aboutMe"
      - "aboutMe"
      meetingCode: "meetingCode"
      updateTimeSeconds: 2
      usernames: "usernames"
      channelPrivate: 6
      clanId: "clanId"
      channelId: "channelId"
      countMessUnread: 1
      ageRestricted: 7
      e2ee: 9
      channelLabel: "channelLabel"
      lastPinMessage: "lastPinMessage"
      active: 5
      createTimeSeconds: 5
      appUrl: "appUrl"
      userId:
      - "userId"
      - "userId"
      lastSeenMessage:
        senderId: "senderId"
        reaction: "reaction"
        attachment: "attachment"
        referece: "referece"
        id: "id"
        content: "content"
        timestampSeconds: 5
        mention: "mention"
      clanName: "clanName"
      lastSentMessage:
        senderId: "senderId"
        reaction: "reaction"
        attachment: "attachment"
        referece: "referece"
        id: "id"
        content: "content"
        timestampSeconds: 5
        mention: "mention"
      channelAvatar:
      - "channelAvatar"
      - "channelAvatar"
      topic: "topic"
      categoryId: "categoryId"
  apiChannelMessage:
    type: "object"
    properties:
      clanId:
        type: "string"
        description: "The clan this message belong to."
      channelId:
        type: "string"
        description: "The channel this message belongs to."
      messageId:
        type: "string"
        description: "The unique ID of this message."
      code:
        type: "integer"
        format: "int32"
        description: "The code representing a message type or category."
      senderId:
        type: "string"
        description: "Message sender, usually a user ID."
      username:
        type: "string"
        description: "The username of the message sender, if any."
      avatar:
        type: "string"
        title: "The avatar of user who send message"
      content:
        type: "string"
        description: "The content payload."
      createTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time (for gRPC clients) or ISO string (for REST clients)\
          \ when the message was created."
      updateTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time (for gRPC clients) or ISO string (for REST clients)\
          \ when the message was last updated."
      channelLabel:
        type: "string"
        description: "The name of the chat room, or an empty string if this message\
          \ was not sent through a chat room."
      clanLogo:
        type: "string"
        title: "The clan logo"
      categoryName:
        type: "string"
        title: "The category name"
      displayName:
        type: "string"
        title: "The clan nick name"
      clanNick:
        type: "string"
        title: "The clan nick name"
      clanAvatar:
        type: "string"
        title: "The clan avatar"
      reactions:
        type: "string"
        title: "Emoji reaction"
      mentions:
        type: "string"
        title: "Message mention"
      attachments:
        type: "string"
        title: "Message attachment"
      references:
        type: "string"
        title: "Message reference"
      referencedMessage:
        type: "string"
        title: "referenced message"
      createTimeSeconds:
        type: "integer"
        format: "int64"
        title: "create time in ms"
      updateTimeSeconds:
        type: "integer"
        format: "int64"
        title: "update time in ms"
      mode:
        type: "integer"
        format: "int32"
        title: "channel mode"
      hideEditted:
        type: "boolean"
        title: "hide editted"
      isPublic:
        type: "boolean"
        title: "is public"
    description: "A message sent on a channel."
    example:
      code: 0
      attachments: "attachments"
      references: "references"
      displayName: "displayName"
      clanLogo: "clanLogo"
      categoryName: "categoryName"
      content: "content"
      mode: 5
      senderId: "senderId"
      clanAvatar: "clanAvatar"
      updateTimeSeconds: 1
      isPublic: true
      clanId: "clanId"
      channelId: "channelId"
      referencedMessage: "referencedMessage"
      channelLabel: "channelLabel"
      messageId: "messageId"
      createTimeSeconds: 6
      updateTime: "2000-01-23T04:56:07.000+00:00"
      avatar: "avatar"
      hideEditted: true
      createTime: "2000-01-23T04:56:07.000+00:00"
      clanNick: "clanNick"
      mentions: "mentions"
      reactions: "reactions"
      username: "username"
  apiChannelMessageHeader:
    type: "object"
    properties:
      id:
        type: "string"
        title: "the message id"
      timestampSeconds:
        type: "integer"
        format: "int64"
        title: "the time stamp"
      senderId:
        type: "string"
        title: "the sender id"
      content:
        type: "string"
        title: "the content"
      attachment:
        type: "string"
        title: "the attachment"
      referece:
        type: "string"
        title: "the reference"
      mention:
        type: "string"
        title: "the mention"
      reaction:
        type: "string"
        title: "the reactions"
    example:
      senderId: "senderId"
      reaction: "reaction"
      attachment: "attachment"
      referece: "referece"
      id: "id"
      content: "content"
      timestampSeconds: 5
      mention: "mention"
  apiChannelMessageList:
    type: "object"
    properties:
      messages:
        type: "array"
        description: "A list of messages."
        items:
          $ref: "#/definitions/apiChannelMessage"
      lastSeenMessage:
        title: "last seen message id by user"
        $ref: "#/definitions/apiChannelMessageHeader"
      lastSentMessage:
        title: "last sent message id"
        $ref: "#/definitions/apiChannelMessageHeader"
    description: "A list of channel messages, usually a result of a list operation."
    example:
      lastSentMessage:
        senderId: "senderId"
        reaction: "reaction"
        attachment: "attachment"
        referece: "referece"
        id: "id"
        content: "content"
        timestampSeconds: 5
        mention: "mention"
      messages:
      - code: 0
        attachments: "attachments"
        references: "references"
        displayName: "displayName"
        clanLogo: "clanLogo"
        categoryName: "categoryName"
        content: "content"
        mode: 5
        senderId: "senderId"
        clanAvatar: "clanAvatar"
        updateTimeSeconds: 1
        isPublic: true
        clanId: "clanId"
        channelId: "channelId"
        referencedMessage: "referencedMessage"
        channelLabel: "channelLabel"
        messageId: "messageId"
        createTimeSeconds: 6
        updateTime: "2000-01-23T04:56:07.000+00:00"
        avatar: "avatar"
        hideEditted: true
        createTime: "2000-01-23T04:56:07.000+00:00"
        clanNick: "clanNick"
        mentions: "mentions"
        reactions: "reactions"
        username: "username"
      - code: 0
        attachments: "attachments"
        references: "references"
        displayName: "displayName"
        clanLogo: "clanLogo"
        categoryName: "categoryName"
        content: "content"
        mode: 5
        senderId: "senderId"
        clanAvatar: "clanAvatar"
        updateTimeSeconds: 1
        isPublic: true
        clanId: "clanId"
        channelId: "channelId"
        referencedMessage: "referencedMessage"
        channelLabel: "channelLabel"
        messageId: "messageId"
        createTimeSeconds: 6
        updateTime: "2000-01-23T04:56:07.000+00:00"
        avatar: "avatar"
        hideEditted: true
        createTime: "2000-01-23T04:56:07.000+00:00"
        clanNick: "clanNick"
        mentions: "mentions"
        reactions: "reactions"
        username: "username"
      lastSeenMessage:
        senderId: "senderId"
        reaction: "reaction"
        attachment: "attachment"
        referece: "referece"
        id: "id"
        content: "content"
        timestampSeconds: 5
        mention: "mention"
  apiChannelSettingItem:
    type: "object"
    properties:
      id:
        type: "string"
        title: "channel id"
      creatorId:
        type: "string"
        title: "creator id"
      parentId:
        type: "string"
        title: "parentId"
      channelLabel:
        type: "string"
        title: "label of channel"
      categoryId:
        type: "string"
        title: "category id"
      meetingCode:
        type: "string"
        title: "meeting code"
      channelPrivate:
        type: "integer"
        format: "int32"
        title: "channel private"
      channelType:
        type: "integer"
        format: "int32"
        title: "channel type"
      active:
        type: "integer"
        format: "int32"
        title: "is active"
      userIds:
        type: "array"
        title: "list user in channel"
        items:
          type: "string"
      messageCount:
        type: "string"
        format: "int64"
        title: "message count"
      lastSentMessage:
        title: "last sent message"
        $ref: "#/definitions/apiChannelMessageHeader"
    example:
      lastSentMessage:
        senderId: "senderId"
        reaction: "reaction"
        attachment: "attachment"
        referece: "referece"
        id: "id"
        content: "content"
        timestampSeconds: 5
        mention: "mention"
      messageCount: "messageCount"
      channelLabel: "channelLabel"
      userIds:
      - "userIds"
      - "userIds"
      creatorId: "creatorId"
      meetingCode: "meetingCode"
      active: 5
      channelType: 5
      id: "id"
      channelPrivate: 1
      parentId: "parentId"
      categoryId: "categoryId"
  apiChannelSettingListResponse:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "clan id"
      channelCount:
        type: "integer"
        format: "int32"
        title: "channel count"
      threadCount:
        type: "integer"
        format: "int32"
        title: "thread count"
      channelSettingList:
        type: "array"
        title: "channel setting list"
        items:
          $ref: "#/definitions/apiChannelSettingItem"
    example:
      channelCount: 0
      threadCount: 6
      channelSettingList:
      - lastSentMessage:
          senderId: "senderId"
          reaction: "reaction"
          attachment: "attachment"
          referece: "referece"
          id: "id"
          content: "content"
          timestampSeconds: 5
          mention: "mention"
        messageCount: "messageCount"
        channelLabel: "channelLabel"
        userIds:
        - "userIds"
        - "userIds"
        creatorId: "creatorId"
        meetingCode: "meetingCode"
        active: 5
        channelType: 5
        id: "id"
        channelPrivate: 1
        parentId: "parentId"
        categoryId: "categoryId"
      - lastSentMessage:
          senderId: "senderId"
          reaction: "reaction"
          attachment: "attachment"
          referece: "referece"
          id: "id"
          content: "content"
          timestampSeconds: 5
          mention: "mention"
        messageCount: "messageCount"
        channelLabel: "channelLabel"
        userIds:
        - "userIds"
        - "userIds"
        creatorId: "creatorId"
        meetingCode: "meetingCode"
        active: 5
        channelType: 5
        id: "id"
        channelPrivate: 1
        parentId: "parentId"
        categoryId: "categoryId"
      clanId: "clanId"
  apiChannelUserList:
    type: "object"
    properties:
      channelUsers:
        type: "array"
        description: "User-role pairs for a channel."
        items:
          $ref: "#/definitions/ChannelUserListChannelUser"
      cursor:
        type: "string"
        description: "Cursor for the next page of results, if any."
      channelId:
        type: "string"
        title: "channel id"
    description: "A list of users belonging to a channel, along with their role."
    example:
      cursor: "cursor"
      channelUsers:
      - threadId: "threadId"
        clanAvatar: "clanAvatar"
        roleId:
        - "roleId"
        - "roleId"
        clanNick: "clanNick"
        id: "id"
        userId: "userId"
        clanId: "clanId"
      - threadId: "threadId"
        clanAvatar: "clanAvatar"
        roleId:
        - "roleId"
        - "roleId"
        clanNick: "clanNick"
        id: "id"
        userId: "userId"
        clanId: "clanId"
      channelId: "channelId"
  apiCheckDuplicateClanNameResponse:
    type: "object"
    properties:
      isDuplicate:
        type: "boolean"
    example:
      isDuplicate: true
  apiClanDesc:
    type: "object"
    properties:
      creatorId:
        type: "string"
        title: "Clan creator"
      clanName:
        type: "string"
        title: "Clan name"
      logo:
        type: "string"
        title: "Clan logo"
      banner:
        type: "string"
        title: "Clan banner"
      clanId:
        type: "string"
        title: "Clan id"
      status:
        type: "integer"
        format: "int32"
        title: "Clan status"
      badgeCount:
        type: "integer"
        format: "int32"
        title: "Badge count"
      isOnboarding:
        type: "boolean"
        description: "Is onboarding."
    title: "Clan information"
    example:
      creatorId: "creatorId"
      isOnboarding: true
      logo: "logo"
      banner: "banner"
      badgeCount: 6
      clanId: "clanId"
      clanName: "clanName"
      status: 0
  apiClanDescList:
    type: "object"
    properties:
      clandesc:
        type: "array"
        description: "A list of channel."
        items:
          $ref: "#/definitions/apiClanDesc"
    title: "A list of clan"
    example:
      clandesc:
      - creatorId: "creatorId"
        isOnboarding: true
        logo: "logo"
        banner: "banner"
        badgeCount: 6
        clanId: "clanId"
        clanName: "clanName"
        status: 0
      - creatorId: "creatorId"
        isOnboarding: true
        logo: "logo"
        banner: "banner"
        badgeCount: 6
        clanId: "clanId"
        clanName: "clanName"
        status: 0
  apiClanDescProfile:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "Clan id"
      creatorId:
        type: "string"
        title: "Clan creator"
      nickName:
        type: "string"
        title: "Clan nick name"
      profileBanner:
        type: "string"
        title: "Clan profile banner"
      profileTheme:
        type: "string"
        title: "Clan profile theme"
      avatarUrl:
        type: "string"
        title: "Clan profile avatar"
    title: "Clan profile information"
    example:
      profileTheme: "profileTheme"
      avatarUrl: "avatarUrl"
      nickName: "nickName"
      creatorId: "creatorId"
      clanId: "clanId"
      profileBanner: "profileBanner"
  apiClanEmoji:
    type: "object"
    properties:
      id:
        type: "string"
      src:
        type: "string"
        title: "src url"
      shortname:
        type: "string"
        title: "shortname"
      category:
        type: "string"
        title: "category"
      creatorId:
        type: "string"
        title: "creator id"
      clanId:
        type: "string"
        title: "clan_id"
      logo:
        type: "string"
        title: "clan logo"
      clanName:
        type: "string"
        title: "clan name"
    example:
      src: "src"
      creatorId: "creatorId"
      logo: "logo"
      id: "id"
      category: "category"
      shortname: "shortname"
      clanId: "clanId"
      clanName: "clanName"
  apiClanEmojiCreateRequest:
    type: "object"
    properties:
      clanId:
        type: "string"
      source:
        type: "string"
      shortname:
        type: "string"
      category:
        type: "string"
      id:
        type: "string"
  apiClanProfile:
    type: "object"
    properties:
      userId:
        type: "string"
        title: "id user to find user"
      nickName:
        type: "string"
        title: "name user"
      avatar:
        type: "string"
        title: "id avatar"
      clanId:
        type: "string"
        title: "id clan"
    description: "Get clan profile."
    example:
      nickName: "nickName"
      avatar: "avatar"
      userId: "userId"
      clanId: "clanId"
  apiClanSticker:
    type: "object"
    properties:
      id:
        type: "string"
      source:
        type: "string"
      shortname:
        type: "string"
      category:
        type: "string"
      creatorId:
        type: "string"
      createTime:
        type: "string"
        format: "date-time"
      clanId:
        type: "string"
      logo:
        type: "string"
      clanName:
        type: "string"
    example:
      createTime: "2000-01-23T04:56:07.000+00:00"
      creatorId: "creatorId"
      logo: "logo"
      id: "id"
      source: "source"
      category: "category"
      shortname: "shortname"
      clanId: "clanId"
      clanName: "clanName"
  apiClanStickerAddRequest:
    type: "object"
    properties:
      source:
        type: "string"
      shortname:
        type: "string"
      category:
        type: "string"
      clanId:
        type: "string"
        format: "int64"
      id:
        type: "string"
        title: "UNIQUE include type number"
  apiClanUserList:
    type: "object"
    properties:
      clanUsers:
        type: "array"
        description: "User-role pairs for a clan."
        items:
          $ref: "#/definitions/ClanUserListClanUser"
      cursor:
        type: "string"
        description: "Cursor for the next page of results, if any."
      clanId:
        type: "string"
        title: "clan id"
    description: "A list of users belonging to a clan, along with their role."
    example:
      cursor: "cursor"
      clanUsers:
      - clanAvatar: "clanAvatar"
        roleId:
        - "roleId"
        - "roleId"
        clanNick: "clanNick"
        user:
          googleId: "googleId"
          metadata: "metadata"
          avatarUrl: "avatarUrl"
          joinTime: "2000-01-23T04:56:07.000+00:00"
          displayName: "displayName"
          timezone: "timezone"
          facebookId: "facebookId"
          edgeCount: 0
          langTag: "langTag"
          updateTime: "2000-01-23T04:56:07.000+00:00"
          appleId: "appleId"
          aboutMe: "aboutMe"
          steamId: "steamId"
          gamecenterId: "gamecenterId"
          createTime: "2000-01-23T04:56:07.000+00:00"
          dob: "2000-01-23T04:56:07.000+00:00"
          online: true
          location: "location"
          id: "id"
          isMobile: true
          username: "username"
        clanId: "clanId"
      - clanAvatar: "clanAvatar"
        roleId:
        - "roleId"
        - "roleId"
        clanNick: "clanNick"
        user:
          googleId: "googleId"
          metadata: "metadata"
          avatarUrl: "avatarUrl"
          joinTime: "2000-01-23T04:56:07.000+00:00"
          displayName: "displayName"
          timezone: "timezone"
          facebookId: "facebookId"
          edgeCount: 0
          langTag: "langTag"
          updateTime: "2000-01-23T04:56:07.000+00:00"
          appleId: "appleId"
          aboutMe: "aboutMe"
          steamId: "steamId"
          gamecenterId: "gamecenterId"
          createTime: "2000-01-23T04:56:07.000+00:00"
          dob: "2000-01-23T04:56:07.000+00:00"
          online: true
          location: "location"
          id: "id"
          isMobile: true
          username: "username"
        clanId: "clanId"
      clanId: "clanId"
  apiClanWebhook:
    type: "object"
    properties:
      id:
        type: "string"
        description: "id."
      webhookName:
        type: "string"
        description: "webhook name."
      clanId:
        type: "string"
        description: "clan id."
      active:
        type: "integer"
        format: "int32"
        description: "active."
      url:
        type: "string"
        description: "URL of the webhook, which is automatically generated and different\
          \ from the avatar."
      creatorId:
        type: "string"
        description: "creator id."
      avatar:
        type: "string"
        title: "avatar"
      createTime:
        type: "string"
        description: "create time."
      updateTime:
        type: "string"
        description: "update time."
    example:
      createTime: "createTime"
      creatorId: "creatorId"
      webhookName: "webhookName"
      active: 0
      updateTime: "updateTime"
      id: "id"
      avatar: "avatar"
      clanId: "clanId"
      url: "url"
  apiClanWebhookHandlerBody:
    type: "object"
    properties:
      content:
        type: "string"
        title: "content"
      attachments:
        type: "array"
        description: "list clan webhook."
        items:
          $ref: "#/definitions/apiMessageAttachment"
  apiConfirmLoginRequest:
    type: "object"
    properties:
      loginId:
        type: "string"
        title: "loginId"
  apiCreateActivityRequest:
    type: "object"
    properties:
      activityName:
        type: "string"
      activityType:
        type: "integer"
        format: "int32"
      activityDescription:
        type: "string"
      startTime:
        type: "string"
        format: "date-time"
      applicationId:
        type: "string"
      status:
        type: "integer"
        format: "int32"
  apiCreateCategoryDescRequest:
    type: "object"
    properties:
      categoryName:
        type: "string"
      clanId:
        type: "string"
  apiCreateChannelDescRequest:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "The clan of this channel"
      parrentId:
        type: "string"
        description: "The parrent channel this message belongs to."
      channelId:
        type: "string"
        description: "The channel this message belongs to."
      categoryId:
        type: "string"
        title: "The category of channel"
      type:
        type: "integer"
        format: "int32"
        description: "The channel type."
      channelLabel:
        type: "string"
        title: "The channel lable"
      channelPrivate:
        type: "integer"
        format: "int32"
        title: "The channel private"
      userIds:
        type: "array"
        description: "The users to add."
        items:
          type: "string"
      appUrl:
        type: "string"
        title: "app url for channel type app"
    description: "Create a channel within clan."
  apiCreateClanDescRequest:
    type: "object"
    properties:
      clanName:
        type: "string"
        title: "Clan name"
      logo:
        type: "string"
        title: "Clan logo"
      banner:
        type: "string"
        title: "Clan banner"
    title: "Clan information"
  apiCreateEventRequest:
    type: "object"
    properties:
      title:
        type: "string"
      logo:
        type: "string"
      description:
        type: "string"
      clanId:
        type: "string"
      channelId:
        type: "string"
      address:
        type: "string"
      startTime:
        type: "string"
        format: "date-time"
      endTime:
        type: "string"
        format: "date-time"
      eventId:
        type: "string"
      eventStatus:
        type: "string"
    description: "Create a event within clan."
  apiCreateOnboardingRequest:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "clan id"
      contents:
        type: "array"
        title: "contents"
        items:
          $ref: "#/definitions/apiOnboardingContent"
  apiCreateRoleRequest:
    type: "object"
    properties:
      title:
        type: "string"
      color:
        type: "string"
      roleIcon:
        type: "string"
      description:
        type: "string"
      clanId:
        type: "string"
      displayOnline:
        type: "integer"
        format: "int32"
      allowMention:
        type: "integer"
        format: "int32"
      maxPermissionId:
        type: "string"
        title: "id of permission which has max level permission"
      addUserIds:
        type: "array"
        description: "The users to add."
        items:
          type: "string"
      activePermissionIds:
        type: "array"
        description: "The permissions to add."
        items:
          type: "string"
    description: "Create a role within clan."
  apiDeleteChannelDescRequest:
    type: "object"
    properties:
      channelId:
        type: "string"
        description: "The id of a channel."
    description: "Delete a channel the user has access to."
  apiDeleteEventRequest:
    type: "object"
    properties:
      eventId:
        type: "string"
        description: "The id of a event."
      clanId:
        type: "string"
        title: "clan id"
  apiDeleteRoleRequest:
    type: "object"
    properties:
      roleId:
        type: "string"
        description: "The id of a role."
      channelId:
        type: "string"
        title: "The id of a channel"
      clanId:
        type: "string"
        title: "clan_id"
    description: "Delete a role the user has access to."
  apiEditChannelCanvasRequest:
    type: "object"
    properties:
      id:
        type: "string"
        title: "id"
      channelId:
        type: "string"
        title: "channel id"
      clanId:
        type: "string"
        title: "clan id"
      title:
        type: "string"
        title: "title"
      content:
        type: "string"
        title: "content"
      isDefault:
        type: "boolean"
        title: "is default"
  apiEditChannelCanvasResponse:
    type: "object"
    properties:
      id:
        type: "string"
        title: "id"
    example:
      id: "id"
  apiEmojiListedResponse:
    type: "object"
    properties:
      emojiList:
        type: "array"
        items:
          $ref: "#/definitions/apiClanEmoji"
    example:
      emojiList:
      - src: "src"
        creatorId: "creatorId"
        logo: "logo"
        id: "id"
        category: "category"
        shortname: "shortname"
        clanId: "clanId"
        clanName: "clanName"
      - src: "src"
        creatorId: "creatorId"
        logo: "logo"
        id: "id"
        category: "category"
        shortname: "shortname"
        clanId: "clanId"
        clanName: "clanName"
  apiEventList:
    type: "object"
    properties:
      events:
        type: "array"
        description: "A list of event."
        items:
          $ref: "#/definitions/apiEventManagement"
    example:
      events:
      - address: "address"
        creatorId: "creatorId"
        description: "description"
        active: 0
        title: "title"
        createTime: "2000-01-23T04:56:07.000+00:00"
        startEvent: 6
        userIds:
        - "userIds"
        - "userIds"
        maxPermission: 1
        logo: "logo"
        startTime: "2000-01-23T04:56:07.000+00:00"
        id: "id"
        endTime: "2000-01-23T04:56:07.000+00:00"
        clanId: "clanId"
        channelId: "channelId"
      - address: "address"
        creatorId: "creatorId"
        description: "description"
        active: 0
        title: "title"
        createTime: "2000-01-23T04:56:07.000+00:00"
        startEvent: 6
        userIds:
        - "userIds"
        - "userIds"
        maxPermission: 1
        logo: "logo"
        startTime: "2000-01-23T04:56:07.000+00:00"
        id: "id"
        endTime: "2000-01-23T04:56:07.000+00:00"
        clanId: "clanId"
        channelId: "channelId"
  apiEventManagement:
    type: "object"
    properties:
      id:
        type: "string"
      title:
        type: "string"
      logo:
        type: "string"
      description:
        type: "string"
      active:
        type: "integer"
        format: "int32"
      startEvent:
        type: "integer"
        format: "int32"
      creatorId:
        type: "string"
      clanId:
        type: "string"
      channelId:
        type: "string"
      address:
        type: "string"
      startTime:
        type: "string"
        format: "date-time"
      endTime:
        type: "string"
        format: "date-time"
      userIds:
        type: "array"
        items:
          type: "string"
      createTime:
        type: "string"
        format: "date-time"
      maxPermission:
        type: "integer"
        format: "int32"
    title: "Event clan"
    example:
      address: "address"
      creatorId: "creatorId"
      description: "description"
      active: 0
      title: "title"
      createTime: "2000-01-23T04:56:07.000+00:00"
      startEvent: 6
      userIds:
      - "userIds"
      - "userIds"
      maxPermission: 1
      logo: "logo"
      startTime: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      endTime: "2000-01-23T04:56:07.000+00:00"
      clanId: "clanId"
      channelId: "channelId"
  apiFilterParam:
    type: "object"
    properties:
      fieldName:
        type: "string"
        title: "Field name to filter by"
      fieldValue:
        type: "string"
        title: "Filter value"
  apiFriend:
    type: "object"
    properties:
      user:
        description: "The user object."
        $ref: "#/definitions/apiUser"
      state:
        type: "integer"
        format: "int32"
        description: "The friend status.\n\none of \"Friend.State\"."
      updateTime:
        type: "string"
        format: "date-time"
        description: "Time of the latest relationship update."
    description: "A friend of a user."
    example:
      updateTime: "2000-01-23T04:56:07.000+00:00"
      state: 0
      user:
        googleId: "googleId"
        metadata: "metadata"
        avatarUrl: "avatarUrl"
        joinTime: "2000-01-23T04:56:07.000+00:00"
        displayName: "displayName"
        timezone: "timezone"
        facebookId: "facebookId"
        edgeCount: 0
        langTag: "langTag"
        updateTime: "2000-01-23T04:56:07.000+00:00"
        appleId: "appleId"
        aboutMe: "aboutMe"
        steamId: "steamId"
        gamecenterId: "gamecenterId"
        createTime: "2000-01-23T04:56:07.000+00:00"
        dob: "2000-01-23T04:56:07.000+00:00"
        online: true
        location: "location"
        id: "id"
        isMobile: true
        username: "username"
  apiFriendList:
    type: "object"
    properties:
      friends:
        type: "array"
        description: "The Friend objects."
        items:
          $ref: "#/definitions/apiFriend"
      cursor:
        type: "string"
        description: "Cursor for the next page of results, if any."
    description: "A collection of zero or more friends of the user."
    example:
      cursor: "cursor"
      friends:
      - updateTime: "2000-01-23T04:56:07.000+00:00"
        state: 0
        user:
          googleId: "googleId"
          metadata: "metadata"
          avatarUrl: "avatarUrl"
          joinTime: "2000-01-23T04:56:07.000+00:00"
          displayName: "displayName"
          timezone: "timezone"
          facebookId: "facebookId"
          edgeCount: 0
          langTag: "langTag"
          updateTime: "2000-01-23T04:56:07.000+00:00"
          appleId: "appleId"
          aboutMe: "aboutMe"
          steamId: "steamId"
          gamecenterId: "gamecenterId"
          createTime: "2000-01-23T04:56:07.000+00:00"
          dob: "2000-01-23T04:56:07.000+00:00"
          online: true
          location: "location"
          id: "id"
          isMobile: true
          username: "username"
      - updateTime: "2000-01-23T04:56:07.000+00:00"
        state: 0
        user:
          googleId: "googleId"
          metadata: "metadata"
          avatarUrl: "avatarUrl"
          joinTime: "2000-01-23T04:56:07.000+00:00"
          displayName: "displayName"
          timezone: "timezone"
          facebookId: "facebookId"
          edgeCount: 0
          langTag: "langTag"
          updateTime: "2000-01-23T04:56:07.000+00:00"
          appleId: "appleId"
          aboutMe: "aboutMe"
          steamId: "steamId"
          gamecenterId: "gamecenterId"
          createTime: "2000-01-23T04:56:07.000+00:00"
          dob: "2000-01-23T04:56:07.000+00:00"
          online: true
          location: "location"
          id: "id"
          isMobile: true
          username: "username"
  apiGenerateClanWebhookRequest:
    type: "object"
    properties:
      clanId:
        type: "string"
        description: "clan id."
      webhookName:
        type: "string"
        description: "webhook name."
      avatar:
        type: "string"
        description: "avatar."
  apiGenerateClanWebhookResponse:
    type: "object"
    properties:
      clanId:
        type: "string"
        description: "clan id."
      url:
        type: "string"
        description: "url."
      webhookName:
        type: "string"
        description: "webhook name."
      avatar:
        type: "string"
        description: "avatar."
    example:
      webhookName: "webhookName"
      avatar: "avatar"
      clanId: "clanId"
      url: "url"
  apiGetKeyServerResp:
    type: "object"
    properties:
      url:
        type: "string"
    example:
      url: "url"
  apiGetPubKeysResponse:
    type: "object"
    properties:
      pubKeys:
        type: "array"
        items:
          $ref: "#/definitions/GetPubKeysResponseUserPubKey"
    example:
      pubKeys:
      - PK:
          encr: "encr"
          sign: "sign"
        userId: "userId"
      - PK:
          encr: "encr"
          sign: "sign"
        userId: "userId"
  apiGiveCoffeeEvent:
    type: "object"
    properties:
      senderId:
        type: "string"
        title: "sender id"
      receiverId:
        type: "string"
        title: "receiver id"
      tokenCount:
        type: "integer"
        format: "int32"
        title: "token count"
      messageRefId:
        type: "string"
        title: "message_ref"
      channelId:
        type: "string"
        title: "chanel id"
      clanId:
        type: "string"
        title: "clan id"
  apiHashtagDm:
    type: "object"
    properties:
      channelId:
        type: "string"
        description: "The channel id."
      channelLabel:
        type: "string"
        title: "The channel lable"
      clanId:
        type: "string"
        title: "The clan of this channel"
      clanName:
        type: "string"
        title: "The clan name"
      meetingCode:
        type: "string"
      type:
        type: "integer"
        format: "int32"
      channelPrivate:
        type: "integer"
        format: "int32"
      parrentId:
        type: "string"
    title: "hashtagDM"
    example:
      parrentId: "parrentId"
      channelLabel: "channelLabel"
      meetingCode: "meetingCode"
      channelPrivate: 6
      type: 0
      channelId: "channelId"
      clanId: "clanId"
      clanName: "clanName"
  apiHashtagDmList:
    type: "object"
    properties:
      hashtagDm:
        type: "array"
        items:
          $ref: "#/definitions/apiHashtagDm"
    example:
      hashtagDm:
      - parrentId: "parrentId"
        channelLabel: "channelLabel"
        meetingCode: "meetingCode"
        channelPrivate: 6
        type: 0
        channelId: "channelId"
        clanId: "clanId"
        clanName: "clanName"
      - parrentId: "parrentId"
        channelLabel: "channelLabel"
        meetingCode: "meetingCode"
        channelPrivate: 6
        type: 0
        channelId: "channelId"
        clanId: "clanId"
        clanName: "clanName"
  apiInviteUserRes:
    type: "object"
    properties:
      clanId:
        type: "string"
        description: "id clan to add link to ."
      channelId:
        type: "string"
        description: "id channel to add link to."
      clanName:
        type: "string"
        title: "clan name"
      channelLabel:
        type: "string"
        title: "channel name"
      userJoined:
        type: "boolean"
        title: "check user exist"
      expiryTime:
        type: "string"
        format: "date-time"
        title: "expiry_time"
    description: "Add link invite users to."
    example:
      channelLabel: "channelLabel"
      expiryTime: "2000-01-23T04:56:07.000+00:00"
      userJoined: true
      clanId: "clanId"
      channelId: "channelId"
      clanName: "clanName"
  apiLinkInviteUser:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "id clan"
      creatorId:
        type: "string"
        description: "The user to add."
      channelId:
        type: "string"
        title: "is clan invite"
      inviteLink:
        type: "string"
        title: "link invite"
      createTime:
        type: "string"
        format: "date-time"
        title: "create time"
      expiryTime:
        type: "string"
        format: "date-time"
        title: "expiry time"
      id:
        type: "string"
    description: "Add link invite users to."
    example:
      createTime: "2000-01-23T04:56:07.000+00:00"
      inviteLink: "inviteLink"
      creatorId: "creatorId"
      expiryTime: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      clanId: "clanId"
      channelId: "channelId"
  apiLinkInviteUserRequest:
    type: "object"
    properties:
      clanId:
        type: "string"
        description: "id clan to add link to ."
      channelId:
        type: "string"
        description: "id channel to add link to."
      expiryTime:
        type: "integer"
        format: "int32"
        title: "expiry time"
    description: "Add link invite users to."
  apiLinkSteamRequest:
    type: "object"
    properties:
      account:
        description: "The Facebook account details."
        $ref: "#/definitions/apiAccountSteam"
      sync:
        type: "boolean"
        description: "Import Steam friends for the user."
    description: "Link Steam to the current user's account."
  apiListChannelAppsResponse:
    type: "object"
    properties:
      channelApps:
        type: "array"
        title: "list of channel apps"
        items:
          $ref: "#/definitions/apiChannelAppResponse"
    example:
      channelApps:
      - appId: "appId"
        id: "id"
        clanId: "clanId"
        channelId: "channelId"
        url: "url"
      - appId: "appId"
        id: "id"
        clanId: "clanId"
        channelId: "channelId"
        url: "url"
  apiListClanWebhookResponse:
    type: "object"
    properties:
      listClanWebhooks:
        type: "array"
        description: "list clan webhook."
        items:
          $ref: "#/definitions/apiClanWebhook"
    example:
      listClanWebhooks:
      - createTime: "createTime"
        creatorId: "creatorId"
        webhookName: "webhookName"
        active: 0
        updateTime: "updateTime"
        id: "id"
        avatar: "avatar"
        clanId: "clanId"
        url: "url"
      - createTime: "createTime"
        creatorId: "creatorId"
        webhookName: "webhookName"
        active: 0
        updateTime: "updateTime"
        id: "id"
        avatar: "avatar"
        clanId: "clanId"
        url: "url"
  apiListFavoriteChannelResponse:
    type: "object"
    properties:
      channelIds:
        type: "array"
        items:
          type: "string"
    example:
      channelIds:
      - "channelIds"
      - "channelIds"
  apiListOnboardingResponse:
    type: "object"
    properties:
      listOnboarding:
        type: "array"
        items:
          $ref: "#/definitions/apiOnboardingItem"
    example:
      listOnboarding:
      - taskType: 6
        createTime: "2000-01-23T04:56:07.000+00:00"
        imageUrl: "imageUrl"
        answers:
        - emoji: "emoji"
          imageUrl: "imageUrl"
          description: "description"
          title: "title"
        - emoji: "emoji"
          imageUrl: "imageUrl"
          description: "description"
          title: "title"
        guideType: 0
        updateTime: "2000-01-23T04:56:07.000+00:00"
        id: "id"
        title: "title"
        clanId: "clanId"
        channelId: "channelId"
        content: "content"
      - taskType: 6
        createTime: "2000-01-23T04:56:07.000+00:00"
        imageUrl: "imageUrl"
        answers:
        - emoji: "emoji"
          imageUrl: "imageUrl"
          description: "description"
          title: "title"
        - emoji: "emoji"
          imageUrl: "imageUrl"
          description: "description"
          title: "title"
        guideType: 0
        updateTime: "2000-01-23T04:56:07.000+00:00"
        id: "id"
        title: "title"
        clanId: "clanId"
        channelId: "channelId"
        content: "content"
  apiListOnboardingStepResponse:
    type: "object"
    properties:
      listOnboardingStep:
        type: "array"
        description: "list onboarding steps."
        items:
          $ref: "#/definitions/apiOnboardingSteps"
    example:
      listOnboardingStep:
      - id: "id"
        onboardingStep: 0
        userId: "userId"
        clanId: "clanId"
      - id: "id"
        onboardingStep: 0
        userId: "userId"
        clanId: "clanId"
  apiListStreamingChannelsResponse:
    type: "object"
    properties:
      streamingChannels:
        type: "array"
        title: "list of streaming channel"
        items:
          $ref: "#/definitions/apiStreamingChannelResponse"
    example:
      streamingChannels:
      - isStreaming: true
        streamingUrl: "streamingUrl"
        clanId: "clanId"
        channelId: "channelId"
      - isStreaming: true
        streamingUrl: "streamingUrl"
        clanId: "clanId"
        channelId: "channelId"
  apiListUserActivity:
    type: "object"
    properties:
      activities:
        type: "array"
        items:
          $ref: "#/definitions/apiUserActivity"
    example:
      activities:
      - activityName: "activityName"
        startTime: "2000-01-23T04:56:07.000+00:00"
        activityDescription: "activityDescription"
        endTime: "2000-01-23T04:56:07.000+00:00"
        activityType: 0
        applicationId: "applicationId"
        userId: "userId"
        status: 6
      - activityName: "activityName"
        startTime: "2000-01-23T04:56:07.000+00:00"
        activityDescription: "activityDescription"
        endTime: "2000-01-23T04:56:07.000+00:00"
        activityType: 0
        applicationId: "applicationId"
        userId: "userId"
        status: 6
  apiLoginIDResponse:
    type: "object"
    properties:
      loginId:
        type: "string"
        title: "loginId"
      status:
        type: "integer"
        format: "int32"
        title: "status login"
      createTimeSecond:
        type: "string"
        format: "int64"
        title: "create time"
      platform:
        type: "string"
        title: "platform"
      userId:
        type: "string"
        format: "int64"
        title: "user_id"
      userName:
        type: "string"
        title: "user_name"
      address:
        type: "string"
        title: "address"
    example:
      createTimeSecond: "createTimeSecond"
      loginId: "loginId"
      address: "address"
      userName: "userName"
      userId: "userId"
      platform: "platform"
      status: 0
  apiLoginRequest:
    type: "object"
    properties:
      platform:
        type: "string"
        title: "platform"
      address:
        type: "string"
        title: "address"
  apiMarkAsReadRequest:
    type: "object"
    properties:
      channelId:
        type: "string"
        title: "channel id"
      categoryId:
        type: "string"
        title: "category_id"
      clanId:
        type: "string"
        title: "clan id"
  apiMessageAttachment:
    type: "object"
    properties:
      filename:
        type: "string"
        title: "Attachment file name"
      size:
        type: "string"
        format: "int64"
        title: "Attachment file size"
      url:
        type: "string"
        title: "Attachment url"
      filetype:
        type: "string"
        title: "Attachment file type"
      width:
        type: "integer"
        format: "int32"
        title: "Attachment width"
      height:
        type: "integer"
        format: "int32"
        title: "Attachment width"
    title: "Message attachment"
    example:
      filetype: "filetype"
      filename: "filename"
      size: "size"
      width: 0
      url: "url"
      height: 6
  apiNotifiReactMessage:
    type: "object"
    properties:
      id:
        type: "string"
        title: "Notification id"
      userId:
        type: "string"
      channelId:
        type: "string"
    title: "Notification channel"
    example:
      id: "id"
      userId: "userId"
      channelId: "channelId"
  apiNotification:
    type: "object"
    properties:
      id:
        type: "string"
        description: "ID of the Notification."
      subject:
        type: "string"
        description: "Subject of the notification."
      content:
        type: "string"
        description: "Content of the notification in JSON."
      code:
        type: "integer"
        format: "int32"
        description: "Category code for this notification."
      senderId:
        type: "string"
        description: "ID of the sender, if a user. Otherwise 'null'."
      createTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time (for gRPC clients) or ISO string (for REST clients)\
          \ when the notification was created."
      persistent:
        type: "boolean"
        description: "True if this notification was persisted to the database."
      clanId:
        type: "string"
        title: "ID of clan"
      channelId:
        type: "string"
        title: "ID of channel"
      channelType:
        type: "integer"
        format: "int32"
        title: "mode of"
      avatarUrl:
        type: "string"
    description: "A notification in the server."
    example:
      senderId: "senderId"
      code: 0
      createTime: "2000-01-23T04:56:07.000+00:00"
      avatarUrl: "avatarUrl"
      subject: "subject"
      channelType: 6
      id: "id"
      persistent: true
      content: "content"
      clanId: "clanId"
      channelId: "channelId"
  apiNotificationChannel:
    type: "object"
    properties:
      channelId:
        type: "string"
  apiNotificationChannelCategorySetting:
    type: "object"
    properties:
      id:
        type: "string"
        title: "Notification id"
      channelCategoryLabel:
        type: "string"
      notificationSettingType:
        type: "integer"
        format: "int32"
        title: "Notification title"
      channelCategoryTitle:
        type: "string"
      action:
        type: "integer"
        format: "int32"
    example:
      channelCategoryTitle: "channelCategoryTitle"
      action: 6
      id: "id"
      notificationSettingType: 0
      channelCategoryLabel: "channelCategoryLabel"
  apiNotificationChannelCategorySettingList:
    type: "object"
    properties:
      notificationChannelCategorySettingsList:
        type: "array"
        items:
          $ref: "#/definitions/apiNotificationChannelCategorySetting"
    example:
      notificationChannelCategorySettingsList:
      - channelCategoryTitle: "channelCategoryTitle"
        action: 6
        id: "id"
        notificationSettingType: 0
        channelCategoryLabel: "channelCategoryLabel"
      - channelCategoryTitle: "channelCategoryTitle"
        action: 6
        id: "id"
        notificationSettingType: 0
        channelCategoryLabel: "channelCategoryLabel"
  apiNotificationList:
    type: "object"
    properties:
      notifications:
        type: "array"
        description: "Collection of notifications."
        items:
          $ref: "#/definitions/apiNotification"
      cacheableCursor:
        type: "string"
        description: "Use this cursor to paginate notifications. Cache this to catch\
          \ up to new notifications."
    description: "A collection of zero or more notifications."
    example:
      cacheableCursor: "cacheableCursor"
      notifications:
      - senderId: "senderId"
        code: 0
        createTime: "2000-01-23T04:56:07.000+00:00"
        avatarUrl: "avatarUrl"
        subject: "subject"
        channelType: 6
        id: "id"
        persistent: true
        content: "content"
        clanId: "clanId"
        channelId: "channelId"
      - senderId: "senderId"
        code: 0
        createTime: "2000-01-23T04:56:07.000+00:00"
        avatarUrl: "avatarUrl"
        subject: "subject"
        channelType: 6
        id: "id"
        persistent: true
        content: "content"
        clanId: "clanId"
        channelId: "channelId"
  apiNotificationSetting:
    type: "object"
    properties:
      id:
        type: "string"
        title: "Notification id"
      notificationSettingType:
        type: "integer"
        format: "int32"
        title: "Notification title"
    title: "Notification setting record"
    example:
      id: "id"
      notificationSettingType: 0
  apiNotificationUserChannel:
    type: "object"
    properties:
      id:
        type: "string"
        title: "Notification id"
      notificationSettingType:
        type: "integer"
        format: "int32"
      timeMute:
        type: "string"
        format: "date-time"
      active:
        type: "integer"
        format: "int32"
    title: "Notification channel"
    example:
      active: 6
      id: "id"
      notificationSettingType: 0
      timeMute: "2000-01-23T04:56:07.000+00:00"
  apiOnboardingAnswer:
    type: "object"
    properties:
      title:
        type: "string"
        title: "title"
      description:
        type: "string"
        title: "description"
      emoji:
        type: "string"
        title: "emoji"
      imageUrl:
        type: "string"
        title: "image"
    example:
      emoji: "emoji"
      imageUrl: "imageUrl"
      description: "description"
      title: "title"
  apiOnboardingContent:
    type: "object"
    properties:
      guideType:
        type: "integer"
        format: "int32"
        title: "guide type"
      taskType:
        type: "integer"
        format: "int32"
        title: "task type"
      channelId:
        type: "string"
        title: "channel id"
      title:
        type: "string"
        title: "title"
      content:
        type: "string"
        title: "content"
      imageUrl:
        type: "string"
        title: "image"
      answers:
        type: "array"
        title: "answers"
        items:
          $ref: "#/definitions/apiOnboardingAnswer"
  apiOnboardingItem:
    type: "object"
    properties:
      id:
        type: "string"
        title: "id"
      clanId:
        type: "string"
        title: "clan id"
      guideType:
        type: "integer"
        format: "int32"
        title: "guide_type: 0 = greeting, 1 = rule, 2 = task, 3 = question"
      taskType:
        type: "integer"
        format: "int32"
        title: "task type"
      channelId:
        type: "string"
        title: "channel id"
      title:
        type: "string"
        title: "title"
      content:
        type: "string"
        title: "content"
      imageUrl:
        type: "string"
        title: "image"
      answers:
        type: "array"
        title: "answers"
        items:
          $ref: "#/definitions/apiOnboardingAnswer"
      createTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time (for gRPC clients) or ISO string (for REST clients)\
          \ when the message was created."
      updateTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time (for gRPC clients) or ISO string (for REST clients)\
          \ when the message was last updated."
    example:
      taskType: 6
      createTime: "2000-01-23T04:56:07.000+00:00"
      imageUrl: "imageUrl"
      answers:
      - emoji: "emoji"
        imageUrl: "imageUrl"
        description: "description"
        title: "title"
      - emoji: "emoji"
        imageUrl: "imageUrl"
        description: "description"
        title: "title"
      guideType: 0
      updateTime: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      title: "title"
      clanId: "clanId"
      channelId: "channelId"
      content: "content"
  apiOnboardingSteps:
    type: "object"
    properties:
      id:
        type: "string"
        description: "id."
      userId:
        type: "string"
        description: "user id."
      clanId:
        type: "string"
        description: "clan id."
      onboardingStep:
        type: "integer"
        format: "int32"
        description: "onboarding step."
    example:
      id: "id"
      onboardingStep: 0
      userId: "userId"
      clanId: "clanId"
  apiOssrsHttpCallbackRequest:
    type: "object"
    properties:
      action:
        type: "string"
      clientId:
        type: "string"
      ip:
        type: "string"
      vhost:
        type: "string"
      app:
        type: "string"
      stream:
        type: "string"
      param:
        type: "string"
      serverId:
        type: "string"
      streamUrl:
        type: "string"
      streamId:
        type: "string"
      pageUrl:
        type: "string"
      tcUrl:
        type: "string"
      serviceId:
        type: "string"
  apiOssrsHttpCallbackResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      msg:
        type: "string"
    example:
      msg: "msg"
      code: 0
  apiPTTChannelUser:
    type: "object"
    properties:
      id:
        type: "string"
        title: "user join id"
      userId:
        type: "string"
        description: "user for a channel."
      channelId:
        type: "string"
        title: "channel id"
      participant:
        type: "string"
        title: "participant"
    description: "A list of users belonging to a channel, along with their role."
    example:
      id: "id"
      userId: "userId"
      channelId: "channelId"
      participant: "participant"
  apiPTTChannelUserList:
    type: "object"
    properties:
      pttChannelUsers:
        type: "array"
        title: "list of ptt channel user"
        items:
          $ref: "#/definitions/apiPTTChannelUser"
    description: "A list of users belonging to a channel, along with their role."
    example:
      pttChannelUsers:
      - id: "id"
        userId: "userId"
        channelId: "channelId"
        participant: "participant"
      - id: "id"
        userId: "userId"
        channelId: "channelId"
        participant: "participant"
  apiPermission:
    type: "object"
    properties:
      id:
        type: "string"
        title: "Permission id"
      title:
        type: "string"
      slug:
        type: "string"
      description:
        type: "string"
      active:
        type: "integer"
        format: "int32"
      scope:
        type: "integer"
        format: "int32"
      level:
        type: "integer"
        format: "int32"
    title: "Permission record"
    example:
      level: 1
      scope: 6
      description: "description"
      active: 0
      id: "id"
      title: "title"
      slug: "slug"
  apiPermissionList:
    type: "object"
    properties:
      permissions:
        type: "array"
        description: "A list of permission."
        items:
          $ref: "#/definitions/apiPermission"
      maxLevelPermission:
        type: "integer"
        format: "int32"
        title: "level permission max"
    description: "A list of permission description, usually a result of a list operation."
    example:
      maxLevelPermission: 5
      permissions:
      - level: 1
        scope: 6
        description: "description"
        active: 0
        id: "id"
        title: "title"
        slug: "slug"
      - level: 1
        scope: 6
        description: "description"
        active: 0
        id: "id"
        title: "title"
        slug: "slug"
  apiPermissionRoleChannel:
    type: "object"
    properties:
      permissionId:
        type: "string"
        title: "permission id"
      active:
        type: "boolean"
        title: "active"
    title: "Permission role channel"
    example:
      permissionId: "permissionId"
      active: true
  apiPermissionRoleChannelListEventResponse:
    type: "object"
    properties:
      roleId:
        type: "string"
        title: "role id"
      channelId:
        type: "string"
        title: "channel id"
      userId:
        type: "string"
        title: "user id"
      permissionRoleChannel:
        type: "array"
        title: "list of permission role channel"
        items:
          $ref: "#/definitions/apiPermissionRoleChannel"
    title: "List of permission role channel"
    example:
      roleId: "roleId"
      permissionRoleChannel:
      - permissionId: "permissionId"
        active: true
      - permissionId: "permissionId"
        active: true
      userId: "userId"
      channelId: "channelId"
  apiPermissionUpdate:
    type: "object"
    properties:
      permissionId:
        type: "string"
        title: "permission_id"
      slug:
        type: "string"
        title: "permission slug"
      type:
        type: "integer"
        format: "int32"
        title: "type set permission"
  apiPinMessage:
    type: "object"
    properties:
      id:
        type: "string"
      messageId:
        type: "string"
      channelId:
        type: "string"
      senderId:
        type: "string"
      content:
        type: "string"
      username:
        type: "string"
      avatar:
        type: "string"
      createTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time (for gRPC clients) or ISO string (for REST clients)\
          \ when the message was created."
      createTimeSeconds:
        type: "integer"
        format: "int64"
        title: "create time in ms"
    example:
      senderId: "senderId"
      createTime: "2000-01-23T04:56:07.000+00:00"
      messageId: "messageId"
      createTimeSeconds: 0
      id: "id"
      avatar: "avatar"
      channelId: "channelId"
      content: "content"
      username: "username"
  apiPinMessageRequest:
    type: "object"
    properties:
      messageId:
        type: "string"
      channelId:
        type: "string"
      clanId:
        type: "string"
  apiPinMessagesList:
    type: "object"
    properties:
      pinMessagesList:
        type: "array"
        items:
          $ref: "#/definitions/apiPinMessage"
    example:
      pinMessagesList:
      - senderId: "senderId"
        createTime: "2000-01-23T04:56:07.000+00:00"
        messageId: "messageId"
        createTimeSeconds: 0
        id: "id"
        avatar: "avatar"
        channelId: "channelId"
        content: "content"
        username: "username"
      - senderId: "senderId"
        createTime: "2000-01-23T04:56:07.000+00:00"
        messageId: "messageId"
        createTimeSeconds: 0
        id: "id"
        avatar: "avatar"
        channelId: "channelId"
        content: "content"
        username: "username"
  apiPubKey:
    type: "object"
    properties:
      encr:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
      sign:
        type: "string"
        format: "byte"
        pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
    example:
      encr: "encr"
      sign: "sign"
  apiPushPubKeyRequest:
    type: "object"
    properties:
      PK:
        $ref: "#/definitions/apiPubKey"
  apiRegistFcmDeviceTokenResponse:
    type: "object"
    properties:
      token:
        type: "string"
        title: "The token"
      deviceId:
        type: "string"
      platform:
        type: "string"
    example:
      deviceId: "deviceId"
      platform: "platform"
      token: "token"
  apiRegisterStreamingChannelRequest:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "clan id"
      channelId:
        type: "string"
        title: "channel id"
  apiRegisterStreamingChannelResponse:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "clan id"
      channelId:
        type: "string"
        title: "channel id"
      streamingUrl:
        type: "string"
        title: "streaming url"
    example:
      streamingUrl: "streamingUrl"
      clanId: "clanId"
      channelId: "channelId"
  apiRegistrationEmailRequest:
    type: "object"
    properties:
      email:
        type: "string"
        description: "A valid RFC-5322 email address."
      password:
        type: "string"
        description: "A password for the user account."
      username:
        type: "string"
        description: "Set the username on the account at register. Must be unique."
      displayName:
        type: "string"
        title: "Display name"
      avatarUrl:
        type: "string"
        title: "Avatar url"
      dob:
        type: "string"
        title: "DOB"
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
  apiRole:
    type: "object"
    properties:
      id:
        type: "string"
        title: "Role id"
      title:
        type: "string"
      color:
        type: "string"
      roleIcon:
        type: "string"
      slug:
        type: "string"
      description:
        type: "string"
      creatorId:
        type: "string"
      clanId:
        type: "string"
      active:
        type: "integer"
        format: "int32"
      displayOnline:
        type: "integer"
        format: "int32"
      allowMention:
        type: "integer"
        format: "int32"
      roleUserList:
        $ref: "#/definitions/apiRoleUserList"
      permissionList:
        $ref: "#/definitions/apiPermissionList"
      roleChannelActive:
        type: "integer"
        format: "int32"
      channelIds:
        type: "array"
        items:
          type: "string"
      maxLevelPermission:
        type: "integer"
        format: "int32"
    title: "Role record"
    example:
      maxLevelPermission: 5
      color: "color"
      roleChannelActive: 5
      creatorId: "creatorId"
      description: "description"
      active: 0
      permissionList:
        maxLevelPermission: 5
        permissions:
        - level: 1
          scope: 6
          description: "description"
          active: 0
          id: "id"
          title: "title"
          slug: "slug"
        - level: 1
          scope: 6
          description: "description"
          active: 0
          id: "id"
          title: "title"
          slug: "slug"
      roleUserList:
        cursor: "cursor"
        roleUsers:
        - avatarUrl: "avatarUrl"
          displayName: "displayName"
          langTag: "langTag"
          online: true
          location: "location"
          id: "id"
          username: "username"
        - avatarUrl: "avatarUrl"
          displayName: "displayName"
          langTag: "langTag"
          online: true
          location: "location"
          id: "id"
          username: "username"
      title: "title"
      displayOnline: 6
      roleIcon: "roleIcon"
      id: "id"
      channelIds:
      - "channelIds"
      - "channelIds"
      allowMention: 1
      slug: "slug"
      clanId: "clanId"
  apiRoleList:
    type: "object"
    properties:
      roles:
        type: "array"
        description: "A list of role."
        items:
          $ref: "#/definitions/apiRole"
      nextCursor:
        type: "string"
        description: "The cursor to send when retrieving the next page, if any."
      prevCursor:
        type: "string"
        description: "The cursor to send when retrieving the previous page, if any."
      cacheableCursor:
        type: "string"
        description: "Cacheable cursor to list newer role description. Durable and\
          \ designed to be stored, unlike next/prev cursors."
    description: "A list of role description, usually a result of a list operation."
    example:
      nextCursor: "nextCursor"
      prevCursor: "prevCursor"
      roles:
      - maxLevelPermission: 5
        color: "color"
        roleChannelActive: 5
        creatorId: "creatorId"
        description: "description"
        active: 0
        permissionList:
          maxLevelPermission: 5
          permissions:
          - level: 1
            scope: 6
            description: "description"
            active: 0
            id: "id"
            title: "title"
            slug: "slug"
          - level: 1
            scope: 6
            description: "description"
            active: 0
            id: "id"
            title: "title"
            slug: "slug"
        roleUserList:
          cursor: "cursor"
          roleUsers:
          - avatarUrl: "avatarUrl"
            displayName: "displayName"
            langTag: "langTag"
            online: true
            location: "location"
            id: "id"
            username: "username"
          - avatarUrl: "avatarUrl"
            displayName: "displayName"
            langTag: "langTag"
            online: true
            location: "location"
            id: "id"
            username: "username"
        title: "title"
        displayOnline: 6
        roleIcon: "roleIcon"
        id: "id"
        channelIds:
        - "channelIds"
        - "channelIds"
        allowMention: 1
        slug: "slug"
        clanId: "clanId"
      - maxLevelPermission: 5
        color: "color"
        roleChannelActive: 5
        creatorId: "creatorId"
        description: "description"
        active: 0
        permissionList:
          maxLevelPermission: 5
          permissions:
          - level: 1
            scope: 6
            description: "description"
            active: 0
            id: "id"
            title: "title"
            slug: "slug"
          - level: 1
            scope: 6
            description: "description"
            active: 0
            id: "id"
            title: "title"
            slug: "slug"
        roleUserList:
          cursor: "cursor"
          roleUsers:
          - avatarUrl: "avatarUrl"
            displayName: "displayName"
            langTag: "langTag"
            online: true
            location: "location"
            id: "id"
            username: "username"
          - avatarUrl: "avatarUrl"
            displayName: "displayName"
            langTag: "langTag"
            online: true
            location: "location"
            id: "id"
            username: "username"
        title: "title"
        displayOnline: 6
        roleIcon: "roleIcon"
        id: "id"
        channelIds:
        - "channelIds"
        - "channelIds"
        allowMention: 1
        slug: "slug"
        clanId: "clanId"
      cacheableCursor: "cacheableCursor"
  apiRoleListEventResponse:
    type: "object"
    properties:
      limit:
        type: "string"
        title: "limit"
      state:
        type: "string"
        title: "state"
      cursor:
        type: "string"
        title: "cursor"
      clanId:
        type: "string"
        title: "clan_id"
      roles:
        title: "list of roles"
        $ref: "#/definitions/apiRoleList"
    example:
      cursor: "cursor"
      roles:
        nextCursor: "nextCursor"
        prevCursor: "prevCursor"
        roles:
        - maxLevelPermission: 5
          color: "color"
          roleChannelActive: 5
          creatorId: "creatorId"
          description: "description"
          active: 0
          permissionList:
            maxLevelPermission: 5
            permissions:
            - level: 1
              scope: 6
              description: "description"
              active: 0
              id: "id"
              title: "title"
              slug: "slug"
            - level: 1
              scope: 6
              description: "description"
              active: 0
              id: "id"
              title: "title"
              slug: "slug"
          roleUserList:
            cursor: "cursor"
            roleUsers:
            - avatarUrl: "avatarUrl"
              displayName: "displayName"
              langTag: "langTag"
              online: true
              location: "location"
              id: "id"
              username: "username"
            - avatarUrl: "avatarUrl"
              displayName: "displayName"
              langTag: "langTag"
              online: true
              location: "location"
              id: "id"
              username: "username"
          title: "title"
          displayOnline: 6
          roleIcon: "roleIcon"
          id: "id"
          channelIds:
          - "channelIds"
          - "channelIds"
          allowMention: 1
          slug: "slug"
          clanId: "clanId"
        - maxLevelPermission: 5
          color: "color"
          roleChannelActive: 5
          creatorId: "creatorId"
          description: "description"
          active: 0
          permissionList:
            maxLevelPermission: 5
            permissions:
            - level: 1
              scope: 6
              description: "description"
              active: 0
              id: "id"
              title: "title"
              slug: "slug"
            - level: 1
              scope: 6
              description: "description"
              active: 0
              id: "id"
              title: "title"
              slug: "slug"
          roleUserList:
            cursor: "cursor"
            roleUsers:
            - avatarUrl: "avatarUrl"
              displayName: "displayName"
              langTag: "langTag"
              online: true
              location: "location"
              id: "id"
              username: "username"
            - avatarUrl: "avatarUrl"
              displayName: "displayName"
              langTag: "langTag"
              online: true
              location: "location"
              id: "id"
              username: "username"
          title: "title"
          displayOnline: 6
          roleIcon: "roleIcon"
          id: "id"
          channelIds:
          - "channelIds"
          - "channelIds"
          allowMention: 1
          slug: "slug"
          clanId: "clanId"
        cacheableCursor: "cacheableCursor"
      limit: "limit"
      state: "state"
      clanId: "clanId"
  apiRoleUserList:
    type: "object"
    properties:
      roleUsers:
        type: "array"
        description: "role_users pairs for a clan."
        items:
          $ref: "#/definitions/RoleUserListRoleUser"
      cursor:
        type: "string"
        description: "Cursor for the next page of results, if any."
    example:
      cursor: "cursor"
      roleUsers:
      - avatarUrl: "avatarUrl"
        displayName: "displayName"
        langTag: "langTag"
        online: true
        location: "location"
        id: "id"
        username: "username"
      - avatarUrl: "avatarUrl"
        displayName: "displayName"
        langTag: "langTag"
        online: true
        location: "location"
        id: "id"
        username: "username"
  apiRpc:
    type: "object"
    properties:
      id:
        type: "string"
        description: "The identifier of the function."
      payload:
        type: "string"
        description: "The payload of the function which must be a JSON object."
      httpKey:
        type: "string"
        description: "The authentication key used when executed as a non-client HTTP\
          \ request."
    description: "Execute an Lua function on the server."
    example:
      payload: "payload"
      httpKey: "httpKey"
      id: "id"
  apiSearchMessageDocument:
    type: "object"
    properties:
      messageId:
        type: "string"
        description: "The message ID."
      channelId:
        type: "string"
        format: "int64"
        description: "The channel ID."
      clanId:
        type: "string"
        format: "int64"
        description: "The clan ID."
      senderId:
        type: "string"
        format: "int64"
        description: "The user ID of sender."
      content:
        type: "string"
        title: "Message content"
      mention:
        type: "string"
        title: "Mention users"
      reaction:
        type: "string"
        title: "Reactions"
      attachments:
        type: "array"
        title: "Attachment"
        items:
          $ref: "#/definitions/apiMessageAttachment"
      reference:
        type: "string"
        title: "Reference users"
      createTime:
        type: "string"
        title: "Message create time"
      updateTime:
        type: "string"
        title: "Message update time"
      channelLabel:
        type: "string"
        title: "Channel name"
      channelType:
        type: "integer"
        format: "int32"
        title: "Channel type"
      clanName:
        type: "string"
        title: "Clan name"
      username:
        type: "string"
        title: "Sender's username"
      displayName:
        type: "string"
        title: "Sender's display name"
      avatarUrl:
        type: "string"
        title: "Sender's avatar URL"
    example:
      reaction: "reaction"
      attachments:
      - filetype: "filetype"
        filename: "filename"
        size: "size"
        width: 0
        url: "url"
        height: 6
      - filetype: "filetype"
        filename: "filename"
        size: "size"
        width: 0
        url: "url"
        height: 6
      channelLabel: "channelLabel"
      avatarUrl: "avatarUrl"
      displayName: "displayName"
      messageId: "messageId"
      updateTime: "updateTime"
      channelType: 1
      content: "content"
      mention: "mention"
      clanName: "clanName"
      reference: "reference"
      senderId: "senderId"
      createTime: "createTime"
      channelId: "channelId"
      clanId: "clanId"
      username: "username"
  apiSearchMessageRequest:
    type: "object"
    properties:
      filters:
        type: "array"
        items:
          $ref: "#/definitions/apiFilterParam"
      from:
        type: "integer"
        format: "int32"
        title: "Offset value"
      size:
        type: "integer"
        format: "int32"
        title: "Page size"
      sorts:
        type: "array"
        title: "Sort information"
        items:
          $ref: "#/definitions/apiSortParam"
  apiSearchMessageResponse:
    type: "object"
    properties:
      messages:
        type: "array"
        description: "List of paged messages."
        items:
          $ref: "#/definitions/apiSearchMessageDocument"
      total:
        type: "integer"
        format: "int32"
        description: "The total number of messages."
    example:
      total: 5
      messages:
      - reaction: "reaction"
        attachments:
        - filetype: "filetype"
          filename: "filename"
          size: "size"
          width: 0
          url: "url"
          height: 6
        - filetype: "filetype"
          filename: "filename"
          size: "size"
          width: 0
          url: "url"
          height: 6
        channelLabel: "channelLabel"
        avatarUrl: "avatarUrl"
        displayName: "displayName"
        messageId: "messageId"
        updateTime: "updateTime"
        channelType: 1
        content: "content"
        mention: "mention"
        clanName: "clanName"
        reference: "reference"
        senderId: "senderId"
        createTime: "createTime"
        channelId: "channelId"
        clanId: "clanId"
        username: "username"
      - reaction: "reaction"
        attachments:
        - filetype: "filetype"
          filename: "filename"
          size: "size"
          width: 0
          url: "url"
          height: 6
        - filetype: "filetype"
          filename: "filename"
          size: "size"
          width: 0
          url: "url"
          height: 6
        channelLabel: "channelLabel"
        avatarUrl: "avatarUrl"
        displayName: "displayName"
        messageId: "messageId"
        updateTime: "updateTime"
        channelType: 1
        content: "content"
        mention: "mention"
        clanName: "clanName"
        reference: "reference"
        senderId: "senderId"
        createTime: "createTime"
        channelId: "channelId"
        clanId: "clanId"
        username: "username"
  apiSession:
    type: "object"
    properties:
      created:
        type: "boolean"
        description: "True if the corresponding account was just created, false otherwise."
      token:
        type: "string"
        description: "Authentication credentials."
      refreshToken:
        type: "string"
        description: "Refresh token that can be used for session token renewal."
      userId:
        type: "string"
        title: "User id"
    description: "A user's session used to authenticate messages."
    example:
      created: true
      userId: "userId"
      token: "token"
      refreshToken: "refreshToken"
  apiSessionLogoutRequest:
    type: "object"
    properties:
      token:
        type: "string"
        description: "Session token to log out."
      refreshToken:
        type: "string"
        description: "Refresh token to invalidate."
      deviceId:
        type: "string"
        title: "Device Id"
      fcmToken:
        type: "string"
        title: "FCM token from firebase"
    description: "Log out a session, invalidate a refresh token, or log out all sessions/refresh\
      \ tokens for a user."
  apiSessionRefreshRequest:
    type: "object"
    properties:
      token:
        type: "string"
        description: "Refresh token."
      vars:
        type: "object"
        description: "Extra information that will be bundled in the session token."
        additionalProperties:
          type: "string"
    description: "Authenticate against the server with a refresh token."
  apiSetDefaultNotificationRequest:
    type: "object"
    properties:
      clanId:
        type: "string"
      notificationType:
        type: "integer"
        format: "int32"
      categoryId:
        type: "string"
    title: "set default notification"
  apiSetMuteNotificationRequest:
    type: "object"
    properties:
      id:
        type: "string"
        title: "channel_id and category_id"
      notificationType:
        type: "integer"
        format: "int32"
      active:
        type: "integer"
        format: "int32"
    title: "set notification"
  apiSetNotificationRequest:
    type: "object"
    properties:
      channelCategoryId:
        type: "string"
        title: "channelId or categoryId"
      notificationType:
        type: "integer"
        format: "int32"
        title: "notification_type"
      timeMute:
        type: "string"
        format: "date-time"
        title: "time mute channel category"
      clanId:
        type: "string"
    title: "set notification"
  apiSortParam:
    type: "object"
    properties:
      fieldName:
        type: "string"
        title: "Field name to sort by"
      order:
        type: "string"
        title: "Sort order"
  apiStickerListedResponse:
    type: "object"
    properties:
      stickers:
        type: "array"
        items:
          $ref: "#/definitions/apiClanSticker"
    example:
      stickers:
      - createTime: "2000-01-23T04:56:07.000+00:00"
        creatorId: "creatorId"
        logo: "logo"
        id: "id"
        source: "source"
        category: "category"
        shortname: "shortname"
        clanId: "clanId"
        clanName: "clanName"
      - createTime: "2000-01-23T04:56:07.000+00:00"
        creatorId: "creatorId"
        logo: "logo"
        id: "id"
        source: "source"
        category: "category"
        shortname: "shortname"
        clanId: "clanId"
        clanName: "clanName"
  apiStreamingChannelResponse:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "clan id"
      channelId:
        type: "string"
        title: "channel id"
      streamingUrl:
        type: "string"
        title: "stream url"
      isStreaming:
        type: "boolean"
        title: "status"
    example:
      isStreaming: true
      streamingUrl: "streamingUrl"
      clanId: "clanId"
      channelId: "channelId"
  apiStreamingChannelUser:
    type: "object"
    properties:
      id:
        type: "string"
        title: "user join id"
      userId:
        type: "string"
        description: "user for a channel."
      channelId:
        type: "string"
        title: "channel id"
      participant:
        type: "string"
        title: "participant"
    description: "A list of users belonging to a channel, along with their role."
    example:
      id: "id"
      userId: "userId"
      channelId: "channelId"
      participant: "participant"
  apiStreamingChannelUserList:
    type: "object"
    properties:
      streamingChannelUsers:
        type: "array"
        title: "list of voice channel user"
        items:
          $ref: "#/definitions/apiStreamingChannelUser"
    description: "A list of users belonging to a channel, along with their role."
    example:
      streamingChannelUsers:
      - id: "id"
        userId: "userId"
        channelId: "channelId"
        participant: "participant"
      - id: "id"
        userId: "userId"
        channelId: "channelId"
        participant: "participant"
  apiSystemMessage:
    type: "object"
    properties:
      id:
        type: "string"
        title: "ID"
      clanId:
        type: "string"
        title: "Clan ID"
      channelId:
        type: "string"
        title: "Channel ID"
      welcomeRandom:
        type: "string"
        title: "Welcome random"
      welcomeSticker:
        type: "string"
        title: "Welcome sticker"
      boostMessage:
        type: "string"
        title: "Boost message"
      setupTips:
        type: "string"
        title: "Setup tips"
    description: "System message details."
    example:
      setupTips: "setupTips"
      welcomeSticker: "welcomeSticker"
      boostMessage: "boostMessage"
      id: "id"
      welcomeRandom: "welcomeRandom"
      clanId: "clanId"
      channelId: "channelId"
  apiSystemMessageRequest:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "Clan ID"
      channelId:
        type: "string"
        title: "Channel ID"
      welcomeRandom:
        type: "string"
        title: "Welcome random"
      welcomeSticker:
        type: "string"
        title: "Welcome sticker"
      boostMessage:
        type: "string"
        title: "Boost message"
      setupTips:
        type: "string"
        title: "Setup tips"
    description: "Request to get system message by clan and channel IDs."
  apiSystemMessagesList:
    type: "object"
    properties:
      systemMessagesList:
        type: "array"
        items:
          $ref: "#/definitions/apiSystemMessage"
    description: "List of system message."
    example:
      systemMessagesList:
      - setupTips: "setupTips"
        welcomeSticker: "welcomeSticker"
        boostMessage: "boostMessage"
        id: "id"
        welcomeRandom: "welcomeRandom"
        clanId: "clanId"
        channelId: "channelId"
      - setupTips: "setupTips"
        welcomeSticker: "welcomeSticker"
        boostMessage: "boostMessage"
        id: "id"
        welcomeRandom: "welcomeRandom"
        clanId: "clanId"
        channelId: "channelId"
  apiTokenSentEvent:
    type: "object"
    properties:
      senderId:
        type: "string"
        title: "sender id"
      senderName:
        type: "string"
        title: "sender name"
      receiverId:
        type: "string"
        title: "receiver"
      amount:
        type: "integer"
        format: "int32"
        title: "amount of token"
      note:
        type: "string"
        title: "note"
  apiUpdateAccountRequest:
    type: "object"
    properties:
      username:
        type: "string"
        description: "The username of the user's account."
      displayName:
        type: "string"
        description: "The display name of the user."
      avatarUrl:
        type: "string"
        description: "A URL for an avatar image."
      langTag:
        type: "string"
        description: "The language expected to be a tag which follows the BCP-47 spec."
      location:
        type: "string"
        description: "The location set by the user."
      timezone:
        type: "string"
        description: "The timezone set by the user."
      aboutMe:
        type: "string"
        title: "update about me"
      dob:
        type: "string"
        format: "date-time"
        title: "date of birth"
      logo:
        type: "string"
        title: "logo url"
      splashScreen:
        type: "string"
        title: "splash screen"
    description: "Update a user's account details."
  apiUpdateCategoryOrderRequest:
    type: "object"
    properties:
      clanId:
        type: "string"
      categories:
        type: "array"
        items:
          $ref: "#/definitions/apiCategoryOrderUpdate"
  apiUpdateRoleChannelRequest:
    type: "object"
    properties:
      roleId:
        type: "string"
        description: "The ID of the role to update."
      permissionUpdate:
        type: "array"
        description: "The permissions to add."
        items:
          $ref: "#/definitions/apiPermissionUpdate"
      maxPermissionId:
        type: "string"
        title: "id of permission which has max level permission"
      channelId:
        type: "string"
        title: "The channel_id"
      userId:
        type: "string"
        description: "The ID of the role to update."
  apiUpdateUsersRequest:
    type: "object"
    properties:
      displayName:
        type: "string"
        description: "The account username of a user."
      avatarUrl:
        type: "string"
        description: "The avarar_url of a user."
    description: "Fetch a batch of zero or more users from the server."
  apiUploadAttachment:
    type: "object"
    properties:
      filename:
        type: "string"
        title: "The name of file that need to upload"
      url:
        type: "string"
        title: "The url"
    example:
      filename: "filename"
      url: "url"
  apiUploadAttachmentRequest:
    type: "object"
    properties:
      filename:
        type: "string"
        title: "The name of file that need to upload"
      filetype:
        type: "string"
        title: "The type of file that need to upload"
      size:
        type: "integer"
        format: "int32"
        title: "The size of file that need to upload"
      width:
        type: "integer"
        format: "int32"
        title: "width"
      height:
        type: "integer"
        format: "int32"
        title: "Height"
  apiUser:
    type: "object"
    properties:
      id:
        type: "string"
        description: "The id of the user's account."
      username:
        type: "string"
        description: "The username of the user's account."
      displayName:
        type: "string"
        description: "The display name of the user."
      avatarUrl:
        type: "string"
        description: "A URL for an avatar image."
      langTag:
        type: "string"
        description: "The language expected to be a tag which follows the BCP-47 spec."
      location:
        type: "string"
        description: "The location set by the user."
      timezone:
        type: "string"
        description: "The timezone set by the user."
      metadata:
        type: "string"
        description: "Additional information stored as a JSON object."
      facebookId:
        type: "string"
        description: "The Facebook id in the user's account."
      googleId:
        type: "string"
        description: "The Google id in the user's account."
      gamecenterId:
        type: "string"
        description: "The Apple Game Center in of the user's account."
      steamId:
        type: "string"
        description: "The Steam id in the user's account."
      online:
        type: "boolean"
        description: "Indicates whether the user is currently online."
      edgeCount:
        type: "integer"
        format: "int32"
        description: "Number of related edges to this user."
      createTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time (for gRPC clients) or ISO string (for REST clients)\
          \ when the user was created."
      updateTime:
        type: "string"
        format: "date-time"
        description: "The UNIX time (for gRPC clients) or ISO string (for REST clients)\
          \ when the user was last updated."
      appleId:
        type: "string"
        description: "The Apple Sign In ID in the user's account."
      aboutMe:
        type: "string"
      joinTime:
        type: "string"
        format: "date-time"
      isMobile:
        type: "boolean"
        title: "platform"
      dob:
        type: "string"
        format: "date-time"
    description: "A user in the server."
    example:
      googleId: "googleId"
      metadata: "metadata"
      avatarUrl: "avatarUrl"
      joinTime: "2000-01-23T04:56:07.000+00:00"
      displayName: "displayName"
      timezone: "timezone"
      facebookId: "facebookId"
      edgeCount: 0
      langTag: "langTag"
      updateTime: "2000-01-23T04:56:07.000+00:00"
      appleId: "appleId"
      aboutMe: "aboutMe"
      steamId: "steamId"
      gamecenterId: "gamecenterId"
      createTime: "2000-01-23T04:56:07.000+00:00"
      dob: "2000-01-23T04:56:07.000+00:00"
      online: true
      location: "location"
      id: "id"
      isMobile: true
      username: "username"
  apiUserActivity:
    type: "object"
    properties:
      userId:
        type: "string"
      activityName:
        type: "string"
      activityType:
        type: "integer"
        format: "int32"
      activityDescription:
        type: "string"
      startTime:
        type: "string"
        format: "date-time"
      endTime:
        type: "string"
        format: "date-time"
      applicationId:
        type: "string"
      status:
        type: "integer"
        format: "int32"
    example:
      activityName: "activityName"
      startTime: "2000-01-23T04:56:07.000+00:00"
      activityDescription: "activityDescription"
      endTime: "2000-01-23T04:56:07.000+00:00"
      activityType: 0
      applicationId: "applicationId"
      userId: "userId"
      status: 6
  apiUserPermissionInChannelListResponse:
    type: "object"
    properties:
      clanId:
        type: "string"
        title: "clan id"
      channelId:
        type: "string"
        title: "channel id"
      permissions:
        description: "A list of permission."
        $ref: "#/definitions/apiPermissionList"
    example:
      permissions:
        maxLevelPermission: 5
        permissions:
        - level: 1
          scope: 6
          description: "description"
          active: 0
          id: "id"
          title: "title"
          slug: "slug"
        - level: 1
          scope: 6
          description: "description"
          active: 0
          id: "id"
          title: "title"
          slug: "slug"
      clanId: "clanId"
      channelId: "channelId"
  apiUserStatus:
    type: "object"
    properties:
      userId:
        type: "string"
      status:
        type: "string"
    example:
      userId: "userId"
      status: "status"
  apiUserStatusUpdate:
    type: "object"
    properties:
      status:
        type: "string"
      minutes:
        type: "integer"
        format: "int32"
      untilTurnOn:
        type: "boolean"
  apiUsers:
    type: "object"
    properties:
      users:
        type: "array"
        description: "The User objects."
        items:
          $ref: "#/definitions/apiUser"
    description: "A collection of zero or more users."
    example:
      users:
      - googleId: "googleId"
        metadata: "metadata"
        avatarUrl: "avatarUrl"
        joinTime: "2000-01-23T04:56:07.000+00:00"
        displayName: "displayName"
        timezone: "timezone"
        facebookId: "facebookId"
        edgeCount: 0
        langTag: "langTag"
        updateTime: "2000-01-23T04:56:07.000+00:00"
        appleId: "appleId"
        aboutMe: "aboutMe"
        steamId: "steamId"
        gamecenterId: "gamecenterId"
        createTime: "2000-01-23T04:56:07.000+00:00"
        dob: "2000-01-23T04:56:07.000+00:00"
        online: true
        location: "location"
        id: "id"
        isMobile: true
        username: "username"
      - googleId: "googleId"
        metadata: "metadata"
        avatarUrl: "avatarUrl"
        joinTime: "2000-01-23T04:56:07.000+00:00"
        displayName: "displayName"
        timezone: "timezone"
        facebookId: "facebookId"
        edgeCount: 0
        langTag: "langTag"
        updateTime: "2000-01-23T04:56:07.000+00:00"
        appleId: "appleId"
        aboutMe: "aboutMe"
        steamId: "steamId"
        gamecenterId: "gamecenterId"
        createTime: "2000-01-23T04:56:07.000+00:00"
        dob: "2000-01-23T04:56:07.000+00:00"
        online: true
        location: "location"
        id: "id"
        isMobile: true
        username: "username"
  apiVoiceChannelUser:
    type: "object"
    properties:
      id:
        type: "string"
        title: "voice user join id"
      userId:
        type: "string"
        description: "User for a channel."
      channelId:
        type: "string"
        title: "channel id"
      participant:
        type: "string"
        title: "participant"
    description: "A list of users belonging to a channel, along with their role."
    example:
      id: "id"
      userId: "userId"
      channelId: "channelId"
      participant: "participant"
  apiVoiceChannelUserList:
    type: "object"
    properties:
      voiceChannelUsers:
        type: "array"
        title: "list of voice channel user"
        items:
          $ref: "#/definitions/apiVoiceChannelUser"
    description: "A list of users belonging to a channel, along with their role."
    example:
      voiceChannelUsers:
      - id: "id"
        userId: "userId"
        channelId: "channelId"
        participant: "participant"
      - id: "id"
        userId: "userId"
        channelId: "channelId"
        participant: "participant"
  apiWalletLedger:
    type: "object"
    properties:
      id:
        type: "string"
        title: "change set id"
      userId:
        type: "string"
        title: "user id"
      createTime:
        type: "string"
        format: "date-time"
        title: "create time"
      value:
        type: "integer"
        format: "int32"
        title: "value"
      transactionId:
        type: "string"
        title: "transaction id"
    example:
      createTime: "2000-01-23T04:56:07.000+00:00"
      id: "id"
      userId: "userId"
      value: 0
      transactionId: "transactionId"
  apiWalletLedgerList:
    type: "object"
    properties:
      walletLedger:
        type: "array"
        items:
          $ref: "#/definitions/apiWalletLedger"
      prevCursor:
        type: "string"
      nextCursor:
        type: "string"
    example:
      nextCursor: "nextCursor"
      prevCursor: "prevCursor"
      walletLedger:
      - createTime: "2000-01-23T04:56:07.000+00:00"
        id: "id"
        userId: "userId"
        value: 0
        transactionId: "transactionId"
      - createTime: "2000-01-23T04:56:07.000+00:00"
        id: "id"
        userId: "userId"
        value: 0
        transactionId: "transactionId"
  apiWebhook:
    type: "object"
    properties:
      id:
        type: "string"
      webhookName:
        type: "string"
      channelId:
        type: "string"
      active:
        type: "integer"
        format: "int32"
      url:
        type: "string"
        title: "URL of the webhook, which is automatically generated and different\
          \ from the avatar"
      creatorId:
        type: "string"
      createTime:
        type: "string"
      updateTime:
        type: "string"
      avatar:
        type: "string"
    example:
      createTime: "createTime"
      creatorId: "creatorId"
      webhookName: "webhookName"
      active: 0
      updateTime: "updateTime"
      id: "id"
      avatar: "avatar"
      channelId: "channelId"
      url: "url"
  apiWebhookCreateRequest:
    type: "object"
    properties:
      webhookName:
        type: "string"
      channelId:
        type: "string"
      avatar:
        type: "string"
      clanId:
        type: "string"
  apiWebhookGenerateResponse:
    type: "object"
    properties:
      url:
        type: "string"
      hookName:
        type: "string"
      channelId:
        type: "string"
      avatar:
        type: "string"
    example:
      avatar: "avatar"
      url: "url"
      hookName: "hookName"
      channelId: "channelId"
  apiWebhookListResponse:
    type: "object"
    properties:
      webhooks:
        type: "array"
        items:
          $ref: "#/definitions/apiWebhook"
    example:
      webhooks:
      - createTime: "createTime"
        creatorId: "creatorId"
        webhookName: "webhookName"
        active: 0
        updateTime: "updateTime"
        id: "id"
        avatar: "avatar"
        channelId: "channelId"
        url: "url"
      - createTime: "createTime"
        creatorId: "creatorId"
        webhookName: "webhookName"
        active: 0
        updateTime: "updateTime"
        id: "id"
        avatar: "avatar"
        channelId: "channelId"
        url: "url"
  apiWithdrawTokenRequest:
    type: "object"
    properties:
      amount:
        type: "integer"
        format: "int32"
        title: "amount of token"
  mezonapiEvent:
    type: "object"
    properties:
      name:
        type: "string"
        description: "An event name, type, category, or identifier."
      properties:
        type: "object"
        description: "Arbitrary event property values."
        additionalProperties:
          type: "string"
      timestamp:
        type: "string"
        format: "date-time"
        description: "The time when the event was triggered."
      external:
        type: "boolean"
        description: "True if the event came directly from a client call, false otherwise."
    description: "Represents an event to be passed through the server to registered\
      \ event handlers."
  mezonapiListAuditLog:
    type: "object"
    properties:
      totalCount:
        type: "integer"
        format: "int32"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      logs:
        type: "array"
        items:
          $ref: "#/definitions/apiAuditLog"
    example:
      pageSize: 1
      page: 6
      totalCount: 0
      logs:
      - entityName: "entityName"
        timeLog: "2000-01-23T04:56:07.000+00:00"
        entityId: "entityId"
        details: "details"
        id: "id"
        userId: "userId"
        clanId: "clanId"
        actionLog: "actionLog"
      - entityName: "entityName"
        timeLog: "2000-01-23T04:56:07.000+00:00"
        entityId: "entityId"
        details: "details"
        id: "id"
        userId: "userId"
        clanId: "clanId"
        actionLog: "actionLog"
  protobufAny:
    type: "object"
    properties:
      '@type':
        type: "string"
    additionalProperties: {}
  protobufNullValue:
    type: "string"
    description: "`NullValue` is a singleton enumeration to represent the null value\
      \ for the\n`Value` type union.\n\n The JSON representation for `NullValue` is\
      \ JSON `null`.\n\n - NULL_VALUE: Null value."
    enum:
    - "NULL_VALUE"
    default: "NULL_VALUE"
  rpcStatus:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      details:
        type: "array"
        items:
          $ref: "#/definitions/protobufAny"
externalDocs:
  description: "Mezon server documentation"
  url: "https://heroiclabs.com/docs"
